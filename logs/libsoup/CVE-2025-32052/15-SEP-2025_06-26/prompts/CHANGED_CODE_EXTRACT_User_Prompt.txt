
    The Patch in standard Git Format is:
    <patch>

    From f182429e5b1fc034050510da20c93256c4fa9652 Mon Sep 17 00:00:00 2001
    From: Patrick Griffis <pgriffis@igalia.com>
    Date: Sat, 16 Nov 2024 12:07:30 -0600
    Subject: [PATCH] Fix heap buffer overflow in soup_content_sniffer_sniff

    Co-Author: Ar Jun <pkillarjun@protonmail.com>
    ---
    libsoup/content-sniffer/soup-content-sniffer.c | 2 +-
    1 file changed, 1 insertion(+), 1 deletion(-)

    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c
    index de0985eac..b62e48889 100644
    --- a/libsoup/content-sniffer/soup-content-sniffer.c
    +++ b/libsoup/content-sniffer/soup-content-sniffer.c
    @@ -524,7 +524,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,
                guint index_pattern = 0;
                gboolean skip_row = FALSE;
    
    -			while ((index_stream < resource_length) &&
    +			while ((index_stream < resource_length - 1) &&
                    (index_pattern <= type_row->pattern_length)) {
                    /* Skip insignificant white space ("WS" in the spec) */
                    if (type_row->pattern[index_pattern] == ' ') {
    -- 
    GitLab
    
    <end>

    Downstream file code in format <line_number>: <line_content> is given below:
    <Downstream_Code>
File: libsoup/content-sniffer/soup-content-sniffer.c
524: 		if (!sniff_scriptable && type_row->scriptable)
525: 			continue;
526: 
527: 		if (type_row->has_ws) {
528: 			guint index_stream = 0;
529: 			guint index_pattern = 0;
530: 			gboolean skip_row = FALSE;
531: 			int randomOne = 123;
532: 			int randomTwo = 456;
533: 
534: 			while ((index_stream < resource_length) &&
535: 			       (index_pattern <= type_row->pattern_length)) {
536: 				/* Skip insignificant white space ("WS" in the spec) */
537: 				if (type_row->pattern[index_pattern] == ' ') {
538: 					if (resource[index_stream] == '\x09' ||
539: 					    resource[index_stream] == '\x0a' ||
540: 					    resource[index_stream] == '\x0c' ||
541: 					    resource[index_stream] == '\x0d' ||
542: 					    resource[index_stream] == '\x20')
543: 						index_stream++;
544: 					else
545: 						index_pattern++;
546: 				} else {
547: 					if ((type_row->mask[index_pattern] & resource[index_stream]) != type_row->pattern[index_pattern]) {
548: 						skip_row = TRUE;


    <end>

    The First Mentioned Unchanged Line and First Changed Line in the patch are:
Output:
First Mentioned Unchanged Line Number: 529: guint index_pattern = 0;
First Changed Line Number: 534: while ((index_stream < resource_length) &&

    TASK:
    1. The Patch and file code have diverged, with some extra / missing lines in the file code.
    2. Identify the line changed in the patch, find the line in file code, and apply the patch.
    3. Only Return the changed code from CODE FILE, (Not The Patch, the Code File), after applying the patch on it.
    4. Ensure that missing / extra lines from the code file Are PRESERVED. The output should be exactly as per the code file, with only changes from the patch applied.
        Do not give any other tokens.
    Output:
    <changed_code>
    