
    The Patch in standard Git Format is:
    <patch>
From f182429e5b1fc034050510da20c93256c4fa9652 Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Sat, 16 Nov 2024 12:07:30 -0600
Subject: [PATCH] Fix heap buffer overflow in soup_content_sniffer_sniff

Co-Author: Ar Jun <pkillarjun@protonmail.com>
---
 libsoup/content-sniffer/soup-content-sniffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c
index de0985eac..b62e48889 100644
--- a/libsoup/content-sniffer/soup-content-sniffer.c
+++ b/libsoup/content-sniffer/soup-content-sniffer.c
@@ -532,7 +532,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,
                guint index_stream = 0;
                guint index_pattern = 0;
                gboolean skip_row = FALSE;
 
-			while ((index_stream < resource_length) &&
+			while ((index_stream < resource_length - 1) &&
                    (index_pattern <= type_row->pattern_length)) {
                    /* Skip insignificant white space ("WS" in the spec) */
                    if (type_row->pattern[index_pattern] == ' ') {
-- 
GitLab
    <end>

    The First Mentioned Unchanged Line and First Changed Line in the patch are:
<function Prompts.getPrompts.<locals>.first_line_content at 0x7c77634439a0>

    Their line numbers in the downstream file are now:
To determine the line numbers based on the provided patch and file code, let's analyze the patch and the file content step-by-step.

### Patch Analysis
The patch modifies the `soup-content-sniffer.c` file. Specifically, it changes the following line:

**Before:**
```c
while ((index_stream < resource_length) &&
```

**After:**
```c
while ((index_stream < resource_length - 1) &&
```

### File Code Analysis
The relevant portion of the file code is:

```c
524: 		if (!sniff_scriptable && type_row->scriptable)
525: 			continue;
526: 
527: 		if (type_row->has_ws) {
528: 			guint index_stream = 0;
529: 			guint index_pattern = 0;
530: 			gboolean skip_row = FALSE;
531: 
532: 			while ((index_stream < resource_length) &&
533: 			       (index_pattern <= type_row->pattern_length)) {
534: 				/* Skip insignificant white space ("WS" in the spec) */
535: 				if (type_row->pattern[index_pattern] == ' ') {
536: 					if (resource[index_stream] == '\x09' ||
537: 					    resource[index_stream] == '\x0a' ||
538: 					    resource[index_stream] == '\x0c' ||
539: 					    resource[index_stream] == '\x0d' ||
540: 					    resource[index_stream] == '\x20')
541: 						index_stream++;
542: 					else
543: 						index_pattern++;
544: 				} else {
545: 					if ((type_row->mask[index_pattern] & resource[index_stream]) != type_row->pattern[index_pattern]) {
546: 						skip_row = TRUE;
547: 						break;
548: 					}
```

### Identifying Lines
1. **First Mentioned Unchanged Line**: This refers to the first line in the patch that is unchanged. In the patch, the first unchanged line is:
   ```c
   while ((index_stream < resource_length) &&
   ```
   This line appears in the file at line number **532**.

2. **First Changed Line**: This refers to the first line in the patch that is changed. In the patch, the first changed line is:
   ```c
   while ((index_stream < resource_length - 1) &&
   ```
   This line also appears in the file at line number **532**, but with the change applied.

### Conclusion
- **First Mentioned Unchanged Line Number**: 532
- **First Changed Line Number**: 532

So, the output is:
```
First Mentioned Unchanged Line Number: 532
First Changed Line Number: 532
```

    Update the line numbers in the hunk header of patch to match the FIRST MENTIONED UNCHANGED LINE number.
    Do NOT change the patch logic.
    Only output the final updated patch in STANDARD GIT diff format.
    