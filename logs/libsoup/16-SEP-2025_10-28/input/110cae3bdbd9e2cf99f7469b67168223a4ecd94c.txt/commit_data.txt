commit 110cae3bdbd9e2cf99f7469b67168223a4ecd94c
Author: Patrick Griffis <pgriffis@igalia.com>
Date:   Wed Jan 29 19:28:53 2025 -0600

    cookies: Limit max size of name and value to 4096 bytes
    
    This matches web browsers.

diff --git a/libsoup/cookies/soup-cookie.c b/libsoup/cookies/soup-cookie.c
index dba11b0c..cb4678aa 100644
--- a/libsoup/cookies/soup-cookie.c
+++ b/libsoup/cookies/soup-cookie.c
@@ -198,6 +198,11 @@ parse_one_cookie (const char *header, GUri *origin)
 	/* Parse the VALUE */
 	cookie->value = parse_value (&p, TRUE);
 
+	if (strlen (cookie->name) + strlen (cookie->value) > 4096) {
+		soup_cookie_free (cookie);
+		return NULL;
+	}
+
 	/* Parse attributes */
 	while (*p == ';') {
 		start = skip_lws (p + 1);
diff --git a/tests/cookies-test.c b/tests/cookies-test.c
index 332d92be..bae81c2d 100644
--- a/tests/cookies-test.c
+++ b/tests/cookies-test.c
@@ -522,6 +522,40 @@ do_cookies_parsing_control_characters (void)
 	g_object_unref (jar);
 }
 
+static void
+do_cookies_parsing_name_value_max_size (void)
+{
+        SoupCookie *cookie;
+        const char *too_long_value
+        const char *longest_alone_value = too_long_value + 1;
+        const char *longest_value_with_a_name = longest_alone_value + 1;
+        char *name_and_value;
+
+        cookie = soup_cookie_parse(too_long_value, NULL);
+        g_assert_null (cookie);
+
+        cookie = soup_cookie_parse(longest_alone_value, NULL);
+        g_assert_nonnull (cookie);
+        soup_cookie_free (cookie);
+
+        name_and_value = g_strconcat("n=", longest_alone_value, NULL);
+        cookie = soup_cookie_parse(name_and_value, NULL);
+        g_assert_null (cookie);
+        g_free (name_and_value);
+
+        name_and_value = g_strconcat("n=", longest_value_with_a_name, NULL);
+        cookie = soup_cookie_parse(name_and_value, NULL);
+        g_assert_nonnull (cookie);
+        soup_cookie_free (cookie);
+        g_free (name_and_value);
+
+        name_and_value = g_strconcat(longest_alone_value, "=", NULL);
+        cookie = soup_cookie_parse(name_and_value, NULL);
+        g_assert_nonnull (cookie);
+        soup_cookie_free (cookie);
+        g_free (name_and_value);
+}
+
 static void
 do_get_cookies_empty_host_test (void)
 {
@@ -685,6 +719,7 @@ main (int argc, char **argv)
 	g_test_add_func ("/cookies/parsing/max-age-long-overflow", do_cookies_parsing_max_age_long_overflow);
 	g_test_add_func ("/cookies/parsing/equal-nullpath", do_cookies_equal_nullpath);
 	g_test_add_func ("/cookies/parsing/control-characters", do_cookies_parsing_control_characters);
+        g_test_add_func ("/cookies/parsing/name-value-max-size", do_cookies_parsing_name_value_max_size);
 	g_test_add_func ("/cookies/get-cookies/empty-host", do_get_cookies_empty_host_test);
 	g_test_add_func ("/cookies/remove-feature", do_remove_feature_test);
 	g_test_add_func ("/cookies/secure-cookies", do_cookies_strict_secure_test);