{
    "CVE-2025-4948": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in the soup_multipart_new_from_message() function of the libsoup HTTP library, which is commonly used by GNOME and other applications to handle web communications. The issue occurs when the library processes specially crafted multipart messages. Due to improper validation, an internal calculation can go wrong, leading to an integer underflow. This can cause the program to access invalid memory and crash. As a result, any application or server using libsoup could be forced to exit unexpectedly, creating a denial-of-service (DoS) risk.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n        From f2f28afe0b3b2b3009ab67d6874457ec6bac70c0 Mon Sep 17 00:00:00 2001\\n        From: Milan Crha <mcrha@redhat.com>\\n        Date: Thu, 15 May 2025 17:49:11 +0200\\n        Subject: [PATCH] soup-multipart: Verify boundary limits for multipart body\\n\\n        It could happen that the boundary started at a place which resulted into\\n        a negative number, which in an unsigned integer is a very large value.\\n        Check the body size is not a negative value before setting it.\\n\\n        Closes https://gitlab.gnome.org/GNOME/libsoup/-/issues/449\\n\\n        Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/463>\\n        ---\\n        libsoup/soup-multipart.c |  2 +-\\n        tests/multipart-test.c   | 40 ++++++++++++++++++++++++++++++++++++++++\\n        2 files changed, 41 insertions(+), 1 deletion(-)\\n\\n        diff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\\n        index 7b1e20cf..e526369e 100644\\n        --- a/libsoup/soup-multipart.c\\n        +++ b/libsoup/soup-multipart.c\\n        @@ -204,7 +204,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\\n                */\\n                part_body = g_bytes_new_from_bytes (body, // FIXME\\n                                    split - body_data,\\n        -\\t\\t\\t\\t\\t\\t    end - 2 - split);\\n        +\\t\\t\\t\\t\\t\\t    end - 2 >= split ? end - 2 - split : 0);\\n                g_ptr_array_add (multipart->bodies, part_body);\\n        \\n                start = end;\\n        diff --git a/tests/multipart-test.c b/tests/multipart-test.c\\n        index c4e996ae..e7c28dfb 100644\\n        --- a/tests/multipart-test.c\\n        +++ b/tests/multipart-test.c\\n        @@ -527,6 +527,45 @@ test_multipart_bounds_bad (void)\\n            g_bytes_unref (bytes);\\n        }\\n        \\n        +static void\\n        +test_multipart_too_large (void)\\n        +{\\n        +\\tconst char *raw_body =\\n        +\\t\\t\\\"-------------------\\r\\n\\\"\\n        +\\t\\t\\\"-\\n\\\"\\n        +\\t\\t\\\"Cont\\\"\\r\\n\\\"\\n        +\\t\\t\\\"Content-Tynt----e:n\\u008erQK\\r\\n\\\"\\n        +\\t\\t\\\"Content-Disposition:   name=  form-; name=\\\"file\\\"; filename=\\\"ype:i/  -d; ----\\u00ae\\r\\n\\\"\\n        +\\t\\t\\\"Content-Typimag\\u0001/png--\\\\\\n\\\"\\n        +\\t\\t\\\"\\r\\n\\\"\\n        +\\t\\t\\\"---:\\n\\r\\n\\\"\\n        +\\t\\t\\\"\\r\\n\\\"\\n        +\\t\\t\\\"-------------------------------------\\r\\n\\\"\\n        +\\t\\t\\\"---------\\r\\n\\\"\\n        +\\t\\t\\\"----------------------\\\";\\n        +\\tGBytes *body;\\n        +\\tGHashTable *params;\\n        +\\tSoupMessageHeaders *headers;\\n        +\\tSoupMultipart *multipart;\\n        +\\n        +\\tparams = g_hash_table_new (g_str_hash, g_str_equal);\\n        +\\tg_hash_table_insert (params, (gpointer) \\\"boundary\\\", (gpointer) \\\"-----------------\\\");\\n        +\\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\\n        +\\tsoup_message_headers_set_content_type (headers, \\\"multipart/form-data\\\", params);\\n        +\\tg_hash_table_unref (params);\\n        +\\n        +\\tbody = g_bytes_new_static (raw_body, strlen (raw_body));\\n        +\\tmultipart = soup_multipart_new_from_message (headers, body);\\n        +\\tsoup_message_headers_unref (headers);\\n        +\\tg_bytes_unref (body);\\n        +\\n        +\\tg_assert_nonnull (multipart);\\n        +\\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\\n        +\\tg_assert_true (soup_multipart_get_part (multipart, 0, &headers, &body));\\n        +\\tg_assert_cmpint (g_bytes_get_size (body), ==, 0);\\n        +\\tsoup_multipart_free (multipart);\\n        +}\\n        +\\n        int\\n        main (int argc, char **argv)\\n        {\\n        @@ -556,6 +595,7 @@ main (int argc, char **argv)\\n            g_test_add_data_func (\\\"/multipart/async-small-reads\\\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\\n            g_test_add_func (\\\"/multipart/bounds-good\\\", test_multipart_bounds_good);\\n            g_test_add_func (\\\"/multipart/bounds-bad\\\", test_multipart_bounds_bad);\\n        +\\tg_test_add_func (\\\"/multipart/too-large\\\", test_multipart_too_large);\\n        \\n            ret = g_test_run ();\\n        \\n        -- \\n        GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-multipart.c': ['199: ', '200: \\t\\t/* @split, as previously mentioned, points to the', '201: \\t\\t * start of the body, and @end points to the start of', '202: \\t\\t * the following boundary line, which is to say 2 bytes', '203: \\t\\t * after the end of the body.', '204: \\t\\t */', '205: \\t\\tpart_body = g_bytes_new_from_bytes (body, // FIXME', '206: \\t\\t\\t\\t\\t\\t    split - body_data,', '207: \\t\\t\\t\\t\\t\\t    end - 2 - split);', '208: \\t\\tg_ptr_array_add (multipart->bodies, part_body);', '209: ', '210: \\t\\tstart = end;', '211: \\t}', '212: ', '213: \\treturn multipart;', '214: }', '215: ', '216: /**', '217:  * soup_multipart_get_length:', '218:  * @multipart: a #SoupMultipart', '219:  *', '220:  * Gets the number of body parts in @multipart.', '221:  *', '222:  * Returns: the number of body parts in @multipart', '223:  **/', '224: int', '225: soup_multipart_get_length (SoupMultipart *multipart)', '226: {', '227: \\treturn multipart->bodies->len;', '228: }'], 'tests/multipart-test.c': ['117: \\tcheck_is_next (is_next);', '118: ', '119: \\tif (g_str_equal (name, \"Date\")) {', '120: \\t\\tis_next = soup_message_headers_iter_next (&iter, &name, &value);', '121: \\t\\tcheck_is_next (is_next);', '122: \\t}', '123: ', '124: \\tg_assert_cmpstr (name, ==, \"Content-Type\");', '125: \\tg_assert_cmpstr (value, ==, \"multipart/x-mixed-replace; boundary=cut-here\");', '126: }', '127: ', '128: static void', '129: read_cb (GObject *source, GAsyncResult *asyncResult, gpointer data)', '130: {', '144: \\t\\tg_input_stream_close (stream, NULL, &error);', '145: \\t\\tg_assert_no_error (error);', '146: \\t\\tg_object_unref (stream);', '147: \\t\\tg_main_loop_quit (loop);', '148: \\t\\treturn;', '149: \\t}', '150: ', '151: \\tg_input_stream_read_async (stream, buffer, READ_BUFFER_SIZE,', '152: \\t\\t\\t\\t   G_PRIORITY_DEFAULT, NULL,', '153: \\t\\t\\t\\t   read_cb, NULL);', '154: }', '155: ', '156: static void', '157: no_multipart_handling_cb (GObject *source, GAsyncResult *res, gpointer data)', '158: {', '163: \\tin = soup_session_send_finish (session, res, &error);', '164: \\tg_assert_no_error (error);', '165: \\tif (error) {', '166: \\t\\tg_main_loop_quit (loop);', '167: \\t\\treturn;', '168: \\t}', '169: ', '170: \\tg_input_stream_read_async (in, buffer, READ_BUFFER_SIZE,', '171: \\t\\t\\t\\t   G_PRIORITY_DEFAULT, NULL,', '172: \\t\\t\\t\\t   read_cb, NULL);', '173: }', '174: ', '175: static void', '176: multipart_close_part_cb (GObject *source, GAsyncResult *res, gpointer data)', '177: {', '203: \\t\\tg_assert_cmpint (nread, ==, 34);', '204: \\t\\tbreak;', '205: \\tdefault:', '206: \\t\\tsoup_test_assert (FALSE, \"unexpected read of size: %d\", (int)nread);', '207: \\t\\tbreak;', '208: \\t}', '209: }', '210: ', '211: static void', '212: multipart_read_cb (GObject *source, GAsyncResult *asyncResult, gpointer data)', '213: {', '292: ', '293: \\t\\tbreak;', '294: \\tdefault:', '295: \\t\\tsoup_test_assert (FALSE, \"unexpected part received\");', '296: \\t\\tbreak;', '297: \\t}', '298: }', '299: ', '300: static void', '301: multipart_next_part_cb (GObject *source, GAsyncResult *res, gpointer data)', '302: {', '497: \\tg_assert_cmpint (strlen (TEXT), ==, g_bytes_get_size (set_bytes));', '498: \\tg_assert_cmpstr (\"text/plain\", ==, soup_message_headers_get_content_type (set_headers, NULL));', '499: \\tg_assert_cmpmem (TEXT, strlen (TEXT), g_bytes_get_data (set_bytes, NULL), g_bytes_get_size (set_bytes));', '500: ', '501: \\tsoup_message_headers_unref (headers);', '502: \\tg_bytes_unref (bytes);', '503: ', '504: \\tsoup_multipart_free (multipart);', '505: ', '506: \\t#undef TEXT', '507: }', '508: ', '509: static void', '510: test_multipart_bounds_bad (void)', '511: {', '512: \\tSoupMultipart *multipart;', '513: \\tSoupMessageHeaders *headers;', '514: \\tGBytes *bytes;', '522: \\t/* it did read out of raw_data/bytes bounds */', '523: \\tmultipart = soup_multipart_new_from_message (headers, bytes);', '524: \\tg_assert_null (multipart);', '525: ', '526: \\tsoup_message_headers_unref (headers);', '527: \\tg_bytes_unref (bytes);', '528: }', '529: ', '530: int', '531: main (int argc, char **argv)', '532: {', '533: \\tSoupServer *server;', '534: \\tint ret;', '535: ', '536: \\ttest_init (argc, argv, NULL);', '537: ', '538: \\tbuffer = g_malloc (READ_BUFFER_SIZE);', '539: ', '540: \\tserver = soup_test_server_new (SOUP_TEST_SERVER_DEFAULT);', '541: \\tsoup_server_add_handler (server, NULL, server_callback, NULL, NULL);', '542: \\tbase_uri = soup_test_server_get_uri (server, \"http\", NULL);', '543: \\tbase_uri_string = g_uri_to_string (base_uri);', '544: ', '545: \\t/* FIXME: I had to raise the number of connections allowed here, otherwise I', '546: \\t * was hitting the limit, which indicates some connections are not dying.', '547: \\t */', '548: \\tsession = soup_test_session_new (\"max-conns\", 20,', '549: \\t\\t\\t\\t\\t \"max-conns-per-host\", 20,', '550: \\t\\t\\t\\t\\t NULL);', '551: \\tsoup_session_add_feature_by_type (session, SOUP_TYPE_CONTENT_SNIFFER);', '552: ', '553: \\tg_test_add_data_func (\"/multipart/no\", GINT_TO_POINTER (NO_MULTIPART), test_multipart);', '554: \\tg_test_add_data_func (\"/multipart/sync\", GINT_TO_POINTER (SYNC_MULTIPART), test_multipart);', '555: \\tg_test_add_data_func (\"/multipart/async\", GINT_TO_POINTER (ASYNC_MULTIPART), test_multipart);', '556: \\tg_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);', '557: \\tg_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);', '558: \\tg_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);', '559: ', '560: \\tret = g_test_run ();', '561: ', '562: \\tg_uri_unref (base_uri);', '563: \\tg_free (base_uri_string);', '564: \\tg_free (buffer);', '565: ', '566: \\tsoup_test_session_abort_unref (session);', '567: \\tsoup_test_server_quit_unref (server);', '568: ', '569: \\ttest_cleanup ();', '570: \\treturn ret;', '571: }']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 9045f1ae252a5bbda8b51335c81aca009c753838 Mon Sep 17 00:00:00 2001\nFrom: Milan Crha <mcrha@redhat.com>\nDate: Thu, 15 May 2025 17:49:11 +0200\nSubject: [PATCH] soup-multipart: Verify boundary limits for multipart body\n\nIt could happen that the boundary started at a place which resulted into\na negative number, which in an unsigned integer is a very large value.\nCheck the body size is not a negative value before setting it.\n\nCloses https://gitlab.gnome.org/GNOME/libsoup/-/issues/449\n\nPart-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/463>\n---\n libsoup/soup-multipart.c |  2 +-\n tests/multipart-test.c   | 40 ++++++++++++++++++++++++++++++++++++++++\n 2 files changed, 41 insertions(+), 1 deletion(-)\n\ndiff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\nindex 102ce37..a587fe7 100644\n--- a/libsoup/soup-multipart.c\n+++ b/libsoup/soup-multipart.c\n@@ -204,7 +204,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\n \t\t */\n \t\tpart_body = g_bytes_new_from_bytes (body, // FIXME\n \t\t\t\t\t\t    split - body_data,\n-\t\t\t\t\t\t    end - 2 - split);\n+\t\t\t\t\t\t    end - 2 >= split ? end - 2 - split : 0);\n \t\tg_ptr_array_add (multipart->bodies, part_body);\n \n \t\tstart = end;\ndiff --git a/tests/multipart-test.c b/tests/multipart-test.c\nindex ab5f41c..a3a0b36 100644\n--- a/tests/multipart-test.c\n+++ b/tests/multipart-test.c\n@@ -527,6 +527,45 @@ test_multipart_bounds_bad (void)\n \tg_bytes_unref (bytes);\n }\n \n+static void\n+test_multipart_too_large (void)\n+{\n+\tconst char *raw_body =\n+\t\t\"-------------------\\r\\n\"\n+\t\t\"-\\n\"\n+\t\t\"Cont\\\"\\r\\n\"\n+\t\t\"Content-Tynt----e:n\\x8erQK\\r\\n\"\n+\t\t\"Content-Disposition:   name=  form-; name=\\\"file\\\"; filename=\\\"ype:i/  -d; ----\\xae\\r\\n\"\n+\t\t\"Content-Typimag\\x01/png--\\\\\\n\"\n+\t\t\"\\r\\n\"\n+\t\t\"---:\\n\\r\\n\"\n+\t\t\"\\r\\n\"\n+\t\t\"-------------------------------------\\r\\n\"\n+\t\t\"---------\\r\\n\"\n+\t\t\"----------------------\";\n+\tGBytes *body;\n+\tGHashTable *params;\n+\tSoupMessageHeaders *headers;\n+\tSoupMultipart *multipart;\n+\n+\tparams = g_hash_table_new (g_str_hash, g_str_equal);\n+\tg_hash_table_insert (params, (gpointer) \"boundary\", (gpointer) \"-----------------\");\n+\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n+\tsoup_message_headers_set_content_type (headers, \"multipart/form-data\", params);\n+\tg_hash_table_unref (params);\n+\n+\tbody = g_bytes_new_static (raw_body, strlen (raw_body));\n+\tmultipart = soup_multipart_new_from_message (headers, body);\n+\tsoup_message_headers_unref (headers);\n+\tg_bytes_unref (body);\n+\n+\tg_assert_nonnull (multipart);\n+\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\n+\tg_assert_true (soup_multipart_get_part (multipart, 0, &headers, &body));\n+\tg_assert_cmpint (g_bytes_get_size (body), ==, 0);\n+\tsoup_multipart_free (multipart);\n+}\n+\n int\n main (int argc, char **argv)\n {\n@@ -556,6 +595,7 @@ main (int argc, char **argv)\n \tg_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\n \tg_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);\n \tg_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);\n+\tg_test_add_func (\"/multipart/too-large\", test_multipart_too_large);\n \n \tret = g_test_run ();\n \n-- \n2.45.4\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-4476": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A denial-of-service vulnerability has been identified in the libsoup HTTP client library. This flaw can be triggered when a libsoup client receives a 401 (Unauthorized) HTTP response containing a specifically crafted domain parameter within the WWW-Authenticate header. Processing this malformed header can lead to a crash of the client application using libsoup. An attacker could exploit this by setting up a malicious HTTP server. If a user's application using the vulnerable libsoup library connects to this malicious server, it could result in a denial-of-service. Successful exploitation requires tricking a user's client application into connecting to the attacker's malicious server.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From e64c221f9c7d09b48b610c5626b3b8c400f0907c Mon Sep 17 00:00:00 2001\\n    From: Michael Catanzaro <mcatanzaro@redhat.com>\\n    Date: Thu, 8 May 2025 09:27:01 -0500\\n    Subject: [PATCH] auth-digest: fix crash in\\n    soup_auth_digest_get_protection_space()\\n\\n    We need to validate the Domain parameter in the WWW-Authenticate header.\\n\\n    Unfortunately this crash only occurs when listening on default ports 80\\n    and 443, so there's no good way to test for this. The test would require\\n    running as root.\\n\\n    Fixes #440\\n    ---\\n    libsoup/auth/soup-auth-digest.c | 2 +-\\n    1 file changed, 1 insertion(+), 1 deletion(-)\\n\\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\\n    index d8bb2910..292f2045 100644\\n    --- a/libsoup/auth/soup-auth-digest.c\\n    +++ b/libsoup/auth/soup-auth-digest.c\\n    @@ -220,7 +220,7 @@ soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)\\n                if (uri &&\\n                                g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&\\n                    g_uri_get_port (uri) == g_uri_get_port (source_uri) &&\\n    -\\t\\t\\t    !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\\n    +\\t\\t\\t    !g_strcmp0 (g_uri_get_host (uri), g_uri_get_host (source_uri)))\\n                    dir = g_strdup (g_uri_get_path (uri));\\n                else\\n                    dir = NULL;\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/auth/soup-auth-digest.c': ['221: ', '222: \\tif (!priv->domain || !*priv->domain) {', '223: \\t\\t/* If no domain directive, the protection space is the', '224: \\t\\t * whole server.', '225: \\t\\t */', '226: \\t\\treturn g_slist_prepend (NULL, g_strdup (\"\"));', '227: \\t}', '228: ', '229: \\tdvec = g_strsplit (priv->domain, \" \", 0);', '230: \\tfor (dix = 0; dvec[dix] != NULL; dix++) {', '231: \\t\\td = dvec[dix];', \"232: \\t\\tif (*d == '/')\", '233: \\t\\t\\tdir = g_strdup (d);', '234: \\t\\telse {', '235: \\t\\t\\turi = g_uri_parse (d, SOUP_HTTP_URI_FLAGS, NULL);', '236: \\t\\t\\tif (uri &&', '237:                             g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&', '238: \\t\\t\\t    g_uri_get_port (uri) == g_uri_get_port (source_uri) &&', '239: \\t\\t\\t    !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))', '240: \\t\\t\\t\\tdir = g_strdup (g_uri_get_path (uri));', '241: \\t\\t\\telse', '242: \\t\\t\\t\\tdir = NULL;', '243: \\t\\t\\tif (uri)', '244: \\t\\t\\t\\tg_uri_unref (uri);']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From e64c221f9c7d09b48b610c5626b3b8c400f0907c Mon Sep 17 00:00:00 2001\nFrom: Michael Catanzaro <mcatanzaro@redhat.com>\nDate: Thu, 8 May 2025 09:27:01 -0500\nSubject: [PATCH] auth-digest: fix crash in\n soup_auth_digest_get_protection_space()\n\nWe need to validate the Domain parameter in the WWW-Authenticate header.\n\nUnfortunately this crash only occurs when listening on default ports 80\nand 443, so there's no good way to test for this. The test would require\nrunning as root.\n\nFixes #440\nUpstream Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/e64c221f9c7d09b48b610c5626b3b8c400f0907\n---\n libsoup/auth/soup-auth-digest.c | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\nindex d8bb2910..292f2045 100644\n--- a/libsoup/auth/soup-auth-digest.c\n+++ b/libsoup/auth/soup-auth-digest.c\n@@ -220,7 +220,7 @@ soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)\n \t\t\tif (uri &&\n                             g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&\n \t\t\t    g_uri_get_port (uri) == g_uri_get_port (source_uri) &&\n-\t\t\t    !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n+\t\t\t    !g_strcmp0 (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n \t\t\t\tdir = g_strdup (g_uri_get_path (uri));\n \t\t\telse\n \t\t\t\tdir = NULL;\n-- \nGitLab\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-2784": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. The implementation of HTTP range requests is vulnerable to a resource consumption attack. This flaw allows a malicious client to request the same range many times in a single HTTP request, causing the server to use large amounts of memory. This does not allow for a full denial of service.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From 242a10fbb12dbdc12d254bd8fc8669a0ac055304 Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Wed, 5 Feb 2025 14:39:42 -0600\\n    Subject: [PATCH] sniffer: Fix potential overflow\\n\\n    ---\\n    libsoup/content-sniffer/soup-content-sniffer.c |   2 +-\\n    tests/meson.build                              |   4 +++-\\n    tests/resources/whitespace.html                | Bin 0 -> 512 bytes\\n    tests/sniffing-test.c                          |   5 +++++\\n    tests/soup-tests.gresource.xml                 |   1 +\\n    5 files changed, 10 insertions(+), 2 deletions(-)\\n    create mode 100644 tests/resources/whitespace.html\\n\\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\\n    index aeee2e25c..da94e60c3 100644\\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\\n    @@ -669,7 +669,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\\n            pos = 3;\\n    \\n    look_for_tag:\\n    -\\tif (pos > resource_length)\\n    +\\tif (pos >= resource_length)\\n            goto text_html;\\n    \\n        if (skip_insignificant_space (resource, &pos, resource_length))\\n    diff --git a/tests/meson.build b/tests/meson.build\\n    index 5aee70bc1..ee118a015 100644\\n    --- a/tests/meson.build\\n    +++ b/tests/meson.build\\n    @@ -103,7 +103,9 @@ tests = [\\n    {'name': 'session'},\\n    {'name': 'server-auth'},\\n    {'name': 'server'},\\n    -  {'name': 'sniffing'},\\n    +  {'name': 'sniffing',\\n    +    'depends': [test_resources],\\n    +  },\\n    {'name': 'ssl',\\n        'dependencies': [gnutls_dep],\\n        'depends': mock_pkcs11_module,\\n    diff --git a/tests/resources/whitespace.html b/tests/resources/whitespace.html\\n    new file mode 100644\\n    index 0000000000000000000000000000000000000000..7f07a0e639a102284d6f7c0c5d5560170f994553\\n    GIT binary patch\\n    literal 512\\n    TcmcCf)YWAe1tT*Abam|ja4Z2(\\n\\n    literal 0\\n    HcmV?d00001\\n\\n    diff --git a/tests/sniffing-test.c b/tests/sniffing-test.c\\n    index 6116719ae..b5428177f 100644\\n    --- a/tests/sniffing-test.c\\n    +++ b/tests/sniffing-test.c\\n    @@ -512,6 +512,11 @@ main (int argc, char **argv)\\n                    \\\"type/text_html; charset=UTF-8/test.html => text/html; charset=UTF-8\\\",\\n                    do_sniffing_test);\\n    \\n    +        /* Test hitting skip_insignificant_space() with number of bytes equaling resource_length. */\\n    +\\tg_test_add_data_func (\\\"/sniffing/whitespace\\\",\\n    +\\t\\t\\t      \\\"type/text_html/whitespace.html => text/html\\\",\\n    +\\t\\t\\t      do_sniffing_test);\\n    +\\n        /* Test that disabling the sniffer works correctly */\\n        g_test_add_data_func (\\\"/sniffing/disabled\\\",\\n                    \\\"/text_or_binary/home.gif\\\",\\n    diff --git a/tests/soup-tests.gresource.xml b/tests/soup-tests.gresource.xml\\n    index 9c08d170e..cbef1d402 100644\\n    --- a/tests/soup-tests.gresource.xml\\n    +++ b/tests/soup-tests.gresource.xml\\n    @@ -25,5 +25,6 @@\\n        <file>resources/text.txt</file>\\n        <file>resources/text_binary.txt</file>\\n        <file>resources/tux.webp</file>\\n    +    <file>resources/whitespace.html</file>\\n    </gresource>\\n    </gresources>\\n    -- \\n    GitLab\\n\\n\\n    From c415ad0b6771992e66c70edf373566c6e247089d Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Tue, 18 Feb 2025 14:29:50 -0600\\n    Subject: [PATCH] sniffer: Add better coverage of skip_insignificant_space()\\n\\n    ---\\n    .../content-sniffer/soup-content-sniffer.c    |  10 ++--\\n    tests/resources/whitespace.html               | Bin 512 -> 0 bytes\\n    tests/sniffing-test.c                         |  53 ++++++++++++++++--\\n    tests/soup-tests.gresource.xml                |   1 -\\n    4 files changed, 53 insertions(+), 11 deletions(-)\\n    delete mode 100644 tests/resources/whitespace.html\\n\\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\\n    index da94e60c3..a5e18d5d5 100644\\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\\n    @@ -638,8 +638,11 @@ sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)\\n    }\\n    \\n    static gboolean\\n    -skip_insignificant_space (const char *resource, int *pos, int resource_length)\\n    +skip_insignificant_space (const char *resource, gsize *pos, gsize resource_length)\\n    {\\n    +        if (*pos >= resource_length)\\n    +\\t        return TRUE;\\n    +\\n        while ((resource[*pos] == '\\t') ||\\n            (resource[*pos] == ' ') ||\\n            (resource[*pos] == '\\n') ||\\n    @@ -659,7 +662,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\\n        gsize resource_length;\\n        const char *resource = g_bytes_get_data (buffer, &resource_length);\\n        resource_length = MIN (512, resource_length);\\n    -\\tint pos = 0;\\n    +\\tgsize pos = 0;\\n    \\n        if (resource_length < 3)\\n            goto text_html;\\n    @@ -669,9 +672,6 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\\n            pos = 3;\\n    \\n    look_for_tag:\\n    -\\tif (pos >= resource_length)\\n    -\\t\\tgoto text_html;\\n    -\\n        if (skip_insignificant_space (resource, &pos, resource_length))\\n            goto text_html;\\n    \\n    diff --git a/tests/resources/whitespace.html b/tests/resources/whitespace.html\\n    deleted file mode 100644\\n    index 7f07a0e639a102284d6f7c0c5d5560170f994553..0000000000000000000000000000000000000000\\n    GIT binary patch\\n    literal 0\\n    HcmV?d00001\\n\\n    literal 512\\n    TcmcCf)YWAe1tT*Abam|ja4Z2(\\n\\n    diff --git a/tests/sniffing-test.c b/tests/sniffing-test.c\\n    index b5428177f..7857732da 100644\\n    --- a/tests/sniffing-test.c\\n    +++ b/tests/sniffing-test.c\\n    @@ -342,6 +342,52 @@ test_disabled (gconstpointer data)\\n        g_uri_unref (uri);\\n    }\\n    \\n    +static const gsize MARKUP_LENGTH = strlen (\\\"<!--\\\") + strlen (\\\"-->\\\");\\n    +\\n    +static void\\n    +do_skip_whitespace_test (void)\\n    +{\\n    +        SoupContentSniffer *sniffer = soup_content_sniffer_new ();\\n    +        SoupMessage *msg = soup_message_new (SOUP_METHOD_GET, \\\"http://example.org\\\");\\n    +        const char *test_cases[] = {\\n    +                \\\"\\\",\\n    +                \\\"<rdf:RDF\\\",\\n    +                \\\"<rdf:RDFxmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\\",\\n    +                \\\"<rdf:RDFxmlns=\\\"http://purl.org/rss/1.0/\\\"\\\",\\n    +        };\\n    +\\n    +        soup_message_headers_set_content_type (soup_message_get_response_headers (msg), \\\"text/html\\\", NULL);\\n    +\\n    +        for (guint i = 0; i < G_N_ELEMENTS (test_cases); i++) {\\n    +                const char *trailing_data = test_cases[i];\\n    +                gsize leading_zeros = 512 - MARKUP_LENGTH - strlen (trailing_data);\\n    +                gsize testsize = MARKUP_LENGTH + leading_zeros + strlen (trailing_data);\\n    +                guint8 *data = g_malloc0 (testsize);\\n    +                guint8 *p = data;\\n    +                char *content_type;\\n    +                GBytes *buffer;\\n    +\\n    +                // Format of <!--[0x00 * $leading_zeros]-->$trailing_data\\n    +                memcpy (p, \\\"<!--\\\", strlen (\\\"<!--\\\"));\\n    +                p += strlen (\\\"<!--\\\");\\n    +                p += leading_zeros;\\n    +                memcpy (p, \\\"-->\\\", strlen (\\\"-->\\\"));\\n    +                p += strlen (\\\"-->\\\");\\n    +                if (strlen (trailing_data))\\n    +                        memcpy (p, trailing_data, strlen (trailing_data));\\n    +                // Purposefully not NUL terminated.                \\n    +\\n    +                buffer = g_bytes_new_take (g_steal_pointer (&data), testsize);\\n    +                content_type = soup_content_sniffer_sniff (sniffer, msg, buffer, NULL);\\n    +\\n    +                g_free (content_type);\\n    +                g_bytes_unref (buffer);\\n    +        }\\n    +\\n    +        g_object_unref (msg);\\n    +        g_object_unref (sniffer);\\n    +}\\n    +\\n    int\\n    main (int argc, char **argv)\\n    {\\n    @@ -512,16 +558,13 @@ main (int argc, char **argv)\\n                    \\\"type/text_html; charset=UTF-8/test.html => text/html; charset=UTF-8\\\",\\n                    do_sniffing_test);\\n    \\n    -        /* Test hitting skip_insignificant_space() with number of bytes equaling resource_length. */\\n    -\\tg_test_add_data_func (\\\"/sniffing/whitespace\\\",\\n    -\\t\\t\\t      \\\"type/text_html/whitespace.html => text/html\\\",\\n    -\\t\\t\\t      do_sniffing_test);\\n    -\\n        /* Test that disabling the sniffer works correctly */\\n        g_test_add_data_func (\\\"/sniffing/disabled\\\",\\n                    \\\"/text_or_binary/home.gif\\\",\\n                    test_disabled);\\n    \\n    +\\tg_test_add_func (\\\"/sniffing/whitespace\\\", do_skip_whitespace_test);\\n    +\\n        ret = g_test_run ();\\n    \\n        g_uri_unref (base_uri);\\n    diff --git a/tests/soup-tests.gresource.xml b/tests/soup-tests.gresource.xml\\n    index cbef1d402..9c08d170e 100644\\n    --- a/tests/soup-tests.gresource.xml\\n    +++ b/tests/soup-tests.gresource.xml\\n    @@ -25,6 +25,5 @@\\n        <file>resources/text.txt</file>\\n        <file>resources/text_binary.txt</file>\\n        <file>resources/tux.webp</file>\\n    -    <file>resources/whitespace.html</file>\\n    </gresource>\\n    </gresources>\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/content-sniffer/soup-content-sniffer.c': ['72: \\tsoup_content_sniffer_default_content_processor_interface =', '73: \\t\\tg_type_default_interface_peek (SOUP_TYPE_CONTENT_PROCESSOR);', '74: ', '75: \\tprocessor_interface->processing_stage = SOUP_STAGE_BODY_DATA;', '76: \\tprocessor_interface->wrap_input = soup_content_sniffer_content_processor_wrap_input;', '77: }', '78: ', '79: static void', '80: soup_content_sniffer_init (SoupContentSniffer *content_sniffer)', '81: {', '82: }', '83: ', '84: typedef struct {', '85: \\tconst guchar *mask;', '86: \\tconst guchar *pattern;', '93: \\t     GBytes *buffer,', '94: \\t     SoupContentSnifferMediaPattern table[],', '95: \\t     int table_length)', '96: {', '97: ', '98:         gsize resource_length;', '99:         const guchar *resource = g_bytes_get_data (buffer, &resource_length);', '100:         resource_length = MIN (512, resource_length);', '101: \\tint i;', '102: ', '103: \\tfor (i = 0; i < table_length; i++) {', '104: \\t\\tSoupContentSnifferMediaPattern *type_row = &(table[i]);', '108: \\t\\t\\tcontinue;', '109: ', '110: \\t\\tfor (j = 0; j < type_row->pattern_length; j++) {', '111: \\t\\t\\tif ((type_row->mask[j] & resource[j]) != type_row->pattern[j])', '112: \\t\\t\\t\\tbreak;', '113: \\t\\t}', '114: ', '115: \\t\\t/* This means our comparison above matched completely */', '116: \\t\\tif (j == type_row->pattern_length)', '117: \\t\\t\\treturn g_strdup (type_row->sniffed_type);', '118: \\t}', '119: ', '120: \\treturn NULL;', '121: }', '122: ', '123: /* This table is based on the MIMESNIFF spec;', '124:  * See 6.1 Matching an image type pattern', '125:  */', '233: {', '234:         if (strlen (prefix) > max_length)', '235:                 return FALSE;', '236: ', '237:         return memcmp (data, prefix, strlen (prefix)) == 0;', '238: }', '239: ', '240: static gboolean', '241: sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)', '242: {', '243: \\tgsize resource_length;', '244: \\tconst char *resource = g_bytes_get_data (buffer, &resource_length);', '245: \\tresource_length = MIN (512, resource_length);', '246: \\tguint32 box_size;', '247: \\tguint i;', '248: ', '249:         if (resource_length < sizeof (guint32))', '268: \\t\\treturn FALSE;', '269: ', '270: \\tfor (i = 16; i < box_size && i < resource_length; i = i + 4) {', '271: \\t\\tif (data_has_prefix (resource + i, \"mp4\", resource_length - i))', '272: \\t\\t\\treturn TRUE;', '273: \\t}', '274: ', '275: \\treturn FALSE;', '276: }', '277: ', '278: static char*', '279: sniff_audio_video (SoupContentSniffer *sniffer, GBytes *buffer)', '280: {', '508: static char*', '509: sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,', '510: \\t       gboolean sniff_scriptable)', '511: {', '512: \\tchar *sniffed_type = NULL;', '513: \\tgsize resource_length;', '514: \\tconst guchar *resource = g_bytes_get_data (buffer, &resource_length);', '515: \\tresource_length = MIN (512, resource_length);', '516: \\tguint i;', '517: ', '518:         if (resource_length == 0)', '519:                 return g_strdup (\"text/plain\");', '543: \\t\\t\\t\\t\\t\\tindex_pattern++;', '544: \\t\\t\\t\\t} else {', '545: \\t\\t\\t\\t\\tif ((type_row->mask[index_pattern] & resource[index_stream]) != type_row->pattern[index_pattern]) {', '546: \\t\\t\\t\\t\\t\\tskip_row = TRUE;', '547: \\t\\t\\t\\t\\t\\tbreak;', '548: \\t\\t\\t\\t\\t}', '549: \\t\\t\\t\\t\\tindex_pattern++;', '550: \\t\\t\\t\\t\\tindex_stream++;', '551: \\t\\t\\t\\t}', '552: \\t\\t\\t}', '553: ', '554: \\t\\t\\tif (skip_row)', '555: \\t\\t\\t\\tcontinue;', '556: ', '569: \\t\\t\\t\\tcontinue;', '570: ', '571: \\t\\t\\tfor (j = 0; j < type_row->pattern_length; j++) {', '572: \\t\\t\\t\\tif ((type_row->mask[j] & resource[j]) != type_row->pattern[j])', '573: \\t\\t\\t\\t\\tbreak;', '574: \\t\\t\\t}', '575: ', '576: \\t\\t\\t/* This means our comparison above matched completely */', '577: \\t\\t\\tif (j == type_row->pattern_length)', '578: \\t\\t\\t\\treturn g_strdup (type_row->sniffed_type);', '579: \\t\\t}', '580: \\t}', '581: ', '582: \\tsniffed_type = sniff_images (sniffer, buffer);', '583: ', '584: \\tif (sniffed_type != NULL)', '590: \\t\\treturn sniffed_type;', '591: ', '592: \\tfor (i = 0; i < resource_length; i++) {', '593: \\t\\tif (byte_looks_binary[resource[i]])', '594: \\t\\t\\treturn g_strdup (\"application/octet-stream\");', '595: \\t}', '596: ', '597: \\treturn g_strdup (\"text/plain\");', '598: }', '599: ', '600: /* MIMESNIFF: 7.2 Sniffing a mislabeled binary resource */', '601: static char*', '602: sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)', '603: {', '604: \\tgsize resource_length;', '605: \\tconst guchar *resource = g_bytes_get_data (buffer, &resource_length);', '606: \\tresource_length = MIN (512, resource_length);', '607: \\tgboolean looks_binary = FALSE;', '608: \\tint i;', '609: ', \"610: \\t/* 2. Detecting UTF-16BE, UTF-16LE BOMs means it's text/plain */\", '623: \\t/* 4. Look to see if any of the first n bytes looks binary */', '624: \\tfor (i = 0; i < resource_length; i++) {', '625: \\t\\tif (byte_looks_binary[resource[i]]) {', '626: \\t\\t\\tlooks_binary = TRUE;', '627: \\t\\t\\tbreak;', '628: \\t\\t}', '629: \\t}', '630: ', '631: \\tif (!looks_binary)', '632: \\t\\treturn g_strdup (\"text/plain\");', '633: ', '634: \\t/* 5. Execute 7.1 Identifying a resource with an unknown MIME type.', '635: \\t * TODO: sniff-scriptable needs to be unset.', '636: \\t */', '637: \\treturn sniff_unknown (sniffer, buffer, TRUE);', '638: }', '639: ', '640: static gboolean', '641: skip_insignificant_space (const char *resource, int *pos, int resource_length)', '642: {', \"643: \\twhile ((resource[*pos] == '\\\\x09') ||\", \"644: \\t       (resource[*pos] == '\\\\x20') ||\", \"645: \\t       (resource[*pos] == '\\\\x0A') ||\", \"646: \\t       (resource[*pos] == '\\\\x0D')) {\", '647: \\t\\t*pos = *pos + 1;', '648: ', '649: \\t\\tif (*pos > resource_length)', '650: \\t\\t\\treturn TRUE;', '651: \\t}', '652: ', '653: \\treturn FALSE;', '654: }', '655: ', '656: static char*', '657: sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)', '658: {', '659: \\tgsize resource_length;', '660: \\tconst char *resource = g_bytes_get_data (buffer, &resource_length);', '661: \\tresource_length = MIN (512, resource_length);', '662: \\tint pos = 0;', '663: ', '664: \\tif (resource_length < 3)', '665: \\t\\tgoto text_html;', '666: ', '667: \\t/* Skip a leading UTF-8 BOM */', '668: \\tif ((guchar)resource[0] == 0xEF && (guchar)resource[1] == 0xBB && (guchar)resource[2] == 0xBF)', '669: \\t\\tpos = 3;', '670: ', '671:  look_for_tag:', '672: \\tif (pos > resource_length)', '673: \\t\\tgoto text_html;', '674: ', '675: \\tif (skip_insignificant_space (resource, &pos, resource_length))', '676: \\t\\tgoto text_html;', '677: ', \"678: \\tif (resource[pos] != '<')\", '679: \\t\\treturn g_strdup (\"text/html\");', '680: ', '681: \\tpos++;', '682: ', '683: \\tif ((pos + 2) > resource_length)', '684: \\t\\tgoto text_html;', '685: ', '686: \\t/* Skip comments. */', '687: \\tif (data_has_prefix (resource + pos, \"!--\", resource_length - pos)) {', '688: \\t\\tpos = pos + 3;', '689: ', '690: \\t\\tif ((pos + 2) > resource_length)', '691: \\t\\t\\tgoto text_html;', '692: ', '693: \\t\\twhile (!data_has_prefix (resource + pos, \"-->\", resource_length - pos)) {', '694: \\t\\t\\tpos++;', '695: ', '696: \\t\\t\\tif ((pos + 2) > resource_length)', '697: \\t\\t\\t\\tgoto text_html;', '698: \\t\\t}', '699: ', '700: \\t\\tpos = pos + 3;', '701: ', '702: \\t\\tgoto look_for_tag;', '703: \\t}', '704: ', '705: \\tif (pos > resource_length)', '706: \\t\\tgoto text_html;', '707: ', '778: \\t\\t\\tif ((pos + 32) > resource_length)', '779: \\t\\t\\t\\tgoto text_html;', '780: ', '781: \\t\\t\\tif (data_has_prefix (resource + pos, \"xmlns=\\\\\"http://purl.org/rss/1.0/\\\\\"\", resource_length - pos))', '782: \\t\\t\\t\\treturn g_strdup (\"application/rss+xml\");', '783: \\t\\t}', '784: \\t}', '785: ', '786:  text_html:', '787: \\treturn g_strdup (\"text/html\");', '788: }', '789: ', '790: /**', '791:  * soup_content_sniffer_sniff:', '792:  * @sniffer: a #SoupContentSniffer', '864: \\t    !g_ascii_strcasecmp (content_type, \"application/ogg\")) {', '865: \\t        sniffed_type = sniff_audio_video (sniffer, buffer);', '866: \\t        if (sniffed_type != NULL)', '867: \\t\\t        return sniffed_type;', '868: \\t\\treturn g_strdup (content_type);', '869:         }', '870: ', '871: \\t/* If we got text/plain, use text_or_binary */', '872: \\tif (g_str_equal (content_type, \"text/plain\")) {', '873: \\t\\treturn sniff_text_or_binary (sniffer, buffer);', '874: \\t}', '875: ', '876: \\treturn g_strdup (content_type);', '877: }', '878: ', '879: static void', '880: soup_content_sniffer_request_queued (SoupSessionFeature *feature,', '881: \\t\\t\\t\\t     SoupMessage        *msg)', '886: static void', '887: soup_content_sniffer_request_unqueued (SoupSessionFeature *feature,', '888: \\t\\t\\t\\t       SoupMessage        *msg)', '889: {', '890: \\tsoup_message_set_content_sniffer (msg, NULL);', '891: }', '892: ', '893: static void', '894: soup_content_sniffer_class_init (SoupContentSnifferClass *content_sniffer_class)', '895: {', '896: }', '897: ', '898: static void', '899: soup_content_sniffer_session_feature_init (SoupSessionFeatureInterface *feature_interface,', '900: \\t\\t\\t\\t\\t   gpointer interface_data)'], 'tests/meson.build': [\"89:   {'name': 'no-ssl'},\", \"90:   {'name': 'ntlm'},\", \"91:   {'name': 'redirect'},\", \"92:   {'name': 'request-body'},\", \"93:   {'name': 'samesite'},\", \"94:   {'name': 'session'},\", \"95:   {'name': 'server-auth'},\", \"96:   {'name': 'server'},\", \"97:   {'name': 'sniffing'},\", \"98:   {'name': 'ssl',\", \"99:    'dependencies': [gnutls_dep],\", \"100:    'depends': mock_pkcs11_module,\", \"104:   {'name': 'timeout'},\", \"105:   {'name': 'tld'},\", \"106:   {'name': 'uri-parsing'},\", \"107:   {'name': 'websocket',\", \"108:    'dependencies': [libz_dep]},\", '109: ]', '110: ', '111: if brotlidec_dep.found()', \"112:   tests += [{'name': 'brotli-decompressor'}]\", '113: ', '114:   if installed_tests_enabled', '115:     install_data(', \"116:       'brotli-data/compressed.br',\", \"117:       'brotli-data/corrupt.br',\", \"118:       'brotli-data/uncompressed.txt',\", \"119:       install_dir : join_paths(installed_tests_execdir, 'brotli-data'),\", '120:     )', '121:   endif', '122: endif', '123: ', '124: if unix_socket_dep.found()', '125:   tests += [{', \"126:     'name': 'unix-socket',\", \"127:     'dependencies': [unix_socket_dep],\", '128:   }]', '129: endif'], 'tests/sniffing-test.c': ['34: \\tif (query) {', '35: \\t\\tquery_key = g_hash_table_lookup (query, \"chunked\");', '36: \\t\\tif (query_key && g_str_equal (query_key, \"yes\")) {', '37: \\t\\t\\tsoup_message_headers_set_encoding (response_headers,', '38: \\t\\t\\t\\t\\t\\t\\t   SOUP_ENCODING_CHUNKED);', '39: \\t\\t}', '40: ', '41: \\t\\tquery_key = g_hash_table_lookup (query, \"empty_response\");', '42: \\t\\tif (query_key && g_str_equal (query_key, \"yes\"))', '43: \\t\\t\\tempty_response = TRUE;', '44: \\t}', '45: ', '46: \\tif (!strcmp (path, \"/mbox\")) {', '47: \\t\\tif (!empty_response) {', '48: \\t\\t\\tresponse = soup_test_load_resource (\"mbox\", &error);', '49: \\t\\t\\tg_assert_no_error (error);', '50: \\t\\t}', '51: ', '52: \\t\\tsoup_message_headers_append (response_headers,', '53: \\t\\t\\t\\t\\t     \"Content-Type\", \"text/plain\");', '54: \\t}', '55: ', '56: \\tif (g_str_has_prefix (path, \"/nosniff/\")) {', '57: \\t\\tchar *base_name = g_path_get_basename (path);', '58: ', '83: \\t\\t\\tchar *base_name = g_path_get_basename (path);', '84: ', '85: \\t\\t\\tresponse = soup_test_load_resource (base_name, &error);', '86: \\t\\t\\tg_assert_no_error (error);', '87: \\t\\t\\tg_free (base_name);', '88: \\t\\t}', '89: ', '90: \\t\\tsoup_message_headers_append (response_headers,', '91: \\t\\t\\t\\t\\t     \"Content-Type\", \"UNKNOWN/unknown\");', '92: \\t}', '93: ', '94: \\tif (g_str_has_prefix (path, \"/type/\")) {', '95: \\t\\tchar **components = g_strsplit (path, \"/\", 4);', '96: ', '127:                 gsize response_size = g_bytes_get_size (response);', '128: \\t\\tfor (offset = 0; offset < response_size; offset += 500) {', '129:                         GBytes *chunk = g_bytes_new_from_bytes (response, offset, MIN (500, response_size - offset));', '130:                         soup_message_body_append_bytes (response_body, chunk);', '131:                         g_bytes_unref (chunk);', '132: \\t\\t}', '133: ', '134: \\t\\tg_bytes_unref (response);', '135: \\t}', '136: ', '137: \\tsoup_message_body_complete (response_body);', '138: }', '139: ', '140: static void', '141: content_sniffed (SoupMessage *msg,', '142: \\t\\t char        *content_type,', '177: \\t\\t      chunked_encoding ? \"\" : \"!\",', '178: \\t\\t      empty_response ? \"\" : \"!\");', '179: ', '180: \\tif (chunked_encoding) {', '181: \\t\\tGUri *copy = soup_uri_copy (uri, SOUP_URI_QUERY, \"chunked=yes\", SOUP_URI_NONE);', '182: \\t\\tg_uri_unref (uri);', '183: \\t\\turi = copy;', '184: ', '185: \\t}', '186: ', '187: \\tif (empty_response) {', '188: \\t\\tif (g_uri_get_query (uri)) {', '189: \\t\\t\\tchar *new_query = g_strdup_printf (\"%s&empty_response=yes\", g_uri_get_query (uri));', '190: \\t\\t\\tGUri *copy = soup_uri_copy (uri, SOUP_URI_QUERY, new_query, SOUP_URI_NONE);', '191:      \\t\\t\\tg_free (new_query);', '192: \\t\\t\\tg_uri_unref (uri);', '193: \\t\\t\\turi = copy;', '194: \\t\\t} else {', '195: \\t\\t\\tGUri *copy = soup_uri_copy (uri, SOUP_URI_QUERY, \"empty_response=yes\", SOUP_URI_NONE);', '196: \\t\\t\\tg_uri_unref (uri);', '197: \\t\\t\\turi = copy;', '198: \\t\\t}', '199: \\t}', '200: ', '201: \\tsoup_message_set_uri (msg, uri);', '202: ', '203: \\tg_object_connect (msg,', '224: ', '225: \\tif (body) {', '226:                 //g_message (\"|||body (%zu): %s\", g_bytes_get_size (body), (char*)g_bytes_get_data (body, NULL));', '227:                 //g_message (\"|||expected (%zu): %s\", g_bytes_get_size (expected), (char*)g_bytes_get_data (expected, NULL));', '228:                 g_assert_true (g_bytes_equal (body, expected));', '229:         }', '230: ', '231: \\tg_bytes_unref (expected);', '232: \\tg_bytes_unref (body);', '233: \\tg_uri_unref (uri);', '234: \\tg_object_unref (msg);', '235: }', '236: ', '237: static void', '238: do_signals_tests (gconstpointer data)', '239: {', '271: \\t\\tif (full_header->len)', '272: \\t\\t\\tg_string_append (full_header, \"; \");', '273: \\t\\tsoup_header_g_string_append_param (full_header,', '274: \\t\\t\\t\\t\\t\\t   (const char *) key,', '275: \\t\\t\\t\\t\\t\\t   (const char *) value);', '276: \\t}', '277: ', '278: \\t*sniffed_type = g_string_free (full_header, FALSE);', '279: }', '280: ', '281: static void', '282: test_sniffing (const char *path, const char *expected_type)', '283: {', '295: \\tbody = soup_test_session_async_send (session, msg, NULL, NULL);', '296: \\tg_assert_cmpstr (sniffed_type, ==, expected_type);', '297: \\tg_free (sniffed_type);', '298: \\tg_bytes_unref (body);', '299: \\tg_object_unref (msg);', '300: \\tg_uri_unref (uri);', '301: }', '302: ', '303: static void', '304: do_sniffing_test (gconstpointer data)', '305: {', '309: \\tparts = g_strsplit (path_and_result, \" => \", -1);', '310: \\tg_assert (parts && parts[0] && parts[1] && !parts[2]);', '311: ', '312: \\ttest_sniffing (parts[0], parts[1]);', '313: \\tg_strfreev (parts);', '314: }', '315: ', '316: static void', '317: test_disabled (gconstpointer data)', '318: {', '319: \\tconst char *path = data;', '320: \\tGUri *uri;', '321: \\tSoupMessage *msg;', '337: \\tbody = soup_test_session_async_send (session, msg, NULL, NULL);', '338: ', '339: \\tg_assert_null (sniffed_type);', '340: \\tg_bytes_unref (body);', '341: \\tg_object_unref (msg);', '342: \\tg_uri_unref (uri);', '343: }', '344: ', '345: int', '346: main (int argc, char **argv)', '347: {', '348: \\tSoupServer *server;', '349: \\tint ret;', '350: ', '351: \\ttest_init (argc, argv, NULL);', '352: ', '353: \\tserver = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);', '354: \\tsoup_server_add_handler (server, NULL, server_callback, NULL, NULL);', '355: \\tbase_uri = soup_test_server_get_uri (server, \"http\", NULL);', '356: ', '357: \\tsession = soup_test_session_new (NULL);', '358: \\tsoup_session_add_feature_by_type (session, SOUP_TYPE_CONTENT_SNIFFER);', '359: ', '360: \\tg_test_add_data_func (\"/sniffing/signals/no-sniffer\",', '361: \\t\\t\\t      GINT_TO_POINTER (FALSE),', '362: \\t\\t\\t      do_signals_tests);', '363: \\tg_test_add_data_func (\"/sniffing/signals/with-sniffer\",', '364: \\t\\t\\t      GINT_TO_POINTER (TRUE),', '365: \\t\\t\\t      do_signals_tests);', '366: ', '367: \\t/* Test the apache bug sniffing path */', '368: \\tg_test_add_data_func (\"/sniffing/apache-bug/binary\",', '369: \\t\\t\\t      \"/apache_bug/text_binary.txt => application/octet-stream\",', '370: \\t\\t\\t      do_sniffing_test);', '371: \\tg_test_add_data_func (\"/sniffing/apache-bug/text\",', '372: \\t\\t\\t      \"/apache_bug/text.txt => text/plain\",', '373: \\t\\t\\t      do_sniffing_test);', '374: ', '375: \\t/* X-Content-Type-Options: nosniff */', '376: \\tg_test_add_data_func (\"/sniffing/nosniff\",', '377: \\t\\t\\t      \"nosniff/home.gif => no/sniffing-allowed\",', '378: \\t\\t\\t      do_sniffing_test);', '379: ', \"380: \\t/* GIF is a 'safe' type */\", '381: \\tg_test_add_data_func (\"/sniffing/type/gif\",', '382: \\t\\t\\t      \"text_or_binary/home.gif => image/gif\",', '383: \\t\\t\\t      do_sniffing_test);', '384: ', '385: \\t/* With our current code, no sniffing is done using GIO, so', '386: \\t * the mbox will be identified as text/plain; should we change', '387: \\t * this?', '388: \\t */', '389: \\tg_test_add_data_func (\"/sniffing/type/mbox\",', '390: \\t\\t\\t      \"text_or_binary/mbox => text/plain\",', '391: \\t\\t\\t      do_sniffing_test);', '392: ', '393: \\t/* HTML is considered unsafe for this algorithm, since it is', '394: \\t * scriptable, so going from text/plain to text/html is', \"395: \\t * considered 'privilege escalation'\", '396: \\t */', '397: \\tg_test_add_data_func (\"/sniffing/type/html-in-text-context\",', '398: \\t\\t\\t      \"text_or_binary/test.html => text/plain\",', '399: \\t\\t\\t      do_sniffing_test);', '400: ', '401: \\t/* text/plain with binary content and unknown pattern should be', '402: \\t * application/octet-stream', '403: \\t */', '404: \\tg_test_add_data_func (\"/sniffing/type/text-binary\",', '405: \\t\\t\\t      \"text_or_binary/text_binary.txt => application/octet-stream\",', '406: \\t\\t\\t      do_sniffing_test);', '407: ', '408: \\t/* text/html with binary content and scriptable pattern should be', \"409: \\t * application/octet-stream to avoid 'privilege escalation'\", '410: \\t */', '415: \\t/* text/plain with binary content and non scriptable known pattern should', '416: \\t * be the given type', '417: \\t */', '418: \\tg_test_add_data_func (\"/sniffing/type/ps\",', '419: \\t\\t\\t      \"text_or_binary/ps_binary.ps => application/postscript\",', '420: \\t\\t\\t      do_sniffing_test);', '421: ', '422: \\t/* Test the unknown sniffing path */', '423: \\tg_test_add_data_func (\"/sniffing/type/unknown-html\",', '424: \\t\\t\\t      \"unknown/test.html => text/html\",', '425: \\t\\t\\t      do_sniffing_test);', '426: \\tg_test_add_data_func (\"/sniffing/type/unknown-gif\",', '427: \\t\\t\\t      \"unknown/home.gif => image/gif\",', '428: \\t\\t\\t      do_sniffing_test);', '429: \\tg_test_add_data_func (\"/sniffing/type/unknown-mbox\",', '430: \\t\\t\\t      \"unknown/mbox => text/plain\",', '431: \\t\\t\\t      do_sniffing_test);', '432: \\tg_test_add_data_func (\"/sniffing/type/unknown-empty\",', '433: \\t\\t\\t      \"unknown/mbox?empty_response=yes => text/plain\",', '434: \\t\\t\\t      do_sniffing_test);', '435: \\tg_test_add_data_func (\"/sniffing/type/unknown-binary\",', '436: \\t\\t\\t      \"unknown/text_binary.txt => application/octet-stream\",', '437: \\t\\t\\t      do_sniffing_test);', '438: \\t/* FIXME g_test_bug (\"715126\") */', '439: \\tg_test_add_data_func (\"/sniffing/type/unknown-leading-space\",', '440: \\t\\t\\t      \"unknown/leading_space.html => text/html\",', '441: \\t\\t\\t      do_sniffing_test);', '442: \\t/* https://bugs.webkit.org/show_bug.cgi?id=173923 */', '443: \\tg_test_add_data_func (\"/sniffing/type/unknown-xml\",', '444: \\t\\t\\t      \"unknown/misc.xml => text/xml\",', '445: \\t\\t\\t      do_sniffing_test);', '446: ', '447: \\t/* Test the XML sniffing path */', '448: \\tg_test_add_data_func (\"/sniffing/type/xml\",', '449: \\t\\t\\t      \"type/text_xml/home.gif => text/xml\",', '450: \\t\\t\\t      do_sniffing_test);', '451: \\tg_test_add_data_func (\"/sniffing/type/xml+xml\",', '452: \\t\\t\\t      \"type/anice_type+xml/home.gif => anice/type+xml\",', '453: \\t\\t\\t      do_sniffing_test);', '454: \\tg_test_add_data_func (\"/sniffing/type/application-xml\",', '455: \\t\\t\\t      \"type/application_xml/home.gif => application/xml\",', '456: \\t\\t\\t      do_sniffing_test);', '457: ', '458: \\t/* Test the feed or html path */', '459: \\tg_test_add_data_func (\"/sniffing/type/html/html\",', '460: \\t\\t\\t      \"type/text_html/test.html => text/html\",', '461: \\t\\t\\t      do_sniffing_test);', '462: \\tg_test_add_data_func (\"/sniffing/type/html/rss\",', '463: \\t\\t\\t      \"type/text_html/rss20.xml => application/rss+xml\",', '464: \\t\\t\\t      do_sniffing_test);', '465: \\tg_test_add_data_func (\"/sniffing/type/html/atom\",', '466: \\t\\t\\t      \"type/text_html/atom.xml => application/atom+xml\",', '467: \\t\\t\\t      do_sniffing_test);', '468: \\tg_test_add_data_func (\"/sniffing/type/html/rdf\",', '469: \\t\\t\\t      \"type/text_html/feed.rdf => application/rss+xml\",', '470: \\t\\t\\t      do_sniffing_test);', '471: ', '472: \\t/* Test the image sniffing path */', '473: \\tg_test_add_data_func (\"/sniffing/type/image/gif\",', '474: \\t\\t\\t      \"type/image_png/home.gif => image/gif\",', '475: \\t\\t\\t      do_sniffing_test);', '476: \\tg_test_add_data_func (\"/sniffing/type/image/png\",', '477: \\t\\t\\t      \"type/image_gif/home.png => image/png\",', '478: \\t\\t\\t      do_sniffing_test);', '479: \\tg_test_add_data_func (\"/sniffing/type/image/jpeg\",', '480: \\t\\t\\t      \"type/image_png/home.jpg => image/jpeg\",', '481: \\t\\t\\t      do_sniffing_test);', '482: \\tg_test_add_data_func (\"/sniffing/type/image/webp\",', '483: \\t\\t\\t      \"type/image_png/tux.webp => image/webp\",', '484: \\t\\t\\t      do_sniffing_test);', '485: ', '486: \\t/* Test audio and video sniffing path */', '487: \\tg_test_add_data_func (\"/sniffing/type/audio/wav\",', '488: \\t\\t\\t      \"type/audio_mpeg/test.wav => audio/wave\",', '489: \\t\\t\\t      do_sniffing_test);', '490: \\tg_test_add_data_func (\"/sniffing/type/audio/aiff\",', '491: \\t\\t\\t      \"type/audio_mpeg/test.aiff => audio/aiff\",', '492: \\t\\t\\t      do_sniffing_test);', '493: \\tg_test_add_data_func (\"/sniffing/type/audio/ogg\",', '494: \\t\\t\\t      \"type/audio_mpeg/test.ogg => application/ogg\",', '495: \\t\\t\\t      do_sniffing_test);', '496: \\tg_test_add_data_func (\"/sniffing/type/video/webm\",', '497: \\t\\t\\t      \"type/video_theora/test.webm => video/webm\",', '498: \\t\\t\\t      do_sniffing_test);', '499: ', '500: \\t/* Test the MP4 sniffing path */', '501: \\tg_test_add_data_func (\"/sniffing/type/video/mp4\",', '502: \\t\\t\\t      \"unknown/test.mp4 => video/mp4\",', '503: \\t\\t\\t      do_sniffing_test);', '504: ', '505: \\t/* The spec tells us to only use the last Content-Type header */', '506: \\tg_test_add_data_func (\"/sniffing/multiple-headers\",', '507: \\t\\t\\t      \"multiple_headers/home.gif => image/gif\",', '508: \\t\\t\\t      do_sniffing_test);', '509: ', '510: \\t/* Test that we keep the parameters when sniffing */', '511: \\tg_test_add_data_func (\"/sniffing/parameters\",', '512: \\t\\t\\t      \"type/text_html; charset=UTF-8/test.html => text/html; charset=UTF-8\",', '513: \\t\\t\\t      do_sniffing_test);', '514: ', '515: \\t/* Test that disabling the sniffer works correctly */', '516: \\tg_test_add_data_func (\"/sniffing/disabled\",', '517: \\t\\t\\t      \"/text_or_binary/home.gif\",', '518: \\t\\t\\t      test_disabled);', '519: ', '520: \\tret = g_test_run ();', '521: ', '522: \\tg_uri_unref (base_uri);', '523: ', '524: \\tsoup_test_session_abort_unref (session);', '525: \\tsoup_test_server_quit_unref (server);', '526: ', '527: \\ttest_cleanup ();', '528: \\treturn ret;', '529: }'], 'tests/soup-tests.gresource.xml': ['20:     <file>resources/test.html</file>', '21:     <file>resources/test.mp4</file>', '22:     <file>resources/test.ogg</file>', '23:     <file>resources/test.wav</file>', '24:     <file>resources/test.webm</file>', '25:     <file>resources/text.txt</file>', '26:     <file>resources/text_binary.txt</file>', '27:     <file>resources/tux.webp</file>', '28:   </gresource>', '29: </gresources>']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 0cd5cb7d61ec22b60ce21f84f91a1d8da930eff6 Mon Sep 17 00:00:00 2001\nFrom: Kshitiz Godara <kgodara@microsoft.com>\nDate: Sun, 4 May 2025 12:46:20 +0000\nSubject: [PATCH 1/6] Combined two patches to address CVE-2025-2784\n\nUpstream references:\nhttps://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/435/diffs\nhttps://gitlab.gnome.org/GNOME/libsoup/-/commit/c415ad0b6771992e66c70edf373566c6e247089d\n---\n .../content-sniffer/soup-content-sniffer.c    | 10 ++--\n tests/meson.build                             |  4 +-\n tests/sniffing-test.c                         | 48 +++++++++++++++++++\n 3 files changed, 56 insertions(+), 6 deletions(-)\n\ndiff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\nindex 2351c3f..150d285 100644\n--- a/libsoup/content-sniffer/soup-content-sniffer.c\n+++ b/libsoup/content-sniffer/soup-content-sniffer.c\n@@ -638,8 +638,11 @@ sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)\n }\n \n static gboolean\n-skip_insignificant_space (const char *resource, int *pos, int resource_length)\n+skip_insignificant_space (const char *resource, gsize *pos, gsize resource_length)\n {\n+        if (*pos >= resource_length)\n+\t        return TRUE;\n+\n \twhile ((resource[*pos] == '\\x09') ||\n \t       (resource[*pos] == '\\x20') ||\n \t       (resource[*pos] == '\\x0A') ||\n@@ -659,7 +662,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n \tgsize resource_length;\n \tconst char *resource = g_bytes_get_data (buffer, &resource_length);\n \tresource_length = MIN (512, resource_length);\n-\tint pos = 0;\n+\tgsize pos = 0;\n \n \tif (resource_length < 3)\n \t\tgoto text_html;\n@@ -669,9 +672,6 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n \t\tpos = 3;\n \n  look_for_tag:\n-\tif (pos > resource_length)\n-\t\tgoto text_html;\n-\n \tif (skip_insignificant_space (resource, &pos, resource_length))\n \t\tgoto text_html;\n \ndiff --git a/tests/meson.build b/tests/meson.build\nindex 9bf88be..b4112ec 100644\n--- a/tests/meson.build\n+++ b/tests/meson.build\n@@ -94,7 +94,9 @@ tests = [\n   {'name': 'session'},\n   {'name': 'server-auth'},\n   {'name': 'server'},\n-  {'name': 'sniffing'},\n+  {'name': 'sniffing',\n+    'depends': [test_resources],\n+  },\n   {'name': 'ssl',\n    'dependencies': [gnutls_dep],\n    'depends': mock_pkcs11_module,\ndiff --git a/tests/sniffing-test.c b/tests/sniffing-test.c\nindex 6116719..7857732 100644\n--- a/tests/sniffing-test.c\n+++ b/tests/sniffing-test.c\n@@ -342,6 +342,52 @@ test_disabled (gconstpointer data)\n \tg_uri_unref (uri);\n }\n \n+static const gsize MARKUP_LENGTH = strlen (\"<!--\") + strlen (\"-->\");\n+\n+static void\n+do_skip_whitespace_test (void)\n+{\n+        SoupContentSniffer *sniffer = soup_content_sniffer_new ();\n+        SoupMessage *msg = soup_message_new (SOUP_METHOD_GET, \"http://example.org\");\n+        const char *test_cases[] = {\n+                \"\",\n+                \"<rdf:RDF\",\n+                \"<rdf:RDFxmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\",\n+                \"<rdf:RDFxmlns=\\\"http://purl.org/rss/1.0/\\\"\",\n+        };\n+\n+        soup_message_headers_set_content_type (soup_message_get_response_headers (msg), \"text/html\", NULL);\n+\n+        for (guint i = 0; i < G_N_ELEMENTS (test_cases); i++) {\n+                const char *trailing_data = test_cases[i];\n+                gsize leading_zeros = 512 - MARKUP_LENGTH - strlen (trailing_data);\n+                gsize testsize = MARKUP_LENGTH + leading_zeros + strlen (trailing_data);\n+                guint8 *data = g_malloc0 (testsize);\n+                guint8 *p = data;\n+                char *content_type;\n+                GBytes *buffer;\n+\n+                // Format of <!--[0x00 * $leading_zeros]-->$trailing_data\n+                memcpy (p, \"<!--\", strlen (\"<!--\"));\n+                p += strlen (\"<!--\");\n+                p += leading_zeros;\n+                memcpy (p, \"-->\", strlen (\"-->\"));\n+                p += strlen (\"-->\");\n+                if (strlen (trailing_data))\n+                        memcpy (p, trailing_data, strlen (trailing_data));\n+                // Purposefully not NUL terminated.                \n+\n+                buffer = g_bytes_new_take (g_steal_pointer (&data), testsize);\n+                content_type = soup_content_sniffer_sniff (sniffer, msg, buffer, NULL);\n+\n+                g_free (content_type);\n+                g_bytes_unref (buffer);\n+        }\n+\n+        g_object_unref (msg);\n+        g_object_unref (sniffer);\n+}\n+\n int\n main (int argc, char **argv)\n {\n@@ -517,6 +563,8 @@ main (int argc, char **argv)\n \t\t\t      \"/text_or_binary/home.gif\",\n \t\t\t      test_disabled);\n \n+\tg_test_add_func (\"/sniffing/whitespace\", do_skip_whitespace_test);\n+\n \tret = g_test_run ();\n \n \tg_uri_unref (base_uri);\n-- \n2.45.3\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32050": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. The libsoup append_param_quoted() function may contain an overflow bug resulting in a buffer under-read.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From 9bb0a55de55c6940ced811a64fbca82fe93a9323 Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Mon, 28 Oct 2024 12:29:48 -0500\\n    Subject: [PATCH] Fix using int instead of size_t for strcspn return\\n\\n    ---\\n    libsoup/soup-headers.c | 2 +-\\n    1 file changed, 1 insertion(+), 1 deletion(-)\\n\\n    diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\\n    index 613e1905..a5f7a7f6 100644\\n    --- a/libsoup/soup-headers.c\\n    +++ b/libsoup/soup-headers.c\\n    @@ -907,7 +907,7 @@ append_param_quoted (GString    *string,\\n                const char *name,\\n                const char *value)\\n    {\\n    -\\tint len;\\n    +\\tgsize len;\\n    \\n        g_string_append (string, name);\\n        g_string_append (string, \\\"=\\\"\\\");\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-headers.c': ['888: \\tg_hash_table_destroy (param_list);', '889: }', '890: ', '891: static void', '892: append_param_rfc5987 (GString    *string,', '893: \\t\\t      const char *name,', '894: \\t\\t      const char *value)', '895: {', '896: \\tchar *encoded;', '897: ', '898: \\tg_string_append (string, name);', '899: \\tg_string_append (string, \"*=UTF-8\\'\\'\");', '901: \\tg_string_append (string, encoded);', '902: \\tg_free (encoded);', '903: }', '904: ', '905: static void', '906: append_param_quoted (GString    *string,', '907: \\t\\t     const char *name,', '908: \\t\\t     const char *value)', '909: {', '910: \\tint len;', '911: ', '912: \\tg_string_append (string, name);', '913: \\tg_string_append (string, \"=\\\\\"\");', '914: \\twhile (*value) {', '915: \\t\\twhile (*value == \\'\\\\\\\\\\' || *value == \\'\"\\') {', \"916: \\t\\t\\tg_string_append_c (string, '\\\\\\\\');\", '917: \\t\\t\\tg_string_append_c (string, *value++);', '918: \\t\\t}', '919: \\t\\tlen = strcspn (value, \"\\\\\\\\\\\\\"\");', '920: \\t\\tg_string_append_len (string, value, len);', '921: \\t\\tvalue += len;', '922: \\t}', '923: \\tg_string_append_c (string, \\'\"\\');', '924: }', '925: ', '926: static void', '927: append_param_internal (GString    *string,', '928: \\t\\t       const char *name,', '929: \\t\\t       const char *value,', '930: \\t\\t       gboolean    allow_token)', '931: {', '932: \\tconst char *v;', '933: \\tgboolean use_token = allow_token;', '934: ', '935: \\tfor (v = value; *v; v++) {', '965:  * If @value is (non-ASCII) UTF-8, this will instead use RFC 5987', '966:  * encoding, just like [func@header_g_string_append_param].', '967:  **/', '968: void', '969: soup_header_g_string_append_param_quoted (GString    *string,', '970: \\t\\t\\t\\t\\t  const char *name,', '971: \\t\\t\\t\\t\\t  const char *value)', '972: {', '973: \\tg_return_if_fail (string != NULL);', '974: \\tg_return_if_fail (name != NULL);', '975: \\tg_return_if_fail (value != NULL);', '976: ', '994:  *', '995:  * If @value is %NULL, this will just append @name to @string.', '996:  **/', '997: void', '998: soup_header_g_string_append_param (GString    *string,', '999: \\t\\t\\t\\t   const char *name,', '1000: \\t\\t\\t\\t   const char *value)', '1001: {', '1002: \\tg_return_if_fail (string != NULL);', '1003: \\tg_return_if_fail (name != NULL);', '1004: ', '1005: \\tif (!value) {']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 2825634dd081a3af1800d6967ba0991f3def3347 Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Mon, 28 Oct 2024 12:29:48 -0500\nSubject: [PATCH 3/6] Fix using int instead of size_t for strcspn return\n\nUpstream reference:\nhttps://gitlab.gnome.org/GNOME/libsoup/-/commit/9bb0a55de55c6940ced811a64fbca82fe93a9323\n---\n libsoup/soup-headers.c | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\nindex 8382b8f..4468415 100644\n--- a/libsoup/soup-headers.c\n+++ b/libsoup/soup-headers.c\n@@ -907,7 +907,7 @@ append_param_quoted (GString    *string,\n \t\t     const char *name,\n \t\t     const char *value)\n {\n-\tint len;\n+\tgsize len;\n \n \tg_string_append (string, name);\n \tg_string_append (string, \"=\\\"\");\n-- \n2.45.3\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32051": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. The libsoup soup_uri_decode_data_uri() function may crash when processing malformed data URI. This flaw allows an attacker to cause a denial of service (DoS).\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From 79cfd65c9bd8024cd45dd725c284766329873709 Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Fri, 22 Nov 2024 13:39:51 -0600\\n    Subject: [PATCH] soup_uri_decode_data_uri(): Handle URIs with a path starting\\n    with //\\n\\n    ---\\n    libsoup/soup-uri-utils.c | 8 ++++++++\\n    tests/uri-parsing-test.c | 2 ++\\n    2 files changed, 10 insertions(+)\\n\\n    diff --git a/libsoup/soup-uri-utils.c b/libsoup/soup-uri-utils.c\\n    index 9dab5d65f..f61e76566 100644\\n    --- a/libsoup/soup-uri-utils.c\\n    +++ b/libsoup/soup-uri-utils.c\\n    @@ -286,6 +286,7 @@ soup_uri_decode_data_uri (const char *uri,\\n            gboolean base64 = FALSE;\\n            char *uri_string;\\n            GBytes *bytes;\\n    +        const char *path;\\n    \\n            g_return_val_if_fail (uri != NULL, NULL);\\n    \\n    @@ -301,6 +302,13 @@ soup_uri_decode_data_uri (const char *uri,\\n            if (content_type)\\n                    *content_type = NULL;\\n    \\n    +        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\\n    +        path = g_uri_get_path (soup_uri);\\n    +        if (path[0] == '/' && path[1] == '/') {\\n    +                g_uri_unref (soup_uri);\\n    +                return NULL;\\n    +        }\\n    +\\n            uri_string = g_uri_to_string (soup_uri);\\n            g_uri_unref (soup_uri);\\n            if (!uri_string)\\n    diff --git a/tests/uri-parsing-test.c b/tests/uri-parsing-test.c\\n    index 1f16273d1..418391eb7 100644\\n    --- a/tests/uri-parsing-test.c\\n    +++ b/tests/uri-parsing-test.c\\n    @@ -141,6 +141,8 @@ static struct {\\n            { \\\"data:text/plain;base64,aGVsbG8=\\\", \\\"hello\\\", \\\"text/plain\\\" },\\n            { \\\"data:text/plain;base64,invalid=\\\", \\\"\\\", \\\"text/plain\\\" },\\n            { \\\"data:,\\\", \\\"\\\", CONTENT_TYPE_DEFAULT },\\n    +        { \\\"data:.///\\\", NULL, NULL },\\n    +        { \\\"data:/.//\\\", NULL, NULL },\\n    };\\n    \\n    static void\\n    -- \\n    GitLab\\n\\n    \\n    From 0713ba4a719da938dc8facc89fca99cd0aa3069f Mon Sep 17 00:00:00 2001\\n    From: Ar Jun <pkillarjun@protonmail.com>\\n    Date: Sat, 16 Nov 2024 11:50:09 -0600\\n    Subject: [PATCH] Fix possible NULL deref in soup_uri_decode_data_uri\\n\\n    ---\\n    libsoup/soup-uri-utils.c | 2 ++\\n    1 file changed, 2 insertions(+)\\n\\n    diff --git a/libsoup/soup-uri-utils.c b/libsoup/soup-uri-utils.c\\n    index 4e76b74d..9dab5d65 100644\\n    --- a/libsoup/soup-uri-utils.c\\n    +++ b/libsoup/soup-uri-utils.c\\n    @@ -303,6 +303,8 @@ soup_uri_decode_data_uri (const char *uri,\\n    \\n            uri_string = g_uri_to_string (soup_uri);\\n            g_uri_unref (soup_uri);\\n    +        if (!uri_string)\\n    +                return NULL;\\n    \\n            start = uri_string + 5;\\n            comma = strchr (start, ',');\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-uri-utils.c': ['276:  *', '277:  * Returns: (transfer full): a #GBytes with the contents of @uri,', '278:  *    or %NULL if @uri is not a valid data URI', '279:  */', '280: GBytes *', '281: soup_uri_decode_data_uri (const char *uri,', '282:                           char      **content_type)', '283: {', '284:         GUri *soup_uri;', '285:         const char *comma, *start, *end;', '286:         gboolean base64 = FALSE;', '287:         char *uri_string;', '288:         GBytes *bytes;', '289: ', '290:         g_return_val_if_fail (uri != NULL, NULL);', '291: ', '292:         soup_uri = g_uri_parse (uri, SOUP_HTTP_URI_FLAGS, NULL);', '293:         if (!soup_uri)', '294:                 return NULL;', '295: ', '296:         if (g_strcmp0 (g_uri_get_scheme (soup_uri), \"data\") || g_uri_get_host (soup_uri) != NULL) {', '297:                 g_uri_unref (soup_uri);', '298:                 return NULL;', '299:         }', '300: ', '301:         if (content_type)', '302:                 *content_type = NULL;', '303: ', '304:         uri_string = g_uri_to_string (soup_uri);', '305:         g_uri_unref (soup_uri);', '306: ', '307:         start = uri_string + 5;', \"308:         comma = strchr (start, ',');\", '309:         if (comma && comma != start) {', '310:                 /* Deal with MIME type / params */', '311:                 if (comma >= start + BASE64_INDICATOR_LEN && !g_ascii_strncasecmp (comma - BASE64_INDICATOR_LEN, BASE64_INDICATOR, BASE64_INDICATOR_LEN)) {', '312:                         end = comma - BASE64_INDICATOR_LEN;', '313:                         base64 = TRUE;', '314:                 } else', '315:                         end = comma;', '316: ', '317:                 if (end != start && content_type)', '318:                         *content_type = g_uri_unescape_segment (start, end, NULL);', '319:         }', '320: ', '321:         if (content_type && !*content_type)', '322:                 *content_type = g_strdup (\"text/plain;charset=US-ASCII\");', '323: ', '324:         if (comma)', '325:                 start = comma + 1;', '326: ', '327:         if (*start) {', '328:                 bytes = g_uri_unescape_bytes (start, -1, NULL, NULL);', '329: ', '330:                 if (base64 && bytes) {', '331:                         if (g_bytes_get_size (bytes) <= 1)'], 'tests/uri-parsing-test.c': ['136:         { \"invalid:\", NULL, NULL },', '137:         { \"data:\", \"\", CONTENT_TYPE_DEFAULT },', '138:         { \"data:hello\", \"hello\", CONTENT_TYPE_DEFAULT },', '139:         { \"data:text/plain,hello\", \"hello\", \"text/plain\" },', '140:         { \"data:text/plain;charset=UTF-8,hello\", \"hello\", \"text/plain;charset=UTF-8\" },', '141:         { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },', '142:         { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },', '143:         { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },', '144: };', '145: ', '146: static void', '147: do_data_uri_tests (void)', '148: {', '149: \\tint i;', '150: ', '151: \\tfor (i = 0; i < G_N_ELEMENTS (data_uri_tests); i++) {', '152:                 char *content_type = NULL;', '153:                 GBytes *output = soup_uri_decode_data_uri (data_uri_tests[i].input, &content_type);', '154: ', '155:                 if (data_uri_tests[i].output == NULL) {', '156:                         g_assert_null (output);', '157:                         g_assert_null (content_type);', '158:                         continue;', '159:                 }', '160: ', '161:                 g_assert_nonnull (output);', '162:                 g_assert_cmpstr (content_type, ==, data_uri_tests[i].content_type);', '163: ', '164: \\t\\tg_free (content_type);', '165: \\t\\tg_bytes_unref (output);']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 206e54eb90bdc53faed29e04d26373433b6605f6 Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Fri, 22 Nov 2024 13:39:51 -0600\nSubject: [PATCH 4/6] soup_uri_decode_data_uri(): Handle URIs with a path\n starting with //\n\nUpstream reference:\nhttps://gitlab.gnome.org/GNOME/libsoup/-/commit/79cfd65c9bd8024cd45dd725c284766329873709\nhttps://gitlab.gnome.org/GNOME/libsoup/-/commit/0713ba4a719da938dc8facc89fca99cd0aa3069f\n---\n libsoup/soup-uri-utils.c | 11 +++++++++++\n 1 file changed, 11 insertions(+)\n\ndiff --git a/libsoup/soup-uri-utils.c b/libsoup/soup-uri-utils.c\nindex be2b79b..ad70fe6 100644\n--- a/libsoup/soup-uri-utils.c\n+++ b/libsoup/soup-uri-utils.c\n@@ -286,6 +286,7 @@ soup_uri_decode_data_uri (const char *uri,\n         gboolean base64 = FALSE;\n         char *uri_string;\n         GBytes *bytes;\n+        const char *path;\n \n         g_return_val_if_fail (uri != NULL, NULL);\n \n@@ -300,9 +301,19 @@ soup_uri_decode_data_uri (const char *uri,\n \n         if (content_type)\n                 *content_type = NULL;\n+        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n+        path = g_uri_get_path (soup_uri);\n+        if (path[0] == '/' && path[1] == '/') {\n+                g_uri_unref (soup_uri);\n+                return NULL;\n+        }\n+\n \n         uri_string = g_uri_to_string (soup_uri);\n         g_uri_unref (soup_uri);\n+        if (!uri_string)\n+                return NULL;\n+\n \n         start = uri_string + 5;\n         comma = strchr (start, ',');\n-- \n2.45.3\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32052": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. A vulnerability in the sniff_unknown() function may lead to heap buffer over-read.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From f182429e5b1fc034050510da20c93256c4fa9652 Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Sat, 16 Nov 2024 12:07:30 -0600\\n    Subject: [PATCH] Fix heap buffer overflow in soup_content_sniffer_sniff\\n\\n    Co-Author: Ar Jun <pkillarjun@protonmail.com>\\n    ---\\n    libsoup/content-sniffer/soup-content-sniffer.c | 2 +-\\n    1 file changed, 1 insertion(+), 1 deletion(-)\\n\\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\\n    index de0985eac..b62e48889 100644\\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\\n    @@ -524,7 +524,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,\\n                guint index_pattern = 0;\\n                gboolean skip_row = FALSE;\\n    \\n    -\\t\\t\\twhile ((index_stream < resource_length) &&\\n    +\\t\\t\\twhile ((index_stream < resource_length - 1) &&\\n                    (index_pattern <= type_row->pattern_length)) {\\n                    /* Skip insignificant white space (\\\"WS\\\" in the spec) */\\n                    if (type_row->pattern[index_pattern] == ' ') {\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/content-sniffer/soup-content-sniffer.c': ['524: \\t\\tif (!sniff_scriptable && type_row->scriptable)', '525: \\t\\t\\tcontinue;', '526: ', '527: \\t\\tif (type_row->has_ws) {', '528: \\t\\t\\tguint index_stream = 0;', '529: \\t\\t\\tguint index_pattern = 0;', '530: \\t\\t\\tgboolean skip_row = FALSE;', '531: ', '532: \\t\\t\\twhile ((index_stream < resource_length) &&', '533: \\t\\t\\t       (index_pattern <= type_row->pattern_length)) {', '534: \\t\\t\\t\\t/* Skip insignificant white space (\"WS\" in the spec) */', \"535: \\t\\t\\t\\tif (type_row->pattern[index_pattern] == ' ') {\", \"536: \\t\\t\\t\\t\\tif (resource[index_stream] == '\\\\x09' ||\", \"537: \\t\\t\\t\\t\\t    resource[index_stream] == '\\\\x0a' ||\", \"538: \\t\\t\\t\\t\\t    resource[index_stream] == '\\\\x0c' ||\", \"539: \\t\\t\\t\\t\\t    resource[index_stream] == '\\\\x0d' ||\", \"540: \\t\\t\\t\\t\\t    resource[index_stream] == '\\\\x20')\", '541: \\t\\t\\t\\t\\t\\tindex_stream++;', '542: \\t\\t\\t\\t\\telse', '543: \\t\\t\\t\\t\\t\\tindex_pattern++;', '544: \\t\\t\\t\\t} else {', '545: \\t\\t\\t\\t\\tif ((type_row->mask[index_pattern] & resource[index_stream]) != type_row->pattern[index_pattern]) {', '546: \\t\\t\\t\\t\\t\\tskip_row = TRUE;', '547: \\t\\t\\t\\t\\t\\tbreak;', '548: \\t\\t\\t\\t\\t}']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 81ae25238849867f6197e22ec42f5bb4dcb7b8ad Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Sat, 16 Nov 2024 12:07:30 -0600\nSubject: [PATCH 2/6] Fix heap buffer overflow in soup_content_sniffer_sniff\n\nCo-Author: Ar Jun <pkillarjun@protonmail.com>\n\nUpstream reference:\nhttps://gitlab.gnome.org/GNOME/libsoup/-/commit/f182429e5b1fc034050510da20c93256c4fa9652\n---\n libsoup/content-sniffer/soup-content-sniffer.c | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\nindex 150d285..a772c7c 100644\n--- a/libsoup/content-sniffer/soup-content-sniffer.c\n+++ b/libsoup/content-sniffer/soup-content-sniffer.c\n@@ -529,7 +529,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,\n \t\t\tguint index_pattern = 0;\n \t\t\tgboolean skip_row = FALSE;\n \n-\t\t\twhile ((index_stream < resource_length) &&\n+\t\t\twhile ((index_stream < resource_length - 1) &&\n \t\t\t       (index_pattern <= type_row->pattern_length)) {\n \t\t\t\t/* Skip insignificant white space (\"WS\" in the spec) */\n \t\t\t\tif (type_row->pattern[index_pattern] == ' ') {\n-- \n2.45.3\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-46420": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. It is vulnerable to memory leaks in the soup_header_parse_quality_list() function when parsing a quality list that contains elements with all zeroes.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From c9083869ec2a3037e6df4bd86b45c419ba295f8e Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Thu, 26 Dec 2024 18:31:42 -0600\\n    Subject: [PATCH] soup_header_parse_quality_list: Fix leak\\n\\n    When iterating over the parsed list we now steal the allocated strings that we want and then free_full the list which may contain remaining strings.\\n    ---\\n    libsoup/soup-headers.c | 11 +++++------\\n    1 file changed, 5 insertions(+), 6 deletions(-)\\n\\n    diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\\n    index a5f7a7f6..85385cea 100644\\n    --- a/libsoup/soup-headers.c\\n    +++ b/libsoup/soup-headers.c\\n    @@ -530,7 +530,7 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\\n        GSList *unsorted;\\n        QualityItem *array;\\n        GSList *sorted, *iter;\\n    -\\tchar *item, *semi;\\n    +\\tchar *semi;\\n        const char *param, *equal, *value;\\n        double qval;\\n        int n;\\n    @@ -543,9 +543,8 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\\n        unsorted = soup_header_parse_list (header);\\n        array = g_new0 (QualityItem, g_slist_length (unsorted));\\n        for (iter = unsorted, n = 0; iter; iter = iter->next) {\\n    -\\t\\titem = iter->data;\\n            qval = 1.0;\\n    -\\t\\tfor (semi = strchr (item, ';'); semi; semi = strchr (semi + 1, ';')) {\\n    +\\t\\tfor (semi = strchr (iter->data, ';'); semi; semi = strchr (semi + 1, ';')) {\\n                param = skip_lws (semi + 1);\\n                if (*param != 'q')\\n                    continue;\\n    @@ -577,15 +576,15 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\\n            if (qval == 0.0) {\\n                if (unacceptable) {\\n                    *unacceptable = g_slist_prepend (*unacceptable,\\n    -\\t\\t\\t\\t\\t\\t\\t\\t item);\\n    +\\t\\t\\t\\t\\t\\t\\t\\t g_steal_pointer (&iter->data));\\n                }\\n            } else {\\n    -\\t\\t\\tarray[n].item = item;\\n    +\\t\\t\\tarray[n].item = g_steal_pointer (&iter->data);\\n                array[n].qval = qval;\\n                n++;\\n            }\\n        }\\n    -\\tg_slist_free (unsorted);\\n    +\\tg_slist_free_full (unsorted, g_free);\\n    \\n        qsort (array, n, sizeof (QualityItem), sort_by_qval);\\n        sorted = NULL;\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-headers.c': ['523:  *', '524:  * Returns: (transfer full) (element-type utf8): a #GSList of', '525:  *   acceptable values (as allocated strings), highest-qvalue first.', '526:  **/', '527: GSList *', '528: soup_header_parse_quality_list (const char *header, GSList **unacceptable)', '529: {', '530: \\tGSList *unsorted;', '531: \\tQualityItem *array;', '532: \\tGSList *sorted, *iter;', '533: \\tchar *item, *semi;', '534: \\tconst char *param, *equal, *value;', '535: \\tdouble qval;', '536: \\tint n;', '537: ', '538: \\tg_return_val_if_fail (header != NULL, NULL);', '539: ', '540: \\tif (unacceptable)', '541: \\t\\t*unacceptable = NULL;', '542: ', '543: \\tunsorted = soup_header_parse_list (header);', '544: \\tarray = g_new0 (QualityItem, g_slist_length (unsorted));', '545: \\tfor (iter = unsorted, n = 0; iter; iter = iter->next) {', '546: \\t\\titem = iter->data;', '547: \\t\\tqval = 1.0;', \"548: \\t\\tfor (semi = strchr (item, ';'); semi; semi = strchr (semi + 1, ';')) {\", '549: \\t\\t\\tparam = skip_lws (semi + 1);', \"550: \\t\\t\\tif (*param != 'q')\", '551: \\t\\t\\t\\tcontinue;', '552: \\t\\t\\tequal = skip_lws (param + 1);', \"553: \\t\\t\\tif (!equal || *equal != '=')\", '554: \\t\\t\\t\\tcontinue;', '555: \\t\\t\\tvalue = skip_lws (equal + 1);', '556: \\t\\t\\tif (!value)', '557: \\t\\t\\t\\tcontinue;', '558: ', \"559: \\t\\t\\tif (value[0] != '0' && value[0] != '1')\", '560: \\t\\t\\t\\tcontinue;', \"561: \\t\\t\\tqval = (double)(value[0] - '0');\", \"562: \\t\\t\\tif (value[0] == '0' && value[1] == '.') {\", '563: \\t\\t\\t\\tif (g_ascii_isdigit (value[2])) {', \"564: \\t\\t\\t\\t\\tqval += (double)(value[2] - '0') / 10;\", '565: \\t\\t\\t\\t\\tif (g_ascii_isdigit (value[3])) {', \"566: \\t\\t\\t\\t\\t\\tqval += (double)(value[3] - '0') / 100;\", '567: \\t\\t\\t\\t\\t\\tif (g_ascii_isdigit (value[4]))', \"568: \\t\\t\\t\\t\\t\\t\\tqval += (double)(value[4] - '0') / 1000;\", '569: \\t\\t\\t\\t\\t}', '570: \\t\\t\\t\\t}', '572: ', \"573: \\t\\t\\t*semi = '\\\\0';\", '574: \\t\\t\\tbreak;', '575: \\t\\t}', '576: ', '577: \\t\\tif (qval == 0.0) {', '578: \\t\\t\\tif (unacceptable) {', '579: \\t\\t\\t\\t*unacceptable = g_slist_prepend (*unacceptable,', '580: \\t\\t\\t\\t\\t\\t\\t\\t item);', '581: \\t\\t\\t}', '582: \\t\\t} else {', '583: \\t\\t\\tarray[n].item = item;', '584: \\t\\t\\tarray[n].qval = qval;', '585: \\t\\t\\tn++;', '586: \\t\\t}', '587: \\t}', '588: \\tg_slist_free (unsorted);', '589: ', '590: \\tqsort (array, n, sizeof (QualityItem), sort_by_qval);', '591: \\tsorted = NULL;', '592: \\twhile (n--)', '593: \\t\\tsorted = g_slist_prepend (sorted, array[n].item);', '594: \\tg_free (array);', '595: ', '596: \\treturn sorted;', '597: }', '598: ', '599: /**', '600:  * soup_header_free_list: (skip)', '601:  * @list: a #GSList returned from [func@header_parse_list] or', '602:  * [func@header_parse_quality_list]', '603:  *', '604:  * Frees @list.', '605:  **/', '606: void', '607: soup_header_free_list (GSList *list)', '608: {', '609: \\tg_slist_free_full (list, g_free);', '610: }', '611: ', '612: /**', '613:  * soup_header_contains:', '614:  * @header: An HTTP header suitable for parsing with', '615:  *   [func@header_parse_list]', '616:  * @token: a token']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 909a9c40197d53bb331830d959ec86b97721d64f Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Thu, 26 Dec 2024 18:31:42 -0600\nSubject: [PATCH 5/6] soup_header_parse_quality_list: Fix leak\n\nWhen iterating over the parsed list we now steal the allocated strings that we want and then free_full the list which may contain remaining strings.\n\nUpstream reference:\nhttps://gitlab.gnome.org/GNOME/libsoup/-/commit/c9083869ec2a3037e6df4bd86b45c419ba295f8e\n---\n libsoup/soup-headers.c | 11 +++++------\n 1 file changed, 5 insertions(+), 6 deletions(-)\n\ndiff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\nindex 4468415..d28ddff 100644\n--- a/libsoup/soup-headers.c\n+++ b/libsoup/soup-headers.c\n@@ -530,7 +530,7 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n \tGSList *unsorted;\n \tQualityItem *array;\n \tGSList *sorted, *iter;\n-\tchar *item, *semi;\n+\tchar *semi;\n \tconst char *param, *equal, *value;\n \tdouble qval;\n \tint n;\n@@ -543,9 +543,8 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n \tunsorted = soup_header_parse_list (header);\n \tarray = g_new0 (QualityItem, g_slist_length (unsorted));\n \tfor (iter = unsorted, n = 0; iter; iter = iter->next) {\n-\t\titem = iter->data;\n \t\tqval = 1.0;\n-\t\tfor (semi = strchr (item, ';'); semi; semi = strchr (semi + 1, ';')) {\n+\t\tfor (semi = strchr (iter->data, ';'); semi; semi = strchr (semi + 1, ';')) {\n \t\t\tparam = skip_lws (semi + 1);\n \t\t\tif (*param != 'q')\n \t\t\t\tcontinue;\n@@ -577,15 +576,15 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n \t\tif (qval == 0.0) {\n \t\t\tif (unacceptable) {\n \t\t\t\t*unacceptable = g_slist_prepend (*unacceptable,\n-\t\t\t\t\t\t\t\t item);\n+\t\t\t\t\t\t\t\t g_steal_pointer (&iter->data));\n \t\t\t}\n \t\t} else {\n-\t\t\tarray[n].item = item;\n+\t\t\tarray[n].item = g_steal_pointer (&iter->data);\n \t\t\tarray[n].qval = qval;\n \t\t\tn++;\n \t\t}\n \t}\n-\tg_slist_free (unsorted);\n+\tg_slist_free_full (unsorted, g_free);\n \n \tqsort (array, n, sizeof (QualityItem), sort_by_qval);\n \tsorted = NULL;\n-- \n2.45.3\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-46421": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. When libsoup clients encounter an HTTP redirect, they mistakenly send the HTTP Authorization header to the new host that the redirection points to. This allows the new host to impersonate the user to the original host that issued the redirect.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From 3e5c26415811f19e7737238bb23305ffaf96f66b Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Wed, 5 Feb 2025 16:18:10 -0600\\n    Subject: [PATCH] session: Strip authentication credentails on cross-origin\\n    redirect\\n\\n    This should match the behavior of Firefox and Safari but not of Chromium.\\n    ---\\n    libsoup/soup-session.c |  6 ++++\\n    tests/auth-test.c      | 77 ++++++++++++++++++++++++++++++++++++++++++\\n    2 files changed, 83 insertions(+)\\n\\n    diff --git a/libsoup/soup-session.c b/libsoup/soup-session.c\\n    index 38435fd1..cbe4c46f 100644\\n    --- a/libsoup/soup-session.c\\n    +++ b/libsoup/soup-session.c\\n    @@ -1230,6 +1230,12 @@ soup_session_redirect_message (SoupSession *session,\\n                            SOUP_ENCODING_NONE);\\n        }\\n    \\n    +        /* Strip all credentials on cross-origin redirect. */\\n    +        if (!soup_uri_host_equal (soup_message_get_uri (msg), new_uri)) {\\n    +                soup_message_headers_remove_common (soup_message_get_request_headers (msg), SOUP_HEADER_AUTHORIZATION);\\n    +                soup_message_set_auth (msg, NULL);\\n    +        }\\n    +\\n            soup_message_set_request_host_from_uri (msg, new_uri);\\n        soup_message_set_uri (msg, new_uri);\\n        g_uri_unref (new_uri);\\n    diff --git a/tests/auth-test.c b/tests/auth-test.c\\n    index 484097f1..7c3b5510 100644\\n    --- a/tests/auth-test.c\\n    +++ b/tests/auth-test.c\\n    @@ -1,6 +1,7 @@\\n    /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\\n    \\n    #include \\\"test-utils.h\\\"\\n    +#include \\\"soup-uri-utils-private.h\\\"\\n    \\n    static const char *base_uri;\\n    static GMainLoop *loop;\\n    @@ -1916,6 +1917,81 @@ do_missing_params_test (gconstpointer auth_header)\\n        soup_test_server_quit_unref (server);\\n    }\\n    \\n    +static void\\n    +redirect_server_callback (SoupServer        *server,\\n    +                          SoupServerMessage *msg,\\n    +                          const char        *path,\\n    +                          GHashTable        *query,\\n    +                          gpointer           user_data)\\n    +{\\n    +    static gboolean redirected = FALSE;\\n    +\\n    +    if (!redirected) {\\n    +        char *redirect_uri = g_uri_to_string (user_data);\\n    +        soup_server_message_set_redirect (msg, SOUP_STATUS_MOVED_PERMANENTLY, redirect_uri);\\n    +        g_free (redirect_uri);\\n    +        redirected = TRUE;\\n    +        return;\\n    +    }\\n    +\\n    +    g_assert_not_reached ();\\n    +}\\n    +\\n    +static gboolean\\n    +auth_for_redirect_callback (SoupMessage *msg, SoupAuth *auth, gboolean retrying, gpointer user_data)\\n    +{\\n    +    GUri *known_server_uri = user_data;\\n    +\\n    +    if (!soup_uri_host_equal (known_server_uri, soup_message_get_uri (msg)))\\n    +        return FALSE;\\n    +\\n    +    soup_auth_authenticate (auth, \\\"user\\\", \\\"good-basic\\\");\\n    +\\n    +    return TRUE;\\n    +}\\n    +\\n    +static void\\n    +do_strip_on_crossorigin_redirect (void)\\n    +{\\n    +    SoupSession *session;\\n    +    SoupMessage *msg;\\n    +    SoupServer *server1, *server2;\\n    +    SoupAuthDomain *auth_domain;\\n    +    GUri *uri;\\n    +    gint status;\\n    +\\n    +    server1 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\\n    +    server2 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\\n    +\\n    +    /* Both servers have the same credentials. */\\n    +    auth_domain = soup_auth_domain_basic_new (\\\"realm\\\", \\\"auth-test\\\", \\\"auth-callback\\\", server_basic_auth_callback, NULL);\\n    +    soup_auth_domain_add_path (auth_domain, \\\"/\\\");\\n    +    soup_server_add_auth_domain (server1, auth_domain);\\n    +    soup_server_add_auth_domain (server2, auth_domain);\\n    +    g_object_unref (auth_domain);\\n    +\\n    +    /* Server 1 asks for auth, then redirects to Server 2. */\\n    +    soup_server_add_handler (server1, NULL,\\n    +                    redirect_server_callback,\\n    +                   soup_test_server_get_uri (server2, \\\"http\\\", NULL), (GDestroyNotify)g_uri_unref);\\n    +    /* Server 2 requires auth. */\\n    +    soup_server_add_handler (server2, NULL, server_callback, NULL, NULL);\\n    +\\n    +    session = soup_test_session_new (NULL);\\n    +    uri = soup_test_server_get_uri (server1, \\\"http\\\", NULL);\\n    +    msg = soup_message_new_from_uri (\\\"GET\\\", uri);\\n    +    /* The client only sends credentials for the host it knows. */\\n    +    g_signal_connect (msg, \\\"authenticate\\\", G_CALLBACK (auth_for_redirect_callback), uri);\\n    +\\n    +    status = soup_test_session_send_message (session, msg);\\n    +\\n    +    g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\\n    +\\n    +    g_uri_unref (uri);\\n    +    soup_test_server_quit_unref (server1);\\n    +    soup_test_server_quit_unref (server2);\\n    +}\\n    +\\n    int\\n    main (int argc, char **argv)\\n    {\\n    @@ -1949,6 +2025,7 @@ main (int argc, char **argv)\\n        g_test_add_func (\\\"/auth/auth-uri\\\", do_auth_uri_test);\\n            g_test_add_func (\\\"/auth/cancel-request-on-authenticate\\\", do_cancel_request_on_authenticate);\\n            g_test_add_func (\\\"/auth/multiple-algorithms\\\", do_multiple_digest_algorithms);\\n    +        g_test_add_func (\\\"/auth/strip-on-crossorigin-redirect\\\", do_strip_on_crossorigin_redirect);\\n            g_test_add_data_func (\\\"/auth/missing-params/realm\\\", \\\"Digest qop=\\\"auth\\\"\\\", do_missing_params_test);\\n            g_test_add_data_func (\\\"/auth/missing-params/nonce\\\", \\\"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\\\", do_missing_params_test);\\n            g_test_add_data_func (\\\"/auth/missing-params/nonce-md5-sess\\\", \\\"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\\\", do_missing_params_test);\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-session.c': ['226:                 queue_source->num_items = 0;', '227:                 g_source_set_name (source, \"SoupMessageQueue\");', '228:                 g_source_set_can_recurse (source, TRUE);', '229:                 g_source_attach (source, context);', '230:                 g_hash_table_insert (priv->queue_sources, context, source);', '231:         }', '232: ', '233:         queue_source->num_items++;', '234: }', '235: ', '236: static void', '237: soup_session_add_queue_source_for_item (SoupSession          *session,', '238:                                         SoupMessageQueueItem *item)', '459: \\t\\tsoup_session_set_idle_timeout (session, g_value_get_uint (value));', '460: \\t\\tbreak;', '461: \\tdefault:', '462: \\t\\tG_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);', '463: \\t\\tbreak;', '464: \\t}', '465: }', '466: ', '467: static void', '468: soup_session_get_property (GObject *object, guint prop_id,', '469: \\t\\t\\t   GValue *value, GParamSpec *pspec)', '508: \\t\\tg_value_set_uint (value, soup_session_get_idle_timeout (session));', '509: \\t\\tbreak;', '510: \\tdefault:', '511: \\t\\tG_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);', '512: \\t\\tbreak;', '513: \\t}', '514: }', '515: ', '516: /**', '517:  * soup_session_new:', '518:  *', '900: \\t} else {', '901: \\t\\tif (g_strcmp0 (priv->user_agent, user_agent) == 0)', '902: \\t\\t\\treturn;', '903: \\t\\tg_free (priv->user_agent);', '904: \\t\\tpriv->user_agent = g_strdup (user_agent);', '905: \\t}', '906: ', '907: \\tg_object_notify_by_pspec (G_OBJECT (session), properties[PROP_USER_AGENT]);', '908: }', '909: ', '910: /**', '911:  * soup_session_get_user_agent: (attributes org.gtk.Method.get_property=user-agent)', '912:  * @session: a #SoupSession', '1145: \\t\\t\\t     SOUP_SESSION_ERROR,', '1146: \\t\\t\\t     SOUP_SESSION_ERROR_REDIRECT_BAD_URI,', '1147: \\t\\t\\t     _(\"Invalid URI “%s” in Location response header\"),', '1148: \\t\\t\\t     new_loc);', '1149: \\t\\treturn NULL;', '1150: \\t}', '1151: ', '1152: \\treturn new_uri;', '1153: }', '1154: ', '1155: static gboolean', '1156: soup_session_requeue_item (SoupSession          *session,', '1157: \\t\\t\\t   SoupMessageQueueItem *item,', '1174: \\t\\tretval = FALSE;', '1175: \\t} else {', '1176: \\t\\titem->resend_count++;', '1177: \\t\\titem->state = SOUP_MESSAGE_REQUEUED;', '1178: \\t\\tretval = TRUE;', '1179: \\t}', '1180: ', '1181: \\treturn retval;', '1182: }', '1183: ', '1184: /**', '1185:  * soup_session_redirect_message:', '1186:  * @session: the session', '1222: \\tif (SOUP_SESSION_WOULD_REDIRECT_AS_GET (session, msg)) {', '1223: \\t\\tif (soup_message_get_method (msg) != SOUP_METHOD_HEAD) {', '1224: \\t\\t\\tg_object_set (msg,', '1225: \\t\\t\\t\\t      \"method\", SOUP_METHOD_GET,', '1226: \\t\\t\\t\\t      NULL);', '1227: \\t\\t}', '1228: \\t\\tsoup_message_set_request_body (msg, NULL, NULL, 0);', '1229: \\t\\tsoup_message_headers_set_encoding (soup_message_get_request_headers (msg),', '1230: \\t\\t\\t\\t\\t\\t   SOUP_ENCODING_NONE);', '1231: \\t}', '1232: ', '1233:         soup_message_set_request_host_from_uri (msg, new_uri);', '1234: \\tsoup_message_set_uri (msg, new_uri);', '1235: \\tg_uri_unref (new_uri);', '1236: ', '1237: \\treturn soup_session_requeue_item (session,', '1238: \\t\\t\\t\\t\\t  soup_session_lookup_queue_item (session, msg),', '1239: \\t\\t\\t\\t\\t  error);', '1240: }', '1241: ', '1242: static void', '1243: redirect_handler (SoupMessage *msg,', '1244: \\t\\t  gpointer     user_data)', '1245: {', '1246: \\tSoupMessageQueueItem *item = user_data;', '1247: \\tSoupSession *session = item->session;', '1248: ', '1249: \\tif (!SOUP_SESSION_WOULD_REDIRECT_AS_GET (session, msg) &&', '1250: \\t    !SOUP_SESSION_WOULD_REDIRECT_AS_SAFE (session, msg))', '1251: \\t\\treturn;', '1252: ', '1253: \\tsoup_session_redirect_message (session, msg, &item->error);', '1254: }', '1255: ', '1256: static void', '1257: misdirected_handler (SoupMessage *msg,', '1258: \\t\\t     gpointer     user_data)', '1265:         if (!soup_message_is_misdirected_retry (msg)) {', '1266:                 soup_message_set_is_misdirected_retry (msg, TRUE);', '1267:                 soup_session_requeue_item (session,', '1268:                                            item,', '1269:                                            &item->error);', '1270:         }', '1271: }', '1272: ', '1273: static void', '1274: message_restarted (SoupMessage *msg, gpointer user_data)', '1275: {', '1279:         conn = soup_message_get_connection (item->msg);', '1280: \\tif (conn &&', '1281: \\t    (!soup_message_is_keepalive (msg) ||', '1282: \\t     SOUP_STATUS_IS_REDIRECTION (soup_message_get_status (msg)))) {', '1283:                 soup_message_set_connection (item->msg, NULL);', '1284: \\t}', '1285:         g_clear_object (&conn);', '1286: ', '1287: \\tsoup_message_cleanup_response (msg);', '1288: }', '1289: ', '1290: static int', '1291: compare_queue_item (SoupMessageQueueItem *a,', '1292: \\t\\t    SoupMessageQueueItem *b)', '1358: \\tfor (f = priv->features; f; f = g_slist_next (f)) {', '1359: \\t\\tSoupSessionFeature *feature = SOUP_SESSION_FEATURE (f->data);', '1360: ', '1361: \\t\\tg_object_ref (feature);', '1362: \\t\\tsoup_session_feature_request_queued (feature, msg);', '1363: \\t}', '1364: \\tg_signal_emit (session, signals[REQUEST_QUEUED], 0, msg);', '1365: ', '1366: \\treturn item;', '1367: }', '1368: ', '1369: static void', '1370: soup_session_send_queue_item (SoupSession *session,', '1371: \\t\\t\\t      SoupMessageQueueItem *item,', '1401: \\t */', '1402: \\tmethod = soup_message_get_method (item->msg);', '1403: \\tif ((method == SOUP_METHOD_POST || method == SOUP_METHOD_PUT) &&', '1404: \\t    soup_message_get_request_body_stream (item->msg) == NULL) {', '1405: \\t\\tsoup_message_headers_set_content_length (request_headers, 0);', '1406: \\t}', '1407: ', '1408: \\tsoup_message_starting (item->msg);', '1409: \\tif (item->state == SOUP_MESSAGE_RUNNING)', '1410:                 soup_message_send_item (item->msg, item, completion_cb, item);', '1411: }', '1412: ', '1413: static void', '1414: soup_session_unqueue_item (SoupSession          *session,', '1415: \\t\\t\\t   SoupMessageQueueItem *item)', '1443: \\tfor (f = priv->features; f; f = g_slist_next (f)) {', '1444: \\t\\tSoupSessionFeature *feature = SOUP_SESSION_FEATURE (f->data);', '1445: ', '1446: \\t\\tsoup_session_feature_request_unqueued (feature, item->msg);', '1447: \\t\\tg_object_unref (feature);', '1448: \\t}', '1449: \\tg_signal_emit (session, signals[REQUEST_UNQUEUED], 0, item->msg);', '1450: \\tsoup_message_queue_item_unref (item);', '1451: }', '1452: ', '1453: static void', '1454: message_completed (SoupMessage *msg, SoupMessageIOCompletion completion, gpointer user_data)', '1455: {', '1470:                 item->state = SOUP_MESSAGE_RESTARTING;', '1471: ', '1472: \\tif (item->state != SOUP_MESSAGE_RESTARTING) {', '1473: \\t\\titem->state = SOUP_MESSAGE_FINISHING;', '1474:                 soup_session_process_queue_item (item->session, item, !item->async);', '1475: \\t}', '1476: }', '1477: ', '1478: static void', '1479: tunnel_complete (SoupMessageQueueItem *tunnel_item,', '1480: \\t\\t guint status, GError *error)', '1497: \\t\\tsoup_connection_disconnect (conn);', '1498:                 g_object_unref (conn);', '1499:                 soup_message_set_connection (item->msg, NULL);', '1500: \\t\\tif (!error && soup_message_get_status (item->msg) == SOUP_STATUS_NONE)', '1501: \\t\\t\\tsoup_message_set_status (item->msg, status, NULL);', '1502: \\t}', '1503: ', '1504: \\tif (item->async)', '1505: \\t\\tsoup_session_kick_queue (session);', '1506: \\tsoup_message_queue_item_unref (item);', '1507: }', '1508: ', '1509: static void', '1510: tunnel_handshake_complete (SoupConnection       *conn,', '1511: \\t\\t\\t   GAsyncResult         *result,', '1543: \\t\\t\\ttunnel_item->state = SOUP_MESSAGE_RUNNING;', '1544: \\t\\t\\tsoup_session_send_queue_item (session, tunnel_item,', '1545: \\t\\t\\t\\t\\t\\t      (SoupMessageIOCompletionFn)tunnel_message_completed);', '1546: \\t\\t\\tsoup_message_io_run (msg, !tunnel_item->async);', '1547: \\t\\t\\treturn;', '1548: \\t\\t}', '1549: ', '1550: \\t\\titem->state = SOUP_MESSAGE_RESTARTING;', '1551: \\t}', '1552: ', '1553: \\ttunnel_item->state = SOUP_MESSAGE_FINISHED;', '1554: \\tsoup_session_unqueue_item (session, tunnel_item);', '1555: ', '1573: \\t\\tGError *error = NULL;', '1574: ', '1575: \\t\\tsoup_connection_tunnel_handshake (conn, item->cancellable, &error);', '1576:                 g_object_unref (conn);', '1577: \\t\\ttunnel_complete (tunnel_item, SOUP_STATUS_OK, error);', '1578: \\t}', '1579: }', '1580: ', '1581: static void', '1582: tunnel_connect (SoupMessageQueueItem *item)', '1583: {', '1620: \\titem->error = error;', '1621: \\tsoup_connection_disconnect (conn);', '1622: \\tif (item->state == SOUP_MESSAGE_CONNECTING) {', '1623:                 soup_message_set_connection (item->msg, NULL);', '1624: \\t\\titem->state = SOUP_MESSAGE_READY;', '1625: \\t}', '1626: }', '1627: ', '1628: static void', '1629: connect_async_complete (GObject      *object,', '1630: \\t\\t\\tGAsyncResult *result,', '1723: ', '1724: \\t\\tsoup_connection_connect (conn, item->cancellable, &error);', '1725: \\t\\tconnect_complete (item, conn, error);', '1726: ', '1727: \\t\\treturn TRUE;', '1728: \\t}', '1729: }', '1730: ', '1731: static void', '1732: soup_session_process_queue_item (SoupSession          *session,', '1733: \\t\\t\\t\\t SoupMessageQueueItem *item,', '1753: \\t\\t\\t\\ttunnel_connect (item);', '1754: \\t\\t\\telse', '1755: \\t\\t\\t\\titem->state = SOUP_MESSAGE_READY;', '1756:                         g_object_unref (conn);', '1757: \\t\\t\\tbreak;', '1758:                 }', '1759: \\t\\tcase SOUP_MESSAGE_READY:', '1760: \\t\\t\\tif (item->connect_only) {', '1761: \\t\\t\\t\\titem->state = SOUP_MESSAGE_FINISHING;', '1762: \\t\\t\\t\\tbreak;', '1763: \\t\\t\\t}', '1764: ', '1765: \\t\\t\\tif (item->error || soup_message_get_status (item->msg)) {', '1766: \\t\\t\\t\\titem->state = SOUP_MESSAGE_FINISHING;', '1767: \\t\\t\\t\\tbreak;', '1768: \\t\\t\\t}', '1769: ', '1770: \\t\\t\\titem->state = SOUP_MESSAGE_RUNNING;', '1771: ', '1772:                         soup_message_set_metrics_timestamp (item->msg, SOUP_MESSAGE_METRICS_REQUEST_START);', '1808: \\t\\t\\t/* Nothing to do with this message in any', '1809: \\t\\t\\t * other state.', '1810: \\t\\t\\t */', '1811: \\t\\t\\tg_warn_if_fail (item->async);', '1812: \\t\\t\\treturn;', '1813: \\t\\t}', '1814: \\t} while (loop && item->state != SOUP_MESSAGE_FINISHED);', '1815: }', '1816: ', '1817: static void', '1818: collect_queue_item (SoupMessageQueueItem *item,', '1819:                     GList               **items)', '1857:         if (g_atomic_int_dec_and_test (&priv->in_async_run_queue) && g_atomic_int_get (&priv->needs_queue_sort)) {', '1858:                 g_mutex_lock (&priv->queue_mutex);', '1859:                 g_queue_sort (priv->queue, (GCompareDataFunc)compare_queue_item, NULL);', '1860:                 g_mutex_unlock (&priv->queue_mutex);', '1861:                 g_atomic_int_set (&priv->needs_queue_sort, FALSE);', '1862:         }', '1863: }', '1864: ', '1865: /**', '1866:  * soup_session_requeue_message:', '1867:  * @session: a #SoupSession', '2000: {', '2001:         if (soup_session_has_feature (session, feature_type)) {', '2002:                 g_warning (\"SoupSession already has a %s, ignoring new feature\",', '2003:                            g_type_name (feature_type));', '2004:                 return TRUE;', '2005:         }', '2006: ', '2007:         return FALSE;', '2008: }', '2009: ', '2010: /**', '2011:  * soup_session_add_feature:', '2012:  * @session: a #SoupSession', '2075: \\t\\tGSList *f;', '2076: ', '2077: \\t\\tfor (f = priv->features; f; f = f->next) {', '2078: \\t\\t\\tif (soup_session_feature_add_feature (f->data, feature_type))', '2079: \\t\\t\\t\\treturn;', '2080: \\t\\t}', '2081: \\t\\tg_warning (\"No feature manager for feature of type \\'%s\\'\", g_type_name (feature_type));', '2082: \\t}', '2083: }', '2084: ', '2085: /**', '2086:  * soup_session_remove_feature:', '2087:  * @session: a #SoupSession', '2099: \\tpriv = soup_session_get_instance_private (session);', '2100: \\tif (g_slist_find (priv->features, feature)) {', '2101: \\t\\tpriv->features = g_slist_remove (priv->features, feature);', '2102: \\t\\tsoup_session_feature_detach (feature, session);', '2103: \\t\\tg_object_unref (feature);', '2104: \\t}', '2105: }', '2106: ', '2107: /**', '2108:  * soup_session_remove_feature_by_type:', '2109:  * @session: a #SoupSession', '2126: \\trestart:', '2127: \\t\\tfor (f = priv->features; f; f = f->next) {', '2128: \\t\\t\\tif (G_TYPE_CHECK_INSTANCE_TYPE (f->data, feature_type)) {', '2129: \\t\\t\\t\\tsoup_session_remove_feature (session, f->data);', '2130: \\t\\t\\t\\tgoto restart;', '2131: \\t\\t\\t}', '2132: \\t\\t}', '2133: \\t} else {', '2134: \\t\\tfor (f = priv->features; f; f = f->next) {', '2135: \\t\\t\\tif (soup_session_feature_remove_feature (f->data, feature_type))', '2136: \\t\\t\\t\\treturn;', '2137: \\t\\t}', '2138: \\t\\tg_warning (\"No feature manager for feature of type \\'%s\\'\", g_type_name (feature_type));', '2139: \\t}', '2140: }', '2141: ', '2142: /**', '2143:  * soup_session_has_feature:', '2144:  * @session: a #SoupSession', '2163: ', '2164: \\tif (g_type_is_a (feature_type, SOUP_TYPE_SESSION_FEATURE)) {', '2165: \\t\\tfor (f = priv->features; f; f = f->next) {', '2166: \\t\\t\\tif (G_TYPE_CHECK_INSTANCE_TYPE (f->data, feature_type))', '2167: \\t\\t\\t\\treturn TRUE;', '2168: \\t\\t}', '2169: \\t} else {', '2170: \\t\\tfor (f = priv->features; f; f = f->next) {', '2171: \\t\\t\\tif (soup_session_feature_has_feature (f->data, feature_type))', '2172: \\t\\t\\t\\treturn TRUE;', '2173: \\t\\t}', '2174: \\t}', '2175: ', '2176: \\treturn FALSE;', '2177: }', '2178: ', '2179: /**', '2180:  * soup_session_get_features:', '2181:  * @session: a #SoupSession', '2198: ', '2199: \\tpriv = soup_session_get_instance_private (session);', '2200: \\tfor (f = priv->features, ret = NULL; f; f = f->next) {', '2201: \\t\\tif (G_TYPE_CHECK_INSTANCE_TYPE (f->data, feature_type))', '2202: \\t\\t\\tret = g_slist_prepend (ret, f->data);', '2203: \\t}', '2204: \\treturn g_slist_reverse (ret);', '2205: }', '2206: ', '2207: /**', '2208:  * soup_session_get_feature:', '2209:  * @session: a #SoupSession', '2227: ', '2228: \\tfor (f = priv->features; f; f = f->next) {', '2229: \\t\\tfeature = f->data;', '2230: \\t\\tif (G_TYPE_CHECK_INSTANCE_TYPE (feature, feature_type))', '2231: \\t\\t\\treturn feature;', '2232: \\t}', '2233: \\treturn NULL;', '2234: }', '2235: ', '2236: /**', '2237:  * soup_session_get_feature_for_message:', '2238:  * @session: a #SoupSession', '2296: ', '2297:                 wrapper = soup_content_processor_wrap_input (processor, istream, msg, NULL);', '2298:                 if (wrapper) {', '2299:                         g_object_unref (istream);', '2300:                         istream = wrapper;', '2301:                 }', '2302:         }', '2303: ', '2304:         g_slist_free (processors);', '2305: ', '2306:         return istream;', '2307: }', '2308: ', '2309: static void', '2310: soup_session_class_init (SoupSessionClass *session_class)', '2311: {', '2638:                 return TRUE;', '2639: ', '2640: \\tif (!soup_message_query_flags (msg, SOUP_MESSAGE_NO_REDIRECT)) {', '2641: \\t\\treturn SOUP_SESSION_WOULD_REDIRECT_AS_GET (session, msg) ||', '2642: \\t\\t\\tSOUP_SESSION_WOULD_REDIRECT_AS_SAFE (session, msg);', '2643: \\t}', '2644: ', '2645: \\treturn FALSE;', '2646: }', '2647: ', '2648: /* send_request_async */', '2649: ', '2650: static void', '2721: \\t} else {', '2722: \\t\\t/* The message finished before even being started;', '2723: \\t\\t * probably a tunnel connect failure.', '2724: \\t\\t */', '2725: \\t\\tistream = g_memory_input_stream_new ();', '2726: \\t}', '2727: ', '2728: \\tasync_send_request_return_result (item, istream, error);', '2729: }', '2730: ', '2731: static void', '2732: send_async_spliced (GObject *source, GAsyncResult *result, gpointer user_data)', '2733: {', '2751: \\tif (g_output_stream_splice_finish (G_OUTPUT_STREAM (source),', '2752: \\t\\t\\t\\t\\t   result, &error) == -1) {', '2753: \\t\\tasync_send_request_return_result (item, NULL, error);', '2754: \\t\\tsoup_message_queue_item_unref (item);', '2755: \\t\\treturn;', '2756: \\t}', '2757: ', '2758: \\t/* Otherwise either restarted or finished will eventually be called. */', '2759: \\tsoup_session_kick_queue (item->session);', '2760: \\tsoup_message_queue_item_unref (item);', '2761: }', '2762: ', '2763: static void', '2764: send_async_maybe_complete (SoupMessageQueueItem *item,', '2765: \\t\\t\\t   GInputStream         *stream)', '2782: \\t\\t\\t\\t\\t      item->io_priority,', '2783: \\t\\t\\t\\t\\t      item->cancellable,', '2784: \\t\\t\\t\\t\\t      send_async_spliced,', '2785: \\t\\t\\t\\t\\t      soup_message_queue_item_ref (item));', '2786: \\t\\treturn;', '2787: \\t}', '2788: ', '2789: \\tasync_send_request_return_result (item, stream, NULL);', '2790: }', '2791: ', '2792: static void', '2793: run_until_read_done (SoupMessage          *msg,', '2794: \\t\\t     GAsyncResult         *result,', '2816: \\t\\tif (soup_message_io_in_progress (msg))', '2817: \\t\\t\\tsoup_message_io_finished (msg);', '2818: \\t\\titem->paused = FALSE;', '2819: \\t\\titem->state = SOUP_MESSAGE_FINISHING;', '2820: \\t\\tsoup_session_process_queue_item (item->session, item, FALSE);', '2821: \\t}', '2822: \\tasync_send_request_return_result (item, NULL, error);', '2823: }', '2824: ', '2825: static void', '2826: async_send_request_running (SoupSession *session, SoupMessageQueueItem *item)', '2827: {', '2831: \\t\\t\\t\\t\\t\\t      item->io_priority,', '2832: \\t\\t\\t\\t\\t\\t      item->cancellable,', '2833: \\t\\t\\t\\t\\t\\t      (GAsyncReadyCallback)run_until_read_done,', '2834: \\t\\t\\t\\t\\t\\t      item);', '2835: \\t\\treturn;', '2836: \\t}', '2837: ', '2838: \\tsoup_message_io_run (item->msg, FALSE);', '2839: }', '2840: ', '2841: static void', '2842: cache_stream_finished (GInputStream         *stream,', '2843: \\t\\t       SoupMessageQueueItem *item)', '2920: \\t\\tif (stream) {', '2921: \\t\\t\\tasync_return_from_cache (data->item, stream);', '2922: \\t\\t\\tg_object_unref (stream);', '2923: \\t\\t\\tasync_cache_conditional_data_free (data);', '2924: \\t\\t\\treturn;', '2925: \\t\\t}', '2926: \\t}', '2927: ', '2928: \\t/* The resource was modified or the server returned a 200', '2929: \\t * OK. Either way we reload it. FIXME.', '2930: \\t */', '3127:                         else if (item->state != SOUP_MESSAGE_FINISHED)', '3128:                                 item->state = SOUP_MESSAGE_FINISHING;', '3129: ', '3130:                         if (item->state != SOUP_MESSAGE_FINISHED)', '3131:                                 soup_session_process_queue_item (session, item, FALSE);', '3132:                 }', '3133: \\t}', '3134: ', '3135: \\treturn g_task_propagate_pointer (task, error);', '3136: }', '3137: ', '3138: /**', '3139:  * soup_session_send:', '3140:  * @session: a #SoupSession', '3199: \\t\\tif (!soup_message_io_run_until_read (msg, item->cancellable, &my_error)) {', '3200: \\t\\t\\tif (item->state == SOUP_MESSAGE_RESTARTING) {', \"3201: \\t\\t\\t\\t/* Message was restarted, we'll try again. */\", '3202: \\t\\t\\t\\tg_clear_error (&my_error);', '3203: \\t\\t\\t\\tcontinue;', '3204: \\t\\t\\t}', '3205: \\t\\t\\tbreak;', '3206: \\t\\t}', '3207: ', '3208: \\t\\tstream = soup_message_io_get_response_istream (msg, &my_error);', '3209: \\t\\tif (!stream)', '3210: \\t\\t\\tbreak;', '3238: \\t\\tstream = g_memory_input_stream_new ();', '3239: \\t\\tif (size) {', '3240: \\t\\t\\tg_memory_input_stream_add_data (G_MEMORY_INPUT_STREAM (stream),', '3241: \\t\\t\\t\\t\\t\\t\\tg_memory_output_stream_steal_data (mostream),', '3242: \\t\\t\\t\\t\\t\\t\\tsize, g_free);', '3243: \\t\\t}', '3244: \\t\\tg_object_unref (ostream);', '3245: \\t}', '3246: ', '3247:         /* This cancellable was set for the send operation that is done now */', '3248:         g_object_unref (item->cancellable);', '3249:         item->cancellable = g_cancellable_new ();', '3263: \\t\\telse if (item->state != SOUP_MESSAGE_FINISHED)', '3264: \\t\\t\\titem->state = SOUP_MESSAGE_FINISHING;', '3265: \\t\\titem->paused = FALSE;', '3266: \\t\\tif (item->state != SOUP_MESSAGE_FINISHED)', '3267: \\t\\t\\tsoup_session_process_queue_item (session, item, TRUE);', '3268: \\t}', '3269: ', '3270: \\tsoup_message_queue_item_unref (item);', '3271: \\treturn stream;', '3272: }', '3273: ', '3274: static void', '3275: send_and_read_splice_ready_cb (SoupSession  *session,', '3276: \\t\\t\\t       GAsyncResult *result,', '3290:                 g_task_return_pointer (task,', '3291:                                        g_memory_output_stream_steal_as_bytes (G_MEMORY_OUTPUT_STREAM (ostream)),', '3292:                                        (GDestroyNotify)g_bytes_unref);', '3293:         } else {', '3294:                 g_task_return_error (task, error);', '3295:         }', '3296:         g_object_unref (task);', '3297: }', '3298: ', '3299: /**', '3300:  * soup_session_send_and_read_async:', '3301:  * @session: a #SoupSession', '3658: \\t\\tg_task_return_error (task, g_error_copy (item->error));', '3659: \\t} else {', '3660: \\t\\tg_task_return_new_error (task,', '3661: \\t\\t\\t\\t\\t SOUP_WEBSOCKET_ERROR, SOUP_WEBSOCKET_ERROR_NOT_WEBSOCKET,', '3662: \\t\\t\\t\\t\\t \"%s\", _(\"The server did not accept the WebSocket handshake.\"));', '3663: \\t}', '3664: ', '3665: \\tg_object_unref (task);', '3666: }', '3667: ', '3668: static void', '3669: websocket_connect_async_stop (SoupMessage *msg, gpointer user_data)', '3670: {', '3691: \\t\\tg_object_unref (stream);', '3692: \\t\\tg_task_return_pointer (task, client, g_object_unref);', '3693: \\t\\tg_object_unref (task);', '3694: ', '3695: \\t\\treturn;', '3696: \\t}', '3697: ', '3698:         g_assert (!item->error);', '3699:         item->error = error;', '3700:         soup_message_io_finished (item->msg);', '3701: }', '3702: ', '3703: /**', '3704:  * soup_session_websocket_connect_async:', '3705:  * @session: a #SoupSession'], 'tests/auth-test.c': ['1: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */', '2: ', '3: #include \"test-utils.h\"', '4: ', '5: static const char *base_uri;', '6: static GMainLoop *loop;', '7: ', '8: typedef struct {', '9: \\t/* Explanation of what you should see */', '10: \\tconst char *explanation;', '11: ', '12: \\t/* URL to test against */', '13: \\tconst char *url;', '14: ', \"15: \\t/* Provided passwords, 1 character each. ('1', '2', and '3'\", '16: \\t * mean the correct passwords for \"realm1\", \"realm2\", and', '17: \\t * \"realm3\" respectively. \\'4\\' means \"use the wrong password\".)', '18: \\t * The first password (if present) will be used by', '19: \\t * authenticate(), and the second (if present) will be used by', '20: \\t * reauthenticate().', '21: \\t */', '22: \\tconst char *provided;', '23: ', '24: \\t/* Whether to pass user and password in the URL or not.', '181: \\t\\tuser = strstr (header, \"username=\\\\\"user\");', '182: \\t\\tif (user)', \"183: \\t\\t\\tnum = user[14] - '0';\", '184: \\t\\telse', '185: \\t\\t\\tnum = 0;', '186: \\t}', '187: ', '188: \\tg_assert (num >= 0 && num <= 4);', '189: ', '190: \\treturn num;', '191: }', '192: ', '193: static void', '194: handler (SoupMessage *msg, gpointer data)', '195: {', '208: \\t\\t\\t\\t  \"expected %s\", auths[exp]);', '209: \\t\\tmemmove (expected, expected + 1, strlen (expected));', '210: \\t} else {', '211: \\t\\tsoup_test_assert (*expected,', '212: \\t\\t\\t\\t  \"expected to be finished\");', '213: \\t}', '214: }', '215: ', '216: static gboolean', '217: authenticate (SoupMessage  *msg,', '218: \\t      SoupAuth     *auth,', '270: \\t\\tsoup_auth_authenticate (auth, \"user1\", \"realm1\");', '271: \\t\\t*authenticated = TRUE;', '272: \\t} else {', '273: \\t\\tsoup_test_assert (!*authenticated,', '274: \\t\\t\\t\\t  \"asked to authenticate message %d after authenticating\", n);', '275: \\t}', '276: ', '277: \\treturn TRUE;', '278: }', '279: ', '280: static void', '281: bug271540_finished (SoupMessage *msg, gpointer data)', '282: {', '452: ', '453: \\tif (expect_signal) {', '454: \\t\\tg_signal_handlers_disconnect_by_func (session,', '455: \\t\\t\\t\\t\\t\\t      G_CALLBACK (digest_nonce_authenticate),', '456: \\t\\t\\t\\t\\t\\t      NULL);', '457: \\t}', '458: ', '459: \\tg_object_unref (msg);', '460: }', '461: ', '462: static void', '463: do_digest_expiration_test (void)', '464: {', '873: \\tsad->round[round].response = soup_auth_get_scheme_name (auth);', '874: \\tif (sad->password && !retrying) {', '875: \\t\\tsoup_auth_authenticate (auth, \"user\", sad->password);', '876: ', '877: \\t\\treturn TRUE;', '878: \\t}', '879: ', '880: \\treturn FALSE;', '881: }', '882: ', '883: static void', '884: select_auth_test_one (GUri *uri,', '885: \\t\\t      gboolean disable_digest, const char *password,', '1066: \\t\\t\\t      SOUP_STATUS_OK);', '1067: ', '1068: \\tg_object_unref (basic_auth_domain);', '1069: \\tg_object_unref (digest_auth_domain);', '1070: \\tg_uri_unref (uri);', '1071: \\tsoup_test_server_quit_unref (server);', '1072: }', '1073: ', '1074: static void', '1075: sneakily_close_connection (SoupServerMessage *msg,', '1076: \\t\\t\\t   gpointer           user_data)', '1160: \\tsoup_test_assert_message_status (acd.msg, SOUP_STATUS_OK);', '1161: ', '1162: \\tg_bytes_unref (body);', '1163: \\tg_object_unref (acd.msg);', '1164: \\tsoup_test_session_abort_unref (acd.session);', '1165: \\tsoup_test_server_quit_unref (server);', '1166: }', '1167: ', '1168: static gboolean', '1169: infinite_cancel (gpointer session)', '1170: {', '1237: \\t(*counter)++;', '1238: \\tif (!retrying) {', '1239: \\t\\tsoup_auth_authenticate (auth, \"user\", \"bad\");', '1240: ', '1241: \\t\\treturn TRUE;', '1242: \\t}', '1243: ', '1244: \\treturn FALSE;', '1245: }', '1246: ', '1247: static void', '1248: do_disappearing_auth_test (void)', '1249: {', '1289: \\tg_object_unref (msg);', '1290: \\tsoup_test_session_abort_unref (session);', '1291: ', '1292: \\tg_object_unref (auth_domain);', '1293: \\tg_uri_unref (uri);', '1294: \\tsoup_test_server_quit_unref (server);', '1295: }', '1296: ', '1297: static SoupAuthTest relogin_tests[] = {', '1298: \\t{ \"Auth provided via URL, should succeed\",', '1299: \\t  \"Basic/realm12/\", \"1\", TRUE, \"01\", SOUP_STATUS_OK },', '1391: ', '1392: \\t\\tg_free (expected);', '1393: \\t\\tdebug_printf (1, \"\\\\n\");', '1394: ', '1395: \\t\\tg_object_unref (msg);', '1396: \\t}', '1397: \\tg_uri_unref (base);', '1398: ', '1399: \\tsoup_test_session_abort_unref (session);', '1400: }', '1401: ', '1402: static void', '1403: do_clear_credentials_test (void)', '1404: {', '1620: {', '1621:         if (retrying) {', '1622:                 g_cancellable_cancel (cancellable);', '1623: ', '1624: \\t\\treturn FALSE;', '1625: \\t}', '1626: ', '1627: \\tsoup_auth_authenticate (auth, \"user1\", \"wrong\");', '1628: ', '1629: \\treturn TRUE;', '1630: }', '1631: ', '1632: static void', '1633: request_send_cb (SoupSession  *session,', '1634:                  GAsyncResult *result,', '1789: \\t\\tmsg = soup_message_new (SOUP_METHOD_GET, uri_tests[i].url);', '1790: \\t\\tsoup_message_add_flags (msg, SOUP_MESSAGE_DO_NOT_USE_AUTH_CACHE);', '1791: \\t\\tsoup_test_session_send_message (session, msg);', '1792: \\t\\tsoup_test_assert_message_status (msg, uri_tests[i].status);', '1793: \\t\\tg_object_unref (msg);', '1794: \\t}', '1795: ', '1796: \\tsoup_test_session_abort_unref (session);', '1797: }', '1798: ', '1799: static void', '1800: on_request_read (SoupServer        *server,', '1801:                  SoupServerMessage *msg,', '1807:                 /* These must be in order to ensure libsoup passes over the invalid one. */', '1808:                 soup_message_headers_replace (response_headers, \"WWW-Authenticate\",', '1809:                                 \"Digest realm=\\\\\"auth-test\\\\\", nonce=\\\\\"0000000000001\\\\\", qop=\\\\\"auth\\\\\", algorithm=FAKE\");', '1810:                 soup_message_headers_append (response_headers, \"WWW-Authenticate\", old_header);', '1811:                 g_free (old_header);', '1812:         }', '1813: }', '1814: ', '1815: static gboolean', '1816: on_digest_authenticate (SoupMessage *msg,', '1817:                         SoupAuth    *auth,', '1861: ', '1862:         status = soup_test_session_send_message (session, msg);', '1863: ', '1864:         g_assert_cmpint (status, ==, SOUP_STATUS_OK);', '1865: \\tg_uri_unref (uri);', '1866: \\tsoup_test_server_quit_unref (server);', '1867: }', '1868: ', '1869: static void', '1870: on_request_read_for_missing_params (SoupServer        *server,', '1871:                                       SoupServerMessage *msg,', '1872:                                       gpointer           user_data)', '1873: {', '1874:         const char *auth_header = user_data;', '1875:         SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);', '1876:         soup_message_headers_replace (response_headers, \"WWW-Authenticate\", auth_header);', '1877: }', '1878: ', '1879: static void', '1880: do_missing_params_test (gconstpointer auth_header)', '1881: {', '1882:         SoupSession *session;', '1883:         SoupMessage *msg;', '1884:         SoupServer *server;', '1911: ', '1912:         status = soup_test_session_send_message (session, msg);', '1913: ', '1914:         g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);', '1915: \\tg_uri_unref (uri);', '1916: \\tsoup_test_server_quit_unref (server);', '1917: }', '1918: ', '1919: int', '1920: main (int argc, char **argv)', '1921: {', '1922: \\tint ret;', '1923: ', '1924: \\ttest_init (argc, argv, NULL);', '1925: \\tapache_init ();', '1926: ', '1927: \\tbase_uri = \"http://127.0.0.1:47524/\";', '1928: ', '1929: \\tg_test_add_data_func (\"/auth/main-tests\", main_tests, do_batch_tests);', '1930: \\tg_test_add_data_func (\"/auth/relogin-tests\", relogin_tests, do_batch_tests);', '1931: \\tg_test_add_data_func (\"/auth/basic-root-pspec-test\", basic_root_pspace_test, do_batch_tests);', '1932: \\tg_test_add_func (\"/auth/pipelined-auth\", do_pipelined_auth_test);', '1933: \\tg_test_add_func (\"/auth/digest-expiration\", do_digest_expiration_test);', '1934: \\tg_test_add_func (\"/auth/async-auth/good-password\", do_async_auth_good_password_test);', '1935: \\tg_test_add_func (\"/auth/async-auth/bad-password\", do_async_auth_bad_password_test);', '1936: \\tg_test_add_func (\"/auth/async-auth/no-password\", do_async_auth_no_password_test);', '1937: \\tg_test_add_func (\"/auth/async-auth/cancel\", do_async_auth_cancel_test);', '1938:         g_test_add_func (\"/auth/sync-auth/bad-password\", do_sync_auth_bad_password_test);', '1939: \\tg_test_add_func (\"/auth/select-auth\", do_select_auth_test);', '1940: \\tg_test_add_func (\"/auth/auth-close\", do_auth_close_test);', '1941: \\tg_test_add_func (\"/auth/infinite-auth\", do_infinite_auth_test);', '1942: \\tg_test_add_func (\"/auth/disappearing-auth\", do_disappearing_auth_test);', '1943: \\tg_test_add_func (\"/auth/clear-credentials\", do_clear_credentials_test);', '1944: \\tg_test_add_func (\"/auth/message-do-not-use-auth-cache\", do_message_do_not_use_auth_cache_test);', '1945: \\tg_test_add_func (\"/auth/async-message-do-not-use-auth-cache\", do_async_message_do_not_use_auth_cache_test);', '1946: \\tg_test_add_func (\"/auth/authorization-header-request\", do_message_has_authorization_header_test);', '1947: \\tg_test_add_func (\"/auth/cancel-after-retry\", do_cancel_after_retry_test);', '1948: \\tg_test_add_func (\"/auth/cancel-on-authenticate\", do_cancel_on_authenticate);', '1949: \\tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);', '1950:         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);', '1951:         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);', '1952:         g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\\\"auth\\\\\"\", do_missing_params_test);', '1953:         g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\\\"auth-test\\\\\", qop=\\\\\"auth,auth-int\\\\\", opaque=\\\\\"5ccc069c403ebaf9f0171e9517f40e41\\\\\"\", do_missing_params_test);', '1954:         g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\\\"auth-test\\\\\", qop=\\\\\"auth,auth-int\\\\\", opaque=\\\\\"5ccc069c403ebaf9f0171e9517f40e41\\\\\" algorithm=\\\\\"MD5-sess\\\\\"\", do_missing_params_test);', '1955:         g_test_add_data_func (\"/auth/missing-params/nonce-and-qop\", \"Digest realm=\\\\\"auth-test\\\\\"\", do_missing_params_test);', '1956: ', '1957: \\tret = g_test_run ();', '1958: ', '1959: \\ttest_cleanup ();', '1960: \\treturn ret;', '1961: }']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 09568d47d796f526820d3a6ff85cd2797eb65843 Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Wed, 5 Feb 2025 16:18:10 -0600\nSubject: [PATCH 6/6] session: Strip authentication credentails on cross-origin\n redirect\n\nThis should match the behavior of Firefox and Safari but not of Chromium.\n\nUpstream reference:\nhttps://gitlab.gnome.org/GNOME/libsoup/-/commit/3e5c26415811f19e7737238bb23305ffaf96f66b\n---\n libsoup/soup-session.c |  6 ++++\n tests/auth-test.c      | 77 ++++++++++++++++++++++++++++++++++++++++++\n 2 files changed, 83 insertions(+)\n\ndiff --git a/libsoup/soup-session.c b/libsoup/soup-session.c\nindex 631bec0..9f00b05 100644\n--- a/libsoup/soup-session.c\n+++ b/libsoup/soup-session.c\n@@ -1230,6 +1230,12 @@ soup_session_redirect_message (SoupSession *session,\n \t\t\t\t\t\t   SOUP_ENCODING_NONE);\n \t}\n \n+        /* Strip all credentials on cross-origin redirect. */\n+        if (!soup_uri_host_equal (soup_message_get_uri (msg), new_uri)) {\n+                soup_message_headers_remove_common (soup_message_get_request_headers (msg), SOUP_HEADER_AUTHORIZATION);\n+                soup_message_set_auth (msg, NULL);\n+        }\n+\n         soup_message_set_request_host_from_uri (msg, new_uri);\n \tsoup_message_set_uri (msg, new_uri);\n \tg_uri_unref (new_uri);\ndiff --git a/tests/auth-test.c b/tests/auth-test.c\nindex 484097f..7c3b551 100644\n--- a/tests/auth-test.c\n+++ b/tests/auth-test.c\n@@ -1,6 +1,7 @@\n /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n \n #include \"test-utils.h\"\n+#include \"soup-uri-utils-private.h\"\n \n static const char *base_uri;\n static GMainLoop *loop;\n@@ -1916,6 +1917,81 @@ do_missing_params_test (gconstpointer auth_header)\n \tsoup_test_server_quit_unref (server);\n }\n \n+static void\n+redirect_server_callback (SoupServer        *server,\n+                          SoupServerMessage *msg,\n+                          const char        *path,\n+                          GHashTable        *query,\n+                          gpointer           user_data)\n+{\n+    static gboolean redirected = FALSE;\n+\n+    if (!redirected) {\n+        char *redirect_uri = g_uri_to_string (user_data);\n+        soup_server_message_set_redirect (msg, SOUP_STATUS_MOVED_PERMANENTLY, redirect_uri);\n+        g_free (redirect_uri);\n+        redirected = TRUE;\n+        return;\n+    }\n+\n+    g_assert_not_reached ();\n+}\n+\n+static gboolean\n+auth_for_redirect_callback (SoupMessage *msg, SoupAuth *auth, gboolean retrying, gpointer user_data)\n+{\n+    GUri *known_server_uri = user_data;\n+\n+    if (!soup_uri_host_equal (known_server_uri, soup_message_get_uri (msg)))\n+        return FALSE;\n+\n+    soup_auth_authenticate (auth, \"user\", \"good-basic\");\n+\n+    return TRUE;\n+}\n+\n+static void\n+do_strip_on_crossorigin_redirect (void)\n+{\n+    SoupSession *session;\n+    SoupMessage *msg;\n+    SoupServer *server1, *server2;\n+    SoupAuthDomain *auth_domain;\n+    GUri *uri;\n+    gint status;\n+\n+    server1 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n+    server2 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n+\n+    /* Both servers have the same credentials. */\n+    auth_domain = soup_auth_domain_basic_new (\"realm\", \"auth-test\", \"auth-callback\", server_basic_auth_callback, NULL);\n+    soup_auth_domain_add_path (auth_domain, \"/\");\n+    soup_server_add_auth_domain (server1, auth_domain);\n+    soup_server_add_auth_domain (server2, auth_domain);\n+    g_object_unref (auth_domain);\n+\n+    /* Server 1 asks for auth, then redirects to Server 2. */\n+    soup_server_add_handler (server1, NULL,\n+                    redirect_server_callback,\n+                   soup_test_server_get_uri (server2, \"http\", NULL), (GDestroyNotify)g_uri_unref);\n+    /* Server 2 requires auth. */\n+    soup_server_add_handler (server2, NULL, server_callback, NULL, NULL);\n+\n+    session = soup_test_session_new (NULL);\n+    uri = soup_test_server_get_uri (server1, \"http\", NULL);\n+    msg = soup_message_new_from_uri (\"GET\", uri);\n+    /* The client only sends credentials for the host it knows. */\n+    g_signal_connect (msg, \"authenticate\", G_CALLBACK (auth_for_redirect_callback), uri);\n+\n+    status = soup_test_session_send_message (session, msg);\n+\n+    g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n+\n+    g_uri_unref (uri);\n+    soup_test_server_quit_unref (server1);\n+    soup_test_server_quit_unref (server2);\n+}\n+\n int\n main (int argc, char **argv)\n {\n@@ -1949,6 +2025,7 @@ main (int argc, char **argv)\n \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n+        g_test_add_func (\"/auth/strip-on-crossorigin-redirect\", do_strip_on_crossorigin_redirect);\n         g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n         g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n         g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n-- \n2.45.3\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32914": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup, where the soup_multipart_new_from_message() function is vulnerable to an out-of-bounds read. This flaw allows a malicious HTTP client to induce the libsoup server to read out of bounds.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From 5bfcf8157597f2d327050114fb37ff600004dbcf Mon Sep 17 00:00:00 2001\\n    From: Milan Crha <mcrha@redhat.com>\\n    Date: Tue, 15 Apr 2025 09:03:00 +0200\\n    Subject: [PATCH] multipart: Fix read out of buffer bounds under\\n    soup_multipart_new_from_message()\\n\\n    This is CVE-2025-32914, special crafted input can cause read out of buffer bounds\\n    of the body argument.\\n\\n    Closes #436\\n    ---\\n    libsoup/soup-multipart.c |  2 +-\\n    tests/multipart-test.c   | 58 ++++++++++++++++++++++++++++++++++++++++\\n    2 files changed, 59 insertions(+), 1 deletion(-)\\n\\n    diff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\\n    index 2421c91f8..102ce3722 100644\\n    --- a/libsoup/soup-multipart.c\\n    +++ b/libsoup/soup-multipart.c\\n    @@ -173,7 +173,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\\n                return NULL;\\n            }\\n    \\n    -\\t\\tsplit = strstr (start, \\\"\\r\\n\\r\\n\\\");\\n    +\\t\\tsplit = g_strstr_len (start, body_end - start, \\\"\\r\\n\\r\\n\\\");\\n            if (!split || split > end) {\\n                soup_multipart_free (multipart);\\n                return NULL;\\n    diff --git a/tests/multipart-test.c b/tests/multipart-test.c\\n    index 2c0e7e969..f5b986889 100644\\n    --- a/tests/multipart-test.c\\n    +++ b/tests/multipart-test.c\\n    @@ -471,6 +471,62 @@ test_multipart (gconstpointer data)\\n        loop = NULL;\\n    }\\n    \\n    +static void\\n    +test_multipart_bounds_good (void)\\n    +{\\n    +\\t#define TEXT \\\"line1\\r\\nline2\\\"\\n    +\\tSoupMultipart *multipart;\\n    +\\tSoupMessageHeaders *headers, *set_headers = NULL;\\n    +\\tGBytes *bytes, *set_bytes = NULL;\\n    +\\tconst char *raw_data = \\\"--123\\r\\nContent-Type: text/plain;\\r\\n\\r\\n\\\" TEXT \\\"\\r\\n--123--\\r\\n\\\";\\n    +\\tgboolean success;\\n    +\\n    +\\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\\n    +\\tsoup_message_headers_append (headers, \\\"Content-Type\\\", \\\"multipart/mixed; boundary=\\\"123\\\"\\\");\\n    +\\n    +\\tbytes = g_bytes_new (raw_data, strlen (raw_data));\\n    +\\n    +\\tmultipart = soup_multipart_new_from_message (headers, bytes);\\n    +\\n    +\\tg_assert_nonnull (multipart);\\n    +\\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\\n    +\\tsuccess = soup_multipart_get_part (multipart, 0, &set_headers, &set_bytes);\\n    +\\tg_assert_true (success);\\n    +\\tg_assert_nonnull (set_headers);\\n    +\\tg_assert_nonnull (set_bytes);\\n    +\\tg_assert_cmpint (strlen (TEXT), ==, g_bytes_get_size (set_bytes));\\n    +\\tg_assert_cmpstr (\\\"text/plain\\\", ==, soup_message_headers_get_content_type (set_headers, NULL));\\n    +\\tg_assert_cmpmem (TEXT, strlen (TEXT), g_bytes_get_data (set_bytes, NULL), g_bytes_get_size (set_bytes));\\n    +\\n    +\\tsoup_message_headers_unref (headers);\\n    +\\tg_bytes_unref (bytes);\\n    +\\n    +\\tsoup_multipart_free (multipart);\\n    +\\n    +\\t#undef TEXT\\n    +}\\n    +\\n    +static void\\n    +test_multipart_bounds_bad (void)\\n    +{\\n    +\\tSoupMultipart *multipart;\\n    +\\tSoupMessageHeaders *headers;\\n    +\\tGBytes *bytes;\\n    +\\tconst char *raw_data = \\\"--123\\r\\nContent-Type: text/plain;\\r\\nline1\\r\\nline2\\r\\n--123--\\r\\n\\\";\\n    +\\n    +\\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\\n    +\\tsoup_message_headers_append (headers, \\\"Content-Type\\\", \\\"multipart/mixed; boundary=\\\"123\\\"\\\");\\n    +\\n    +\\tbytes = g_bytes_new (raw_data, strlen (raw_data));\\n    +\\n    +\\t/* it did read out of raw_data/bytes bounds */\\n    +\\tmultipart = soup_multipart_new_from_message (headers, bytes);\\n    +\\tg_assert_null (multipart);\\n    +\\n    +\\tsoup_message_headers_unref (headers);\\n    +\\tg_bytes_unref (bytes);\\n    +}\\n    +\\n    int\\n    main (int argc, char **argv)\\n    {\\n    @@ -498,6 +554,8 @@ main (int argc, char **argv)\\n        g_test_add_data_func (\\\"/multipart/sync\\\", GINT_TO_POINTER (SYNC_MULTIPART), test_multipart);\\n        g_test_add_data_func (\\\"/multipart/async\\\", GINT_TO_POINTER (ASYNC_MULTIPART), test_multipart);\\n        g_test_add_data_func (\\\"/multipart/async-small-reads\\\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\\n    +\\tg_test_add_func (\\\"/multipart/bounds-good\\\", test_multipart_bounds_good);\\n    +\\tg_test_add_func (\\\"/multipart/bounds-bad\\\", test_multipart_bounds_bad);\\n    \\n        ret = g_test_run ();\\n    \\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-multipart.c': ['109: ', '110: \\t\\t/* Check for \"--\" or \"\\\\r\\\\n\" after boundary */', \"111: \\t\\tif ((b[boundary_len + 2] == '-' && b[boundary_len + 3] == '-') ||\", \"112: \\t\\t    (b[boundary_len + 2] == '\\\\r' && b[boundary_len + 3] == '\\\\n'))\", '113: \\t\\t\\treturn b;', '114: \\t}', '115: \\treturn NULL;', '116: }', '117: ', '118: /**', '119:  * soup_multipart_new_from_message:', '120:  * @headers: the headers of the HTTP message to parse', '137: \\tSoupMessageHeaders *part_headers;', '138: \\tGBytes *part_body;', '139: ', '140: \\tcontent_type = soup_message_headers_get_content_type (headers, &params);', '141: \\tif (!content_type)', '142: \\t\\treturn NULL;', '143: ', '144: \\tboundary = g_hash_table_lookup (params, \"boundary\");', '145: \\tif (strncmp (content_type, \"multipart/\", 10) != 0 || !boundary) {', '146: \\t\\tg_hash_table_destroy (params);', '147: \\t\\treturn NULL;', '148: \\t}', '149: ', '150: \\tmultipart = soup_multipart_new_internal (', '151: \\t\\tg_strdup (content_type), g_strdup (boundary));', '152: \\tg_hash_table_destroy (params);', '160: \\t/* skip preamble */', '161: \\tstart = find_boundary (body_data, body_end,', '162: \\t\\t\\t       boundary, boundary_len);', '163: \\tif (!start) {', '164: \\t\\tsoup_multipart_free (multipart);', '165: \\t\\treturn NULL;', '166: \\t}', '167: ', \"168: \\twhile (start[2 + boundary_len] != '-') {\", '169: \\t\\tend = find_boundary (start + 2 + boundary_len, body_end,', '170: \\t\\t\\t\\t     boundary, boundary_len);', '171: \\t\\tif (!end) {', '172: \\t\\t\\tsoup_multipart_free (multipart);', '173: \\t\\t\\treturn NULL;', '174: \\t\\t}', '175: ', '176: \\t\\tsplit = strstr (start, \"\\\\r\\\\n\\\\r\\\\n\");', '177: \\t\\tif (!split || split > end) {', '178: \\t\\t\\tsoup_multipart_free (multipart);', '179: \\t\\t\\treturn NULL;', '180: \\t\\t}', '181: \\t\\tsplit += 4;', '182: ', '183: \\t\\t/* @start points to the start of the boundary line', '184: \\t\\t * preceding this part, and @split points to the end', '185: \\t\\t * of the headers / start of the body.', '186: \\t\\t *', '187: \\t\\t * We tell soup_headers_parse() to start parsing at', '188: \\t\\t * @start, because it skips the first line of the', '189: \\t\\t * input anyway (expecting it to be either a', '190: \\t\\t * Request-Line or Status-Line).', '191: \\t\\t */', '192: \\t\\tpart_headers = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);', '193: \\t\\tg_ptr_array_add (multipart->headers, part_headers);', '194: \\t\\tif (!soup_headers_parse (start, split - 2 - start,', '195: \\t\\t\\t\\t\\t part_headers)) {', '196: \\t\\t\\tsoup_multipart_free (multipart);', '197: \\t\\t\\treturn NULL;', '198: \\t\\t}', '199: ', '200: \\t\\t/* @split, as previously mentioned, points to the', '201: \\t\\t * start of the body, and @end points to the start of', '202: \\t\\t * the following boundary line, which is to say 2 bytes', '206: \\t\\t\\t\\t\\t\\t    split - body_data,', '207: \\t\\t\\t\\t\\t\\t    end - 2 - split);', '208: \\t\\tg_ptr_array_add (multipart->bodies, part_body);', '209: ', '210: \\t\\tstart = end;', '211: \\t}', '212: ', '213: \\treturn multipart;', '214: }', '215: ', '216: /**', '217:  * soup_multipart_get_length:', '218:  * @multipart: a #SoupMultipart', '358: \\tg_string_free (disposition, TRUE);', '359: ', '360: \\tif (content_type) {', '361: \\t\\tsoup_message_headers_append_common (headers, SOUP_HEADER_CONTENT_TYPE,', '362:                                                     content_type);', '363: \\t}', '364: ', '365: \\tg_ptr_array_add (multipart->headers, headers);', '366: \\tg_ptr_array_add (multipart->bodies, g_bytes_ref (body));', '367: }', '368: ', '369: /**', '370:  * soup_multipart_to_message:', '371:  * @multipart: a #SoupMultipart', '453: \\t\\t\\t\\t\\t    g_strdup (multipart->boundary));', '454: \\tfor (i = 0; i < multipart->bodies->len; i++) {', '455: \\t\\tsoup_multipart_append_part (copy,', '456: \\t\\t\\t\\t\\t    multipart->headers->pdata[i],', '457: \\t\\t\\t\\t\\t    multipart->bodies->pdata[i]);', '458: \\t}', '459: \\treturn copy;', '460: }', '461: ', '462: G_DEFINE_BOXED_TYPE (SoupMultipart, soup_multipart, soup_multipart_copy, soup_multipart_free)'], 'tests/multipart-test.c': ['117: \\tcheck_is_next (is_next);', '118: ', '119: \\tif (g_str_equal (name, \"Date\")) {', '120: \\t\\tis_next = soup_message_headers_iter_next (&iter, &name, &value);', '121: \\t\\tcheck_is_next (is_next);', '122: \\t}', '123: ', '124: \\tg_assert_cmpstr (name, ==, \"Content-Type\");', '125: \\tg_assert_cmpstr (value, ==, \"multipart/x-mixed-replace; boundary=cut-here\");', '126: }', '127: ', '128: static void', '129: read_cb (GObject *source, GAsyncResult *asyncResult, gpointer data)', '130: {', '144: \\t\\tg_input_stream_close (stream, NULL, &error);', '145: \\t\\tg_assert_no_error (error);', '146: \\t\\tg_object_unref (stream);', '147: \\t\\tg_main_loop_quit (loop);', '148: \\t\\treturn;', '149: \\t}', '150: ', '151: \\tg_input_stream_read_async (stream, buffer, READ_BUFFER_SIZE,', '152: \\t\\t\\t\\t   G_PRIORITY_DEFAULT, NULL,', '153: \\t\\t\\t\\t   read_cb, NULL);', '154: }', '155: ', '156: static void', '157: no_multipart_handling_cb (GObject *source, GAsyncResult *res, gpointer data)', '158: {', '163: \\tin = soup_session_send_finish (session, res, &error);', '164: \\tg_assert_no_error (error);', '165: \\tif (error) {', '166: \\t\\tg_main_loop_quit (loop);', '167: \\t\\treturn;', '168: \\t}', '169: ', '170: \\tg_input_stream_read_async (in, buffer, READ_BUFFER_SIZE,', '171: \\t\\t\\t\\t   G_PRIORITY_DEFAULT, NULL,', '172: \\t\\t\\t\\t   read_cb, NULL);', '173: }', '174: ', '175: static void', '176: multipart_close_part_cb (GObject *source, GAsyncResult *res, gpointer data)', '177: {', '203: \\t\\tg_assert_cmpint (nread, ==, 34);', '204: \\t\\tbreak;', '205: \\tdefault:', '206: \\t\\tsoup_test_assert (FALSE, \"unexpected read of size: %d\", (int)nread);', '207: \\t\\tbreak;', '208: \\t}', '209: }', '210: ', '211: static void', '212: multipart_read_cb (GObject *source, GAsyncResult *asyncResult, gpointer data)', '213: {', '292: ', '293: \\t\\tbreak;', '294: \\tdefault:', '295: \\t\\tsoup_test_assert (FALSE, \"unexpected part received\");', '296: \\t\\tbreak;', '297: \\t}', '298: }', '299: ', '300: static void', '301: multipart_next_part_cb (GObject *source, GAsyncResult *res, gpointer data)', '302: {', '408: ', '409: \\tg_assert_cmpint (passes, ==, 4);', '410: ', '411: \\tg_main_loop_quit (loop);', '412: \\tg_object_unref (multipart);', '413: }', '414: ', '415: static void', '416: test_multipart (gconstpointer data)', '417: {', '418: \\tint headers_expected = 1, sniffed_expected = 1;', '419: \\tMultipartMode multipart_mode = GPOINTER_TO_INT (data);', '420: \\tSoupMessage *msg;', '466: \\tg_assert_cmpint (headers_count, ==, headers_expected);', '467: \\tg_assert_cmpint (sniffed_count, ==, sniffed_expected);', '468: ', '469: \\tg_object_unref (msg);', '470: \\tg_main_loop_unref (loop);', '471: \\tloop = NULL;', '472: }', '473: ', '474: int', '475: main (int argc, char **argv)', '476: {', '477: \\tSoupServer *server;', '478: \\tint ret;', '479: ', '480: \\ttest_init (argc, argv, NULL);', '481: ', '482: \\tbuffer = g_malloc (READ_BUFFER_SIZE);', '483: ', '484: \\tserver = soup_test_server_new (SOUP_TEST_SERVER_DEFAULT);', '485: \\tsoup_server_add_handler (server, NULL, server_callback, NULL, NULL);', '486: \\tbase_uri = soup_test_server_get_uri (server, \"http\", NULL);', '487: \\tbase_uri_string = g_uri_to_string (base_uri);', '488: ', '489: \\t/* FIXME: I had to raise the number of connections allowed here, otherwise I', '490: \\t * was hitting the limit, which indicates some connections are not dying.', '491: \\t */', '492: \\tsession = soup_test_session_new (\"max-conns\", 20,', '493: \\t\\t\\t\\t\\t \"max-conns-per-host\", 20,', '494: \\t\\t\\t\\t\\t NULL);', '495: \\tsoup_session_add_feature_by_type (session, SOUP_TYPE_CONTENT_SNIFFER);', '496: ', '497: \\tg_test_add_data_func (\"/multipart/no\", GINT_TO_POINTER (NO_MULTIPART), test_multipart);', '498: \\tg_test_add_data_func (\"/multipart/sync\", GINT_TO_POINTER (SYNC_MULTIPART), test_multipart);', '499: \\tg_test_add_data_func (\"/multipart/async\", GINT_TO_POINTER (ASYNC_MULTIPART), test_multipart);', '500: \\tg_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);', '501: ', '502: \\tret = g_test_run ();', '503: ', '504: \\tg_uri_unref (base_uri);', '505: \\tg_free (base_uri_string);', '506: \\tg_free (buffer);', '507: ', '508: \\tsoup_test_session_abort_unref (session);', '509: \\tsoup_test_server_quit_unref (server);', '510: ', '511: \\ttest_cleanup ();', '512: \\treturn ret;', '513: }']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 5bfcf8157597f2d327050114fb37ff600004dbcf Mon Sep 17 00:00:00 2001\nFrom: Milan Crha <mcrha@redhat.com>\nDate: Tue, 15 Apr 2025 09:03:00 +0200\nSubject: [PATCH] multipart: Fix read out of buffer bounds under\n soup_multipart_new_from_message()\n\nThis is CVE-2025-32914, special crafted input can cause read out of buffer bounds\nof the body argument.\n\nCloses #436\n---\n libsoup/soup-multipart.c |  2 +-\n tests/multipart-test.c   | 58 ++++++++++++++++++++++++++++++++++++++++\n 2 files changed, 59 insertions(+), 1 deletion(-)\n\ndiff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\nindex 2421c91f8..102ce3722 100644\n--- a/libsoup/soup-multipart.c\n+++ b/libsoup/soup-multipart.c\n@@ -173,7 +173,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\n \t\t\treturn NULL;\n \t\t}\n \n-\t\tsplit = strstr (start, \"\\r\\n\\r\\n\");\n+\t\tsplit = g_strstr_len (start, body_end - start, \"\\r\\n\\r\\n\");\n \t\tif (!split || split > end) {\n \t\t\tsoup_multipart_free (multipart);\n \t\t\treturn NULL;\ndiff --git a/tests/multipart-test.c b/tests/multipart-test.c\nindex 2c0e7e969..f5b986889 100644\n--- a/tests/multipart-test.c\n+++ b/tests/multipart-test.c\n@@ -471,6 +471,62 @@ test_multipart (gconstpointer data)\n \tloop = NULL;\n }\n \n+static void\n+test_multipart_bounds_good (void)\n+{\n+\t#define TEXT \"line1\\r\\nline2\"\n+\tSoupMultipart *multipart;\n+\tSoupMessageHeaders *headers, *set_headers = NULL;\n+\tGBytes *bytes, *set_bytes = NULL;\n+\tconst char *raw_data = \"--123\\r\\nContent-Type: text/plain;\\r\\n\\r\\n\" TEXT \"\\r\\n--123--\\r\\n\";\n+\tgboolean success;\n+\n+\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n+\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\\\"123\\\"\");\n+\n+\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n+\n+\tmultipart = soup_multipart_new_from_message (headers, bytes);\n+\n+\tg_assert_nonnull (multipart);\n+\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\n+\tsuccess = soup_multipart_get_part (multipart, 0, &set_headers, &set_bytes);\n+\tg_assert_true (success);\n+\tg_assert_nonnull (set_headers);\n+\tg_assert_nonnull (set_bytes);\n+\tg_assert_cmpint (strlen (TEXT), ==, g_bytes_get_size (set_bytes));\n+\tg_assert_cmpstr (\"text/plain\", ==, soup_message_headers_get_content_type (set_headers, NULL));\n+\tg_assert_cmpmem (TEXT, strlen (TEXT), g_bytes_get_data (set_bytes, NULL), g_bytes_get_size (set_bytes));\n+\n+\tsoup_message_headers_unref (headers);\n+\tg_bytes_unref (bytes);\n+\n+\tsoup_multipart_free (multipart);\n+\n+\t#undef TEXT\n+}\n+\n+static void\n+test_multipart_bounds_bad (void)\n+{\n+\tSoupMultipart *multipart;\n+\tSoupMessageHeaders *headers;\n+\tGBytes *bytes;\n+\tconst char *raw_data = \"--123\\r\\nContent-Type: text/plain;\\r\\nline1\\r\\nline2\\r\\n--123--\\r\\n\";\n+\n+\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n+\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\\\"123\\\"\");\n+\n+\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n+\n+\t/* it did read out of raw_data/bytes bounds */\n+\tmultipart = soup_multipart_new_from_message (headers, bytes);\n+\tg_assert_null (multipart);\n+\n+\tsoup_message_headers_unref (headers);\n+\tg_bytes_unref (bytes);\n+}\n+\n int\n main (int argc, char **argv)\n {\n@@ -498,6 +554,8 @@ main (int argc, char **argv)\n \tg_test_add_data_func (\"/multipart/sync\", GINT_TO_POINTER (SYNC_MULTIPART), test_multipart);\n \tg_test_add_data_func (\"/multipart/async\", GINT_TO_POINTER (ASYNC_MULTIPART), test_multipart);\n \tg_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\n+\tg_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);\n+\tg_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);\n \n \tret = g_test_run ();\n \n-- \nGitLab\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32908": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. The HTTP/2 server in libsoup may not fully validate the values of pseudo-headers :scheme, :authority, and :path, which may allow a user to cause a denial of service (DoS).\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From a792b23ab87cacbf4dd9462bf7b675fa678efbae Mon Sep 17 00:00:00 2001\\n    From: Milan Crha <mcrha@redhat.com>\\n    Date: Tue, 15 Apr 2025 09:59:05 +0200\\n    Subject: [PATCH] soup-server-http2: Check validity of the constructed\\n    connection URI\\n\\n    The HTTP/2 pseudo-headers can contain invalid values, which the GUri rejects\\n    and returns NULL, but the soup-server did not check the validity and could\\n    abort the server itself later in the code.\\n\\n    Closes #429\\n    ---\\n    .../http2/soup-server-message-io-http2.c      |  4 +++\\n    tests/http2-test.c                            | 28 +++++++++++++++++++\\n    2 files changed, 32 insertions(+)\\n\\n    diff --git a/libsoup/server/http2/soup-server-message-io-http2.c b/libsoup/server/http2/soup-server-message-io-http2.c\\n    index 943ecfd3..f1fe2d5c 100644\\n    --- a/libsoup/server/http2/soup-server-message-io-http2.c\\n    +++ b/libsoup/server/http2/soup-server-message-io-http2.c\\n    @@ -771,9 +771,13 @@ on_frame_recv_callback (nghttp2_session     *session,\\n                    char *uri_string;\\n                    GUri *uri;\\n    \\n    +\\t\\tif (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\\n    +\\t\\t\\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\\n                    uri_string = g_strdup_printf (\\\"%s://%s%s\\\", msg_io->scheme, msg_io->authority, msg_io->path);\\n                    uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\\n                    g_free (uri_string);\\n    +\\t\\tif (uri == NULL)\\n    +\\t\\t\\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\\n                    soup_server_message_set_uri (msg_io->msg, uri);\\n                    g_uri_unref (uri);\\n    \\n    diff --git a/tests/http2-test.c b/tests/http2-test.c\\n    index 5b6da5e4..ec7972fe 100644\\n    --- a/tests/http2-test.c\\n    +++ b/tests/http2-test.c\\n    @@ -1341,6 +1341,30 @@ do_connection_closed_test (Test *test, gconstpointer data)\\n            g_uri_unref (uri);\\n    }\\n    \\n    +static void\\n    +do_broken_pseudo_header_test (Test *test, gconstpointer data)\\n    +{\\n    +\\tchar *path;\\n    +\\tSoupMessage *msg;\\n    +\\tGUri *uri;\\n    +\\tGBytes *body = NULL;\\n    +\\tGError *error = NULL;\\n    +\\n    +\\turi = g_uri_parse_relative (base_uri, \\\"/ag\\\", SOUP_HTTP_URI_FLAGS, NULL);\\n    +\\n    +\\t/* an ugly cheat to construct a broken URI, which can be sent from other libs */\\n    +\\tpath = (char *) g_uri_get_path (uri);\\n    +\\tpath[1] = '%';\\n    +\\n    +\\tmsg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\\n    +\\tbody = soup_test_session_async_send (test->session, msg, NULL, &error);\\n    +\\tg_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\\n    +\\tg_assert_null (body);\\n    +\\tg_clear_error (&error);\\n    +\\tg_object_unref (msg);\\n    +\\tg_uri_unref (uri);\\n    +}\\n    +\\n    static gboolean\\n    unpause_message (SoupServerMessage *msg)\\n    {\\n    @@ -1662,6 +1686,10 @@ main (int argc, char **argv)\\n                        setup_session,\\n                        do_connection_closed_test,\\n                        teardown_session);\\n    +        g_test_add (\\\"/http2/broken-pseudo-header\\\", Test, NULL,\\n    +                    setup_session,\\n    +                    do_broken_pseudo_header_test,\\n    +                    teardown_session);\\n    \\n        ret = g_test_run ();\\n    \\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/server/http2/soup-server-message-io-http2.c': ['772:         if (!msg_io)', '773:                 return 0;', '774: ', '775:         io->in_callback++;', '776: ', '777:         switch (frame->hd.type) {', '778:         case NGHTTP2_HEADERS: {', '779:                 char *uri_string;', '780:                 GUri *uri;', '781: ', '782:                 uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);', '783:                 uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);', '784:                 g_free (uri_string);', '785:                 soup_server_message_set_uri (msg_io->msg, uri);', '786:                 g_uri_unref (uri);', '787: ', '788:                 advance_state_from (msg_io, STATE_READ_HEADERS, STATE_READ_DATA);', '789:                 soup_server_message_got_headers (msg_io->msg);', '790:                 break;', '791:         }', '792:         case NGHTTP2_DATA:', '793:                 h2_debug (io, msg_io, \"[RECV] [DATA] window=%d/%d\", nghttp2_session_get_stream_effective_recv_data_length (session, frame->hd.stream_id),', '794:                           nghttp2_session_get_stream_effective_local_window_size (session, frame->hd.stream_id));', '795:                 if (nghttp2_session_get_stream_effective_recv_data_length (session, frame->hd.stream_id) == 0)', '796:                         io_try_write (io);', '797:                 break;', '798:         case NGHTTP2_WINDOW_UPDATE:', '799:                 h2_debug (io, msg_io, \"[RECV] [WINDOW_UPDATE] increment=%d, total=%d\", frame->window_update.window_size_increment,', '800:                           nghttp2_session_get_stream_remote_window_size (session, frame->hd.stream_id));', '801:                 if (nghttp2_session_get_stream_remote_window_size (session, frame->hd.stream_id) > 0)', '802:                         io_try_write (io);', '803:                 break;'], 'tests/http2-test.c': ['98: ', '99:         g_assert_no_error (error);', '100:         g_assert_cmpuint (soup_message_get_status (msg), ==, 204);', '101:         g_assert_cmpuint (g_bytes_get_size (response), ==, 0);', '102: ', '103:         g_uri_unref (uri);', '104:         g_bytes_unref (response);', '105:         g_object_unref (msg);', '106: }', '107: ', '108: static void', '109: do_large_test (Test *test, gconstpointer data)', '110: {', '124:                 response = soup_session_send_and_read (test->session, msg, NULL, &error);', '125: ', '126:         g_assert_no_error (error);', '127:         g_assert_cmpuint (g_bytes_get_size (response), ==, (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1);', '128: ', '129:         g_uri_unref (uri);', '130:         g_bytes_unref (response);', '131:         g_object_unref (msg);', '132: }', '133: ', '134: static GBytes *', '135: read_stream_to_bytes_sync (GInputStream *stream)', '136: {', '260:                                           (GAsyncReadyCallback)on_send_and_read_complete, &done);', '261: ', '262:         while (!done)', '263:                 g_main_context_iteration (async_context, FALSE);', '264: ', '265:         g_uri_unref (uri);', '266:         g_object_unref (msg);', '267:         g_object_unref (cancellable);', '268:         g_main_context_unref (async_context);', '269: }', '270: ', '271: static void', '272: do_one_cancel_after_send_request_test (SoupSession *session,', '273:                                        gboolean     reuse_cancellable,', '349: ', '350:         g_bytes_unref (response_bytes);', '351:         g_object_unref (response);', '352:         g_bytes_unref (bytes);', '353:         g_object_unref (msg);', '354:         g_uri_unref (uri);', '355: }', '356: ', '357: static void', '358: do_post_large_sync_test (Test *test, gconstpointer data)', '359: {', '383: ', '384:         g_bytes_unref (response_bytes);', '385:         g_object_unref (response);', '386:         g_bytes_unref (bytes);', '387:         g_object_unref (msg);', '388:         g_uri_unref (uri);', '389: }', '390: ', '391: static void', '392: do_post_async_test (Test *test, gconstpointer data)', '393: {', '410: ', '411:         g_bytes_unref (response);', '412:         g_bytes_unref (bytes);', '413:         g_main_context_unref (async_context);', '414:         g_object_unref (msg);', '415:         g_uri_unref (uri);', '416: }', '417: ', '418: static void', '419: do_post_large_async_test (Test *test, gconstpointer data)', '420: {', '444: ', '445:         g_bytes_unref (response);', '446:         g_bytes_unref (bytes);', '447:         g_main_context_unref (async_context);', '448:         g_object_unref (msg);', '449:         g_uri_unref (uri);', '450: }', '451: ', '452: static void', '453: do_post_blocked_async_test (Test *test, gconstpointer data)', '454: {', '469:         while (!response) {', '470:                 // Let it iterate for a bit waiting on blocked data', '471:                 if (soup_body_input_stream_http2_is_blocked (SOUP_BODY_INPUT_STREAM_HTTP2 (in_stream))) {', '472:                         soup_body_input_stream_http2_add_data (SOUP_BODY_INPUT_STREAM_HTTP2 (in_stream), (guint8*)\" Part 2\", 8);', '473:                         soup_body_input_stream_http2_complete (SOUP_BODY_INPUT_STREAM_HTTP2 (in_stream));', '474:                 }', '475:                 g_main_context_iteration (async_context, TRUE);', '476:         }', '477: ', '478:         g_assert_cmpstr (g_bytes_get_data (response, NULL), ==, \"Part 1 - Part 2\");', '479: ', '480:         g_bytes_unref (response);', '481:         g_object_unref (in_stream);', '482:         g_main_context_unref (async_context);', '483:         g_object_unref (msg);', '484:         g_uri_unref (uri);', '485: }', '486: ', '487: static void', '488: do_post_file_async_test (Test *test, gconstpointer data)', '489: {', '510:         g_bytes_unref (response);', '511:         g_object_unref (in_stream);', '512:         g_object_unref (in_file);', '513:         g_main_context_unref (async_context);', '514:         g_object_unref (msg);', '515:         g_uri_unref (uri);', '516: }', '517: ', '518: static gboolean', '519: on_delayed_auth (SoupAuth *auth)', '520: {', '548:         g_assert_no_error (error);', '549:         g_assert_cmpstr (g_bytes_get_data (response, NULL), ==, \"Authenticated\");', '550: ', '551:         g_bytes_unref (response);', '552:         g_object_unref (msg);', '553:         g_uri_unref (uri);', '554: }', '555: ', '556: typedef struct {', '557:         int connection;', '558:         int stream;', '599:                 response = soup_session_send_and_read (test->session, msg, NULL, &error);', '600: ', '601:         g_assert_no_error (error);', '602:         g_assert_cmpuint (g_bytes_get_size (response), ==, (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1);', '603: ', '604:         g_uri_unref (uri);', '605:         g_bytes_unref (response);', '606:         g_object_unref (msg);', '607: }', '608: ', '609: static void', '610: do_flow_control_multi_message_async_test (Test *test, gconstpointer data)', '611: {', '628:                 g_main_context_iteration (NULL, TRUE);', '629: ', '630:         g_assert_cmpuint (g_bytes_get_size (response1), ==, (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1);', '631:         g_assert_cmpuint (g_bytes_get_size (response2), ==, (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1);', '632: ', '633:         g_uri_unref (uri);', '634:         g_bytes_unref (response1);', '635:         g_bytes_unref (response2);', '636:         g_object_unref (msg1);', '637:         g_object_unref (msg2);', '638: }', '639: ', '640: static SoupConnection *last_connection;', '641: ', '642: static void', '691: ', '692:         for (unsigned int i = 0; i < N_TESTS; ++i) {', '693:                 SoupMessage *msg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);', '694:                 soup_session_send_async (test->session, msg, G_PRIORITY_DEFAULT, NULL, on_send_ready, &complete_count);', '695:                 g_object_unref (msg);', '696:         }', '697: ', '698:         while (complete_count != N_TESTS) {', '699:                 g_main_context_iteration (async_context, TRUE);', '700:         }', '701: ', '702:         /* After no messages reference the connection it should be IDLE and reusable */', '703:         g_assert_cmpuint (soup_connection_get_state (last_connection), ==, SOUP_CONNECTION_IDLE);', '704:         SoupMessage *msg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);', '706:         g_object_unref (msg);', '707: ', '708:         while (complete_count != N_TESTS + 1)', '709:                 g_main_context_iteration (async_context, TRUE);', '710: ', '711:         g_uri_unref (uri);', '712:         g_main_context_unref (async_context);', '713: }', '714: ', '715: static void', '716: do_misdirected_request_test (Test *test, gconstpointer data)', '717: {', '727:         g_assert_no_error (error);', '728:         g_assert_cmpstr (g_bytes_get_data (response, NULL), ==, \"Success!\");', '729: ', '730:         g_bytes_unref (response);', '731:         g_object_unref (msg);', '732:         g_uri_unref (uri);', '733: }', '734: ', '735: static void', '736: log_printer (SoupLogger *logger,', '737:              SoupLoggerLogLevel level,', '770:         g_assert_cmpstr (g_bytes_get_data (response, NULL), ==, \"Test\");', '771:         g_assert_true (has_logged_body);', '772: ', '773:         g_bytes_unref (response);', '774:         g_object_unref (msg);', '775:         g_uri_unref (uri);', '776: }', '777: ', '778: static void', '779: msg_got_body_data_cb (SoupMessage *msg,', '780:                       guint        chunk_size,', '818:         g_assert_cmpuint (soup_message_metrics_get_response_body_bytes_received (metrics), ==, response_body_bytes_received);', '819: ', '820:         g_bytes_unref (response);', '821:         g_bytes_unref (bytes);', '822:         g_object_unref (msg);', '823:         g_uri_unref (uri);', '824: }', '825: ', '826: static void', '827: metrics_test_network_event_cb (SoupMessage       *msg,', '828:                                GSocketClientEvent event,', '854:                 g_assert_cmpuint (soup_message_metrics_get_connect_end (metrics), >=, soup_message_metrics_get_connect_start (metrics));', '855:                 g_assert_cmpuint (soup_message_metrics_get_connect_end (metrics), >=, soup_message_metrics_get_tls_start (metrics));', '856:                 break;', '857:         default:', '858:                 return;', '859:         }', '860: ', '861:         *network_event_called += 1;', '862: }', '863: ', '864: static void', '865: metrics_test_message_starting_cb (SoupMessage *msg,', '866:                                   gboolean    *starting_called)', '949:                 g_assert_cmpuint (soup_message_metrics_get_dns_start (metrics), ==, 0);', '950:                 g_assert_cmpuint (soup_message_metrics_get_dns_end (metrics), ==, 0);', '951:                 g_assert_cmpuint (soup_message_metrics_get_connect_start (metrics), ==, 0);', '952:                 g_assert_cmpuint (soup_message_metrics_get_tls_start (metrics), ==, 0);', '953:                 g_assert_cmpuint (soup_message_metrics_get_connect_end (metrics), ==, 0);', '954:         }', '955:         g_assert_cmpuint (soup_message_metrics_get_request_start (metrics), >, 0);', '956:         g_assert_cmpuint (soup_message_metrics_get_response_start (metrics), >, 0);', '957:         g_assert_cmpuint (soup_message_metrics_get_response_end (metrics), >, 0);', '958:         g_object_unref (msg);', '959: }', '960: ', '961: static void', '962: do_metrics_time_test (Test *test, gconstpointer data)', '963: {', '1028:                 body = soup_test_session_async_send (test->session, msg, NULL, &error);', '1029:                 g_assert_no_error (error);', '1030:                 g_assert_cmpstr (g_bytes_get_data (body, NULL), ==, \"Hello world\");', '1031:                 g_bytes_unref (body);', '1032:                 g_object_unref (msg);', '1033:         }', '1034: }', '1035: ', '1036: static void', '1037: do_invalid_header_received_test (Test *test, gconstpointer data)', '1038: {', '1052: ', '1053:         g_assert_null (response);', '1054:         g_error_matches (error, G_IO_ERROR, G_IO_ERROR_FAILED);', '1055:         g_assert_cmpstr (error->message, ==, \"HTTP/2 Error: PROTOCOL_ERROR\");', '1056:         g_clear_error (&error);', '1057:         g_uri_unref (uri);', '1058:         g_object_unref (msg);', '1059: }', '1060: ', '1061: #ifdef HAVE_NGHTTP2_OPTION_SET_NO_RFC9113_LEADING_AND_TRAILING_WS_VALIDATION', '1062: static void', '1063: do_invalid_header_rfc9113_received_test (Test *test, gconstpointer data)', '1078: ', '1079:         g_assert_nonnull (response);', '1080:         g_assert_no_error (error);', '1081:         g_clear_error (&error);', '1082:         g_object_unref (msg);', '1083:         g_uri_unref (uri);', '1084: }', '1085: #endif', '1086: ', '1087: static void', '1088: content_sniffed (SoupMessage *msg,', '1164: ', '1165:         g_free (sniffed_type);', '1166:         g_object_unref (stream);', '1167:         g_bytes_unref (bytes);', '1168:         g_object_unref (msg);', '1169:         g_uri_unref (uri);', '1170: }', '1171: ', '1172: static void', '1173: do_sniffer_async_test (Test *test, gconstpointer data)', '1174: {', '1212:         msg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);', '1213:         response = soup_test_session_async_send (test->session, msg, NULL, &error);', '1214:         g_assert_null (response);', '1215:         g_assert_error (error, G_IO_ERROR, G_IO_ERROR_TIMED_OUT);', '1216:         g_object_unref (msg);', '1217:         g_uri_unref (uri);', '1218: }', '1219: ', '1220: static void', '1221: do_connection_closed_test (Test *test, gconstpointer data)', '1222: {', '1223:         GUri *uri;', '1224:         SoupMessage *msg;', '1225:         GInputStream *stream;', '1230:         stream = soup_session_send (test->session, msg, NULL, &error);', '1231:         g_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);', '1232:         g_clear_error (&error);', '1233:         g_clear_object (&stream);', '1234:         g_object_unref (msg);', '1235:         g_uri_unref (uri);', '1236: }', '1237: ', '1238: static gboolean', '1239: unpause_message (SoupServerMessage *msg)', '1240: {', '1342:         } else if (strcmp (path, \"/close\") == 0) {', '1343:                 SoupServerConnection *conn;', '1344:                 int fd;', '1345: ', '1346:                 conn = soup_server_message_get_connection (msg);', '1347:                 fd = g_socket_get_fd (soup_server_connection_get_socket (conn));', '1348: #ifdef G_OS_WIN32', '1349:                 shutdown (fd, SD_SEND);', '1350: #else', '1351:                 shutdown (fd, SHUT_WR);', '1352: #endif', '1353: ', '1354:                 soup_server_message_set_response (msg, \"text/plain\",', '1355:                                                   SOUP_MEMORY_STATIC,', '1356:                                                   \"Success!\", 8);', '1357:         }', '1358: }', '1359: ', '1360: static gboolean', '1361: server_basic_auth_callback (SoupAuthDomain    *auth_domain,', '1362:                             SoupServerMessage *msg,', '1363:                             const char        *username,', '1364:                             const char        *password,', '1365:                             gpointer           data)', '1366: {', '1367:         if (strcmp (username, \"username\") != 0)', '1368:                 return FALSE;', '1369: ', '1370:         return strcmp (password, \"password\") == 0;', '1371: }', '1372: ', '1373: int', '1374: main (int argc, char **argv)', '1375: {', '1376:         SoupServer *server;', '1377:         SoupAuthDomain *auth;', '1378: \\tint ret;', '1379: ', '1380: \\ttest_init (argc, argv, NULL);', '1381: ', '1382:         if (!tls_available)', '1383:                 return 0;', '1384: ', '1385:         server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD | SOUP_TEST_SERVER_HTTP2);', '1386:         auth = soup_auth_domain_basic_new (\"realm\", \"http2-test\",', '1387:                                            \"auth-callback\", server_basic_auth_callback,', '1392: ', '1393:         soup_server_add_handler (server, NULL, server_handler, NULL, NULL);', '1394:         base_uri = soup_test_server_get_uri (server, \"https\", \"127.0.0.1\");', '1395: ', '1396:         g_test_add (\"/http2/basic/async\", Test, NULL,', '1397:                     setup_session,', '1398:                     do_basic_async_test,', '1399:                     teardown_session);', '1400:         g_test_add (\"/http2/basic/sync\", Test, NULL,', '1401:                     setup_session,', '1402:                     do_basic_sync_test,', '1403:                     teardown_session);', '1404:         g_test_add (\"/http2/no_content/async\", Test, NULL,', '1405:                     setup_session,', '1406:                     do_no_content_async_test,', '1407:                     teardown_session);', '1408:         g_test_add (\"/http2/large/async\", Test, GINT_TO_POINTER (TRUE),', '1409:                     setup_session,', '1410:                     do_large_test,', '1411:                     teardown_session);', '1412:         g_test_add (\"/http2/large/sync\", Test, GINT_TO_POINTER (FALSE),', '1413:                     setup_session,', '1414:                     do_large_test,', '1415:                     teardown_session);', '1416:         g_test_add (\"/http2/multiplexing/async\", Test, NULL,', '1417:                     setup_session,', '1418:                     do_multi_message_async_test,', '1419:                     teardown_session);', '1420:         g_test_add (\"/http2/post/async\", Test, NULL,', '1421:                     setup_session,', '1422:                     do_post_async_test,', '1423:                     teardown_session);', '1424:         g_test_add (\"/http2/post/sync\", Test, NULL,', '1425:                     setup_session,', '1426:                     do_post_sync_test,', '1427:                     teardown_session);', '1428:         g_test_add (\"/http2/post/large/sync\", Test, NULL,', '1429:                     setup_session,', '1430:                     do_post_large_sync_test,', '1431:                     teardown_session);', '1432:         g_test_add (\"/http2/post/large/async\", Test, NULL,', '1433:                     setup_session,', '1434:                     do_post_large_async_test,', '1435:                     teardown_session);', '1436:         g_test_add (\"/http2/post/blocked/async\", Test, NULL,', '1437:                     setup_session,', '1438:                     do_post_blocked_async_test,', '1439:                     teardown_session);', '1440:         g_test_add (\"/http2/post/file/async\", Test, NULL,', '1441:                     setup_session,', '1442:                     do_post_file_async_test,', '1443:                     teardown_session);', '1444:         g_test_add (\"/http2/paused/async\", Test, NULL,', '1445:                     setup_session,', '1446:                     do_paused_async_test,', '1447:                     teardown_session);', '1448:         g_test_add (\"/http2/flow-control/large/async\", Test, GINT_TO_POINTER (TRUE),', '1449:                     setup_session,', '1450:                     do_flow_control_large_test,', '1451:                     teardown_session);', '1452:         g_test_add (\"/http2/flow-control/large/sync\", Test, GINT_TO_POINTER (TRUE),', '1453:                     setup_session,', '1454:                     do_flow_control_large_test,', '1455:                     teardown_session);', '1456:         g_test_add (\"/http2/flow-control/multiplex/async\", Test, NULL,', '1457:                     setup_session,', '1458:                     do_flow_control_multi_message_async_test,', '1459:                     teardown_session);', '1460:         g_test_add (\"/http2/connections\", Test, NULL,', '1461:                     setup_session,', '1462:                     do_connections_test,', '1463:                     teardown_session);', '1464:         g_test_add (\"/http2/misdirected_request\", Test, NULL,', '1465:                     setup_session,', '1466:                     do_misdirected_request_test,', '1467:                     teardown_session);', '1468:         g_test_add (\"/http2/logging\", Test, NULL,', '1469:                     setup_session,', '1470:                     do_logging_test,', '1471:                     teardown_session);', '1472:         g_test_add (\"/http2/metrics/size\", Test, NULL,', '1473:                     setup_session,', '1474:                     do_metrics_size_test,', '1475:                     teardown_session);', '1476:         g_test_add (\"/http2/metrics/time\", Test, NULL,', '1477:                     setup_session,', '1478:                     do_metrics_time_test,', '1479:                     teardown_session);', '1480:         g_test_add (\"/http2/preconnect\", Test, NULL,', '1481:                     setup_session,', '1482:                     do_preconnect_test,', '1483:                     teardown_session);', '1484:         g_test_add (\"/http2/cancellation\", Test, NULL,', '1485:                     setup_session,', '1486:                     do_cancellation_test,', '1487:                     teardown_session);', '1488:         g_test_add (\"/http2/cancellation-after-send\", Test, NULL,', '1489:                     setup_session,', '1490:                     do_cancellation_after_send_test,', '1491:                     teardown_session);', '1492:         g_test_add (\"/http2/invalid-header\", Test, NULL,', '1493:                     setup_session,', '1494:                     do_invalid_header_test,', '1495:                     teardown_session);', '1496:         g_test_add (\"/http2/invalid-header-received/async\", Test, GINT_TO_POINTER (TRUE),', '1497:                     setup_session,', '1498:                     do_invalid_header_received_test,', '1499:                     teardown_session);', '1500:         g_test_add (\"/http2/invalid-header-received/sync\", Test, GINT_TO_POINTER (FALSE),', '1501:                     setup_session,', '1502:                     do_invalid_header_received_test,', '1503:                     teardown_session);', '1504: #ifdef HAVE_NGHTTP2_OPTION_SET_NO_RFC9113_LEADING_AND_TRAILING_WS_VALIDATION', '1505:         g_test_add (\"/http2/invalid-header-rfc9113-received/async\", Test, GINT_TO_POINTER (TRUE),', '1506:                     setup_session,', '1507:                     do_invalid_header_rfc9113_received_test,', '1508:                     teardown_session);', '1509:         g_test_add (\"/http2/invalid-header-rfc9113-received/sync\", Test, GINT_TO_POINTER (FALSE),', '1510:                     setup_session,', '1511:                     do_invalid_header_rfc9113_received_test,', '1512:                     teardown_session);', '1513: #endif', '1514:         g_test_add (\"/http2/sniffer/with-sniffer/async\", Test, GINT_TO_POINTER (TRUE),', '1515:                     setup_session,', '1516:                     do_sniffer_async_test,', '1517:                     teardown_session);', '1518:         g_test_add (\"/http2/sniffer/no-sniffer/async\", Test, GINT_TO_POINTER (FALSE),', '1519:                     setup_session,', '1520:                     do_sniffer_async_test,', '1521:                     teardown_session);', '1522:         g_test_add (\"/http2/sniffer/with-sniffer/sync\", Test, GINT_TO_POINTER (TRUE),', '1523:                     setup_session,', '1524:                     do_sniffer_sync_test,', '1525:                     teardown_session);', '1526:         g_test_add (\"/http2/sniffer/no-sniffer/sync\", Test, GINT_TO_POINTER (FALSE),', '1527:                     setup_session,', '1528:                     do_sniffer_sync_test,', '1529:                     teardown_session);', '1530:         g_test_add (\"/http2/timeout\", Test, NULL,', '1531:                     setup_session,', '1532:                     do_timeout_test,', '1533:                     teardown_session);', '1534:         g_test_add (\"/http2/connection-closed\", Test, NULL,', '1535:                     setup_session,', '1536:                     do_connection_closed_test,', '1537:                     teardown_session);', '1538: ', '1539: \\tret = g_test_run ();', '1540: ', '1541:         g_uri_unref (base_uri);']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From a792b23ab87cacbf4dd9462bf7b675fa678efbae Mon Sep 17 00:00:00 2001\nFrom: Milan Crha <mcrha@redhat.com>\nDate: Tue, 15 Apr 2025 09:59:05 +0200\nSubject: [PATCH] soup-server-http2: Check validity of the constructed\n connection URI\n\nThe HTTP/2 pseudo-headers can contain invalid values, which the GUri rejects\nand returns NULL, but the soup-server did not check the validity and could\nabort the server itself later in the code.\n\nCloses #429\n---\n .../http2/soup-server-message-io-http2.c      |  4 +++\n tests/http2-test.c                            | 28 +++++++++++++++++++\n 2 files changed, 32 insertions(+)\n\ndiff --git a/libsoup/server/http2/soup-server-message-io-http2.c b/libsoup/server/http2/soup-server-message-io-http2.c\nindex 943ecfd3..f1fe2d5c 100644\n--- a/libsoup/server/http2/soup-server-message-io-http2.c\n+++ b/libsoup/server/http2/soup-server-message-io-http2.c\n@@ -771,9 +771,13 @@ on_frame_recv_callback (nghttp2_session     *session,\n                 char *uri_string;\n                 GUri *uri;\n \n+\t\tif (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n+\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n                 uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n                 uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n                 g_free (uri_string);\n+\t\tif (uri == NULL)\n+\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n                 soup_server_message_set_uri (msg_io->msg, uri);\n                 g_uri_unref (uri);\n \ndiff --git a/tests/http2-test.c b/tests/http2-test.c\nindex 5b6da5e4..ec7972fe 100644\n--- a/tests/http2-test.c\n+++ b/tests/http2-test.c\n@@ -1341,6 +1341,30 @@ do_connection_closed_test (Test *test, gconstpointer data)\n         g_uri_unref (uri);\n }\n \n+static void\n+do_broken_pseudo_header_test (Test *test, gconstpointer data)\n+{\n+\tchar *path;\n+\tSoupMessage *msg;\n+\tGUri *uri;\n+\tGBytes *body = NULL;\n+\tGError *error = NULL;\n+\n+\turi = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n+\n+\t/* an ugly cheat to construct a broken URI, which can be sent from other libs */\n+\tpath = (char *) g_uri_get_path (uri);\n+\tpath[1] = '%';\n+\n+\tmsg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n+\tbody = soup_test_session_async_send (test->session, msg, NULL, &error);\n+\tg_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n+\tg_assert_null (body);\n+\tg_clear_error (&error);\n+\tg_object_unref (msg);\n+\tg_uri_unref (uri);\n+}\n+\n static gboolean\n unpause_message (SoupServerMessage *msg)\n {\n@@ -1662,6 +1686,10 @@ main (int argc, char **argv)\n                     setup_session,\n                     do_connection_closed_test,\n                     teardown_session);\n+        g_test_add (\"/http2/broken-pseudo-header\", Test, NULL,\n+                    setup_session,\n+                    do_broken_pseudo_header_test,\n+                    teardown_session);\n \n \tret = g_test_run ();\n \n-- \nGitLab\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32053": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. A vulnerability in sniff_feed_or_html() and skip_insignificant_space() functions may lead to a heap buffer over-read.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From eaed42ca8d40cd9ab63764e3d63641180505f40a Mon Sep 17 00:00:00 2001\\n    From: Ar Jun <pkillarjun@protonmail.com>\\n    Date: Mon, 18 Nov 2024 14:59:51 -0600\\n    Subject: [PATCH] Fix heap buffer overflow in\\n    soup-content-sniffer.c:sniff_feed_or_html()\\n\\n    ---\\n    libsoup/content-sniffer/soup-content-sniffer.c | 4 ++--\\n    1 file changed, 2 insertions(+), 2 deletions(-)\\n\\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\\n    index b62e4888..5a181ff1 100644\\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\\n    @@ -641,7 +641,7 @@ skip_insignificant_space (const char *resource, int *pos, int resource_length)\\n            (resource[*pos] == '\\r')) {\\n            *pos = *pos + 1;\\n    \\n    -\\t\\tif (*pos > resource_length)\\n    +\\t\\tif (*pos >= resource_length)\\n                return TRUE;\\n        }\\n    \\n    @@ -704,7 +704,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\\n            do {\\n                pos++;\\n    \\n    -\\t\\t\\tif (pos > resource_length)\\n    +\\t\\t\\tif ((pos + 1) > resource_length)\\n                    goto text_html;\\n            } while (resource[pos] != '>');\\n    \\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/content-sniffer/soup-content-sniffer.c': ['642: {', '643:         if (*pos >= resource_length)', '644: \\t        return TRUE;', '645: ', \"646: \\twhile ((resource[*pos] == '\\\\x09') ||\", \"647: \\t       (resource[*pos] == '\\\\x20') ||\", \"648: \\t       (resource[*pos] == '\\\\x0A') ||\", \"649: \\t       (resource[*pos] == '\\\\x0D')) {\", '650: \\t\\t*pos = *pos + 1;', '651: ', '652: \\t\\tif (*pos > resource_length)', '653: \\t\\t\\treturn TRUE;', '654: \\t}', '655: ', '656: \\treturn FALSE;', '657: }', '658: ', '659: static char*', '660: sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)', '661: {', '662: \\tgsize resource_length;', '663: \\tconst char *resource = g_bytes_get_data (buffer, &resource_length);', '664: \\tresource_length = MIN (512, resource_length);', '665: \\tgsize pos = 0;', '704: ', '705: \\tif (pos > resource_length)', '706: \\t\\tgoto text_html;', '707: ', \"708: \\tif (resource[pos] == '!') {\", '709: \\t\\tdo {', '710: \\t\\t\\tpos++;', '711: ', '712: \\t\\t\\tif (pos > resource_length)', '713: \\t\\t\\t\\tgoto text_html;', \"714: \\t\\t} while (resource[pos] != '>');\", '715: ', '716: \\t\\tpos++;', '717: ', '718: \\t\\tgoto look_for_tag;', \"719: \\t} else if (resource[pos] == '?') {\", '720: \\t\\tdo {', '721: \\t\\t\\tpos++;', '722: ', '723: \\t\\t\\tif ((pos + 1) > resource_length)', '724: \\t\\t\\t\\tgoto text_html;', '725: \\t\\t} while (!data_has_prefix (resource + pos, \"?>\", resource_length - pos));', '726: ', '727: \\t\\tpos = pos + 2;', '728: ']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From eaed42ca8d40cd9ab63764e3d63641180505f40a Mon Sep 17 00:00:00 2001\nFrom: Ar Jun <pkillarjun@protonmail.com>\nDate: Mon, 18 Nov 2024 14:59:51 -0600\nSubject: [PATCH] Fix heap buffer overflow in\n soup-content-sniffer.c:sniff_feed_or_html()\n\nUpstream patch reference: https://gitlab.gnome.org/GNOME/libsoup/-/commit/eaed42ca8d40cd9ab63764e3d63641180505f40a\n---\n libsoup/content-sniffer/soup-content-sniffer.c | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\nindex b62e4888..5a181ff1 100644\n--- a/libsoup/content-sniffer/soup-content-sniffer.c\n+++ b/libsoup/content-sniffer/soup-content-sniffer.c\n@@ -641,7 +641,7 @@ skip_insignificant_space (const char *resource, int *pos, int resource_length)\n \t       (resource[*pos] == '\\x0D')) {\n \t\t*pos = *pos + 1;\n \n-\t\tif (*pos > resource_length)\n+\t\tif (*pos >= resource_length)\n \t\t\treturn TRUE;\n \t}\n \n@@ -704,7 +704,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n \t\tdo {\n \t\t\tpos++;\n \n-\t\t\tif (pos > resource_length)\n+\t\t\tif ((pos + 1) > resource_length)\n \t\t\t\tgoto text_html;\n \t\t} while (resource[pos] != '>');\n \n-- \nGitLab\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32913": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup, where the soup_message_headers_get_content_disposition() function is vulnerable to a NULL pointer dereference. This flaw allows a malicious HTTP peer to crash a libsoup client or server that uses this function.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From f4a761fb66512fff59798765e8ac5b9e57dceef0 Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Fri, 27 Dec 2024 18:00:39 -0600\\n    Subject: [PATCH] soup_message_headers_get_content_disposition: strdup\\n    truncated filenames\\n\\n    This table frees the strings it contains.\\n    ---\\n    libsoup/soup-message-headers.c | 2 +-\\n    tests/header-parsing-test.c    | 1 +\\n    2 files changed, 2 insertions(+), 1 deletion(-)\\n\\n    diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\\n    index 04f4c302..ee7a3cb1 100644\\n    --- a/libsoup/soup-message-headers.c\\n    +++ b/libsoup/soup-message-headers.c\\n    @@ -1664,7 +1664,7 @@ soup_message_headers_get_content_disposition (SoupMessageHeaders  *hdrs,\\n                            char *filename = strrchr (orig_value, '/');\\n    \\n                            if (filename)\\n    -                                g_hash_table_insert (*params, g_strdup (orig_key), filename + 1);\\n    +                                g_hash_table_insert (*params, g_strdup (orig_key), g_strdup (filename + 1));\\n                    } else {\\n                            /* filename with no value isn't valid. */\\n                            g_hash_table_remove (*params, \\\"filename\\\");\\n    diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\\n    index d0b360c8..07ea2866 100644\\n    --- a/tests/header-parsing-test.c\\n    +++ b/tests/header-parsing-test.c\\n    @@ -1150,6 +1150,7 @@ do_content_disposition_tests (void)\\n            soup_test_assert (FALSE, \\\"empty filename decoding FAILED\\\");\\n            return;\\n        }\\n    +        g_free (disposition);\\n            g_assert_false (g_hash_table_contains (params, \\\"filename\\\"));\\n        g_hash_table_destroy (params);\\n    \\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-message-headers.c': ['1606: \\t/* If there is a filename parameter, make sure it contains', '1607: \\t * only a single path component', '1608: \\t */', '1609: \\tif (params && g_hash_table_lookup_extended (*params, \"filename\",', '1610: \\t\\t\\t\\t\\t\\t    &orig_key, &orig_value)) {', \"1611: \\t\\tchar *filename = strrchr (orig_value, '/');\", '1612: ', '1613: \\t\\tif (filename)', '1614: \\t\\t\\tg_hash_table_insert (*params, g_strdup (orig_key), filename + 1);', '1615: \\t}', '1616: \\treturn TRUE;', '1617: }'], 'tests/header-parsing-test.c': ['858: \\tfor (i = 0, h = header_names; headers[i].name && h; i++, h = h->next) {', '859: \\t\\tg_assert (g_ascii_strcasecmp (h->data, headers[i].name) == 0);', '860: ', '861: \\t\\tvalue = soup_message_headers_get_list (hdrs, headers[i].name);', '862: \\t\\tg_assert_cmpstr (value, ==, headers[i].value);', '863: \\t}', '864: \\t/* If we have remaining fields to check, they should return NULL */', '865: \\tfor (; headers[i].name; i++) {', '866: \\t\\tvalue = soup_message_headers_get_list (hdrs, headers[i].name);', '867: \\t\\tg_assert_null (value);', '868: \\t}', '869: \\tg_assert_null (headers[i].name);', '870: \\tg_assert_null (h);', '871: ', '872: \\tg_slist_free (header_names);', '873: }', '874: ', '875: static void', '876: do_request_tests (void)', '877: {', '900: \\t\\t\\tg_assert_cmpstr (method, ==, reqtests[i].method);', '901: \\t\\t\\tg_assert_cmpstr (path, ==, reqtests[i].path);', '902: \\t\\t\\tg_assert_cmpint (version, ==, reqtests[i].version);', '903: ', '904: \\t\\t\\tcheck_headers (reqtests[i].headers, headers);', '905: \\t\\t}', '906: ', '907: \\t\\tg_free (method);', '908: \\t\\tg_free (path);', '909: \\t\\tsoup_message_headers_unref (headers);', '910: \\t}', '911: }', '912: ', '913: static void', '914: do_response_tests (void)', '915: {', '941: \\t\\t} else', '942: \\t\\t\\tg_assert_null (resptests[i].reason_phrase);', '943: ', '944: \\t\\tg_free (reason_phrase);', '945: \\t\\tsoup_message_headers_unref (headers);', '946: \\t}', '947: }', '948: ', '949: static void', '950: do_qvalue_tests (void)', '951: {', '968: \\t\\t\\t    !g_str_equal (acceptable->data, qvaluetests[i].acceptable[0]) &&', '969: \\t\\t\\t    g_str_equal (acceptable->data, qvaluetests[i].acceptable[1])) {', '970: \\t\\t\\t\\tgpointer tmp = acceptable->data;', '971: \\t\\t\\t\\tacceptable->data = acceptable->next->data;', '972: \\t\\t\\t\\tacceptable->next->data = tmp;', '973: \\t\\t\\t}', '974: ', '975: \\t\\t\\tfor (iter = acceptable, j = 0; iter; iter = iter->next, j++) {', '976: \\t\\t\\t\\tdebug_printf (1, \"%s \", (char *)iter->data);', '977: \\t\\t\\t\\tg_assert_cmpstr (iter->data, ==, qvaluetests[i].acceptable[j]);', '978: \\t\\t\\t}', '979: \\t\\t\\tdebug_printf (1, \"\\\\n\");', '980: \\t\\t\\tsoup_header_free_list (acceptable);', '981: \\t\\t} else', '982: \\t\\t\\tdebug_printf (1, \"(none)\\\\n\");', '984: \\t\\tdebug_printf (1, \"  unacceptable: \");', '985: \\t\\tif (unacceptable) {', '986: \\t\\t\\tfor (iter = unacceptable, j = 0; iter; iter = iter->next, j++) {', '987: \\t\\t\\t\\tdebug_printf (1, \"%s \", (char *)iter->data);', '988: \\t\\t\\t\\tg_assert_cmpstr (iter->data, ==, qvaluetests[i].unacceptable[j]);', '989: \\t\\t\\t}', '990: \\t\\t\\tdebug_printf (1, \"\\\\n\");', '991: \\t\\t\\tsoup_header_free_list (unacceptable);', '992: \\t\\t} else', '993: \\t\\t\\tdebug_printf (1, \"(none)\\\\n\");', '994: \\t}', '995: }', '996: ', '997: static void', '998: do_param_list_tests (void)', '999: {', '1006: \\t\\tn_params = paramlisttests[i].strict ? 3 : 2;', '1007: \\t\\tg_assert_cmpuint (g_hash_table_size (params), ==, n_params);', '1008: \\t\\tfor (j = 0; j < n_params; j++) {', '1009: \\t\\t\\tg_assert_cmpstr (g_hash_table_lookup (params, paramlisttests[i].results[j].param),', '1010: \\t\\t\\t\\t\\t ==, paramlisttests[i].results[j].value);', '1011: \\t\\t}', '1012: \\t\\tsoup_header_free_param_list (params);', '1013: \\t}', '1014: ', '1015: \\tfor (i = 0; i < num_paramlisttests; i++) {', '1016: \\t\\tparams = soup_header_parse_semi_param_list_strict (paramlisttests[i].header_value);', '1017: \\t\\tif (paramlisttests[i].strict) {', '1019: \\t\\t\\tn_params = 3;', '1020: \\t\\t\\tg_assert_cmpuint (g_hash_table_size (params), ==, n_params);', '1021: \\t\\t\\tfor (j = 0; j < n_params; j++) {', '1022: \\t\\t\\t\\tg_assert_cmpstr (g_hash_table_lookup (params, paramlisttests[i].results[j].param),', '1023: \\t\\t\\t\\t\\t\\t ==, paramlisttests[i].results[j].value);', '1024: \\t\\t\\t}', '1025: \\t\\t\\tsoup_header_free_param_list (params);', '1026: \\t\\t} else {', '1027: \\t\\t\\tg_assert_null (params);', '1028: \\t\\t}', '1029: \\t}', '1030: }', '1031: ', '1032: #define RFC5987_TEST_FILENAME \"t\\\\xC3\\\\xA9st.txt\"', '1033: #define RFC5987_TEST_FALLBACK_FILENAME \"test.txt\"', '1034: ', '1065: \\t\\t\\t\\t     RFC5987_TEST_HEADER_UTF8);', '1066: \\tif (!soup_message_headers_get_content_disposition (hdrs,', '1067: \\t\\t\\t\\t\\t\\t\\t   &disposition,', '1068: \\t\\t\\t\\t\\t\\t\\t   &params)) {', '1069: \\t\\tsoup_test_assert (FALSE, \"UTF-8 decoding FAILED\");', '1070: \\t\\treturn;', '1071: \\t}', '1072: \\tg_free (disposition);', '1073: ', '1074: \\tfilename = g_hash_table_lookup (params, \"filename\");', '1075: \\tg_assert_cmpstr (filename, ==, RFC5987_TEST_FILENAME);', '1081: \\t\\t\\t\\t     RFC5987_TEST_HEADER_ISO);', '1082: \\tif (!soup_message_headers_get_content_disposition (hdrs,', '1083: \\t\\t\\t\\t\\t\\t\\t   &disposition,', '1084: \\t\\t\\t\\t\\t\\t\\t   &params)) {', '1085: \\t\\tsoup_test_assert (FALSE, \"iso-8859-1 decoding FAILED\");', '1086: \\t\\treturn;', '1087: \\t}', '1088: \\tg_free (disposition);', '1089: ', '1090: \\tfilename = g_hash_table_lookup (params, \"filename\");', '1091: \\tg_assert_cmpstr (filename, ==, RFC5987_TEST_FILENAME);', '1097: \\t\\t\\t\\t     RFC5987_TEST_HEADER_FALLBACK);', '1098: \\tif (!soup_message_headers_get_content_disposition (hdrs,', '1099: \\t\\t\\t\\t\\t\\t\\t   &disposition,', '1100: \\t\\t\\t\\t\\t\\t\\t   &params)) {', '1101: \\t\\tsoup_test_assert (FALSE, \"fallback decoding FAILED\");', '1102: \\t\\treturn;', '1103: \\t}', '1104: \\tg_free (disposition);', '1105: ', '1106: \\tfilename = g_hash_table_lookup (params, \"filename\");', '1107: \\tg_assert_cmpstr (filename, ==, RFC5987_TEST_FALLBACK_FILENAME);', '1113: \\t\\t\\t\\t     RFC5987_TEST_HEADER_NO_TYPE);', '1114: \\tif (!soup_message_headers_get_content_disposition (hdrs,', '1115: \\t\\t\\t\\t\\t\\t\\t   &disposition,', '1116: \\t\\t\\t\\t\\t\\t\\t   &params)) {', '1117: \\t\\tsoup_test_assert (FALSE, \"filename-only decoding FAILED\");', '1118: \\t\\treturn;', '1119: \\t}', '1120:         g_assert_null (disposition);', '1121:         filename = g_hash_table_lookup (params, \"filename\");', '1122: \\tg_assert_cmpstr (filename, ==, RFC5987_TEST_FALLBACK_FILENAME);', '1123: \\tg_hash_table_destroy (params);', '1128: \\t\\t\\t\\t     RFC5987_TEST_HEADER_NO_TYPE_2);', '1129: \\tif (!soup_message_headers_get_content_disposition (hdrs,', '1130: \\t\\t\\t\\t\\t\\t\\t   &disposition,', '1131: \\t\\t\\t\\t\\t\\t\\t   &params)) {', '1132: \\t\\tsoup_test_assert (FALSE, \"only two parameters decoding FAILED\");', '1133: \\t\\treturn;', '1134: \\t}', '1135:         g_assert_null (disposition);', '1136:         filename = g_hash_table_lookup (params, \"filename\");', '1137: \\tg_assert_cmpstr (filename, ==, RFC5987_TEST_FALLBACK_FILENAME);', '1138:         parameter2 = g_hash_table_lookup (params, \"foo\");', '1151: ', '1152: \\thdrs = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);', '1153: \\tsoup_multipart_to_message (multipart, hdrs, &buffer);', '1154: \\tsoup_message_headers_unref (hdrs);', '1155: \\tsoup_multipart_free (multipart);', '1156: ', '1157: \\tg_assert_nonnull (strstr (g_bytes_get_data (buffer, NULL), \"filename=\\\\\"token\\\\\"\"));', '1158: ', '1159: \\tg_bytes_unref (buffer);', '1160: }', '1161: ', '1162: #define CONTENT_TYPE_TEST_MIME_TYPE \"text/plain\"', '1163: #define CONTENT_TYPE_TEST_ATTRIBUTE \"charset\"', '1164: #define CONTENT_TYPE_TEST_VALUE     \"US-ASCII\"', '1165: #define CONTENT_TYPE_TEST_HEADER    \"text/plain; charset=US-ASCII\"', '1166: ', '1167: #define CONTENT_TYPE_BAD_HEADER     \"plain text, not text/html\"', '1168: ', '1169: static void', '1170: do_content_type_tests (void)', '1171: {', '1172: \\tSoupMessageHeaders *hdrs;', '1173: \\tGHashTable *params;', '1236: \\t\\tif (i > 0)', '1237: \\t\\t\\tg_string_append (params, \", \");', '1238: \\t\\tsoup_header_g_string_append_param (params,', '1239: \\t\\t\\t\\t\\t\\t   test_params[i].name,', '1240: \\t\\t\\t\\t\\t\\t   test_params[i].value);', '1241: \\t}', '1242: \\tg_assert_cmpstr (params->str, ==, TEST_PARAMS_RESULT);', '1243: \\tg_string_free (params, TRUE);', '1244: }', '1245: ', '1246: static const struct {', '1247: \\tconst char *description, *name, *value;', '1248: } bad_headers[] = {', '1270: \\t\\tg_test_expect_message (\"libsoup\", G_LOG_LEVEL_CRITICAL,', '1271: \\t\\t\\t\\t       \"*soup_message_headers_append*assertion*failed*\");', '1272: \\t\\tsoup_message_headers_append (hdrs, bad_headers[i].name,', '1273: \\t\\t\\t\\t\\t     bad_headers[i].value);', '1274: \\t\\tg_test_assert_expected_messages ();', '1275: \\t}', '1276: \\tsoup_message_headers_unref (hdrs);', '1277: }', '1278: ', '1279: int', '1280: main (int argc, char **argv)', '1281: {']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From 260ce178f526f4b8baaa1cafc6e1e81fab225f53 Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Fri, 27 Dec 2024 18:00:39 -0600\nSubject: [PATCH] soup_message_headers_get_content_disposition: strdup\n truncated filenames\n\nThis table frees the strings it contains.\nLink: https://gitlab.gnome.org/GNOME/libsoup/-/commit/f4a761fb66512fff59798765e8ac5b9e57dceef0.patch\n---\n libsoup/soup-message-headers.c | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\nindex bcee5b9..18cbf98 100644\n--- a/libsoup/soup-message-headers.c\n+++ b/libsoup/soup-message-headers.c\n@@ -1611,7 +1611,7 @@ soup_message_headers_get_content_disposition (SoupMessageHeaders  *hdrs,\n \t\tchar *filename = strrchr (orig_value, '/');\n \n \t\tif (filename)\n-\t\t\tg_hash_table_insert (*params, g_strdup (orig_key), filename + 1);\n+\t\t\tg_hash_table_insert (*params, g_strdup (orig_key), g_strdup (filename + 1));\n \t}\n \treturn TRUE;\n }\n-- \n2.34.1\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32906": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup, where the soup_headers_parse_request() function may be vulnerable to an out-of-bound read. This flaw allows a malicious user to use a specially crafted HTTP request to crash the HTTP server.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From af5b9a4a3945c52b940d5ac181ef51bb12011f1f Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Wed, 12 Feb 2025 11:30:02 -0600\\n    Subject: [PATCH] headers: Handle parsing only newlines\\n\\n    Closes #404\\n    Closes #407\\n    ---\\n    libsoup/soup-headers.c      |  4 ++--\\n    tests/header-parsing-test.c | 13 ++++++++++++-\\n    2 files changed, 14 insertions(+), 3 deletions(-)\\n\\n    diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\\n    index 9d6d00a3..52ef2ece 100644\\n    --- a/libsoup/soup-headers.c\\n    +++ b/libsoup/soup-headers.c\\n    @@ -186,7 +186,7 @@ soup_headers_parse_request (const char          *str,\\n        /* RFC 2616 4.1 \\\"servers SHOULD ignore any empty line(s)\\n        * received where a Request-Line is expected.\\\"\\n        */\\n    -\\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\\n    +\\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\\n            str++;\\n            len--;\\n        }\\n    @@ -371,7 +371,7 @@ soup_headers_parse_response (const char          *str,\\n        * after a response, which we then see prepended to the next\\n        * response on that connection.\\n        */\\n    -\\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\\n    +\\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\\n            str++;\\n            len--;\\n        }\\n    diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\\n    index 10ddb684..4faafbd6 100644\\n    --- a/tests/header-parsing-test.c\\n    +++ b/tests/header-parsing-test.c\\n    @@ -6,10 +6,15 @@ typedef struct {\\n        const char *name, *value;\\n    } Header;\\n    \\n    +/* These are not C strings to ensure going one byte over is not safe. */\\n    static char unterminated_http_version[] = {\\n            'G','E','T',' ','/',' ','H','T','T','P','/','1', '0', '0', '.'\\n    };\\n    \\n    +static char only_newlines[] = {\\n    +        '\\n', '\\n', '\\n', '\\n'\\n    +};\\n    +\\n    static struct RequestTest {\\n        const char *description;\\n        const char *bugref;\\n    @@ -387,7 +392,6 @@ static struct RequestTest {\\n        { { NULL } }\\n        },\\n    \\n    -        /* This couldn't be a C string as going one byte over would have been safe. */\\n        { \\\"Long HTTP version terminating at missing minor version\\\", \\\"https://gitlab.gnome.org/GNOME/libsoup/-/issues/404\\\",\\n        unterminated_http_version, sizeof (unterminated_http_version),\\n        SOUP_STATUS_BAD_REQUEST,\\n    @@ -457,6 +461,13 @@ static struct RequestTest {\\n        SOUP_STATUS_BAD_REQUEST,\\n                NULL, NULL, -1,\\n        { { NULL } }\\n    +\\t},\\n    +\\n    +\\t{ \\\"Only newlines\\\", NULL,\\n    +\\t  only_newlines, sizeof (only_newlines),\\n    +\\t  SOUP_STATUS_BAD_REQUEST,\\n    +           NULL, NULL, -1,\\n    +\\t  { { NULL } }\\n        }\\n    };\\n    static const int num_reqtests = G_N_ELEMENTS (reqtests);\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/soup-headers.c': ['181: \\tunsigned long major_version, minor_version;', '182: \\tchar *p;', '183: ', '184: \\tg_return_val_if_fail (str != NULL, SOUP_STATUS_BAD_REQUEST);', '185: ', '186: \\t/* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)', '187: \\t * received where a Request-Line is expected.\"', '188: \\t */', \"189: \\twhile ((*str == '\\\\r' || *str == '\\\\n') && len > 0) {\", '190: \\t\\tstr++;', '191: \\t\\tlen--;', '192: \\t}', '193: \\tif (!len)', '194: \\t\\treturn SOUP_STATUS_BAD_REQUEST;', '195: ', '196: \\t/* RFC 2616 19.3 \"[servers] SHOULD accept any amount of SP or', '197: \\t * HT characters between [Request-Line] fields\"', '198: \\t */', '199: ', '200: \\tmethod = method_end = str;', \"201: \\twhile (method_end < str + len && *method_end != ' ' && *method_end != '\\\\t')\", '202: \\t\\tmethod_end++;', '203: \\tif (method_end >= str + len)', '204: \\t\\treturn SOUP_STATUS_BAD_REQUEST;', '205: ', '206: \\tpath = method_end;', \"207: \\twhile (path < str + len && (*path == ' ' || *path == '\\\\t'))\", '208: \\t\\tpath++;', '209: \\tif (path >= str + len)', '210: \\t\\treturn SOUP_STATUS_BAD_REQUEST;', '366: \\tSoupHTTPVersion version;', '367: ', '368: \\tg_return_val_if_fail (str != NULL, FALSE);', '369: ', '370: \\t/* Workaround for broken servers that send extra line breaks', '371: \\t * after a response, which we then see prepended to the next', '372: \\t * response on that connection.', '373: \\t */', \"374: \\twhile ((*str == '\\\\r' || *str == '\\\\n') && len > 0) {\", '375: \\t\\tstr++;', '376: \\t\\tlen--;', '377: \\t}', '378: \\tif (!len)', '379: \\t\\treturn FALSE;', '380: ', '381: \\tif (!soup_headers_parse (str, len, headers))', '382: \\t\\treturn FALSE;', '383: ', '384: \\tif (!soup_headers_parse_status_line (str,', '385: \\t\\t\\t\\t\\t     &version,', '386: \\t\\t\\t\\t\\t     status_code,', '387: \\t\\t\\t\\t\\t     reason_phrase))', '388: \\t\\treturn FALSE;', '389: \\tif (ver)', '390: \\t\\t*ver = version;', '391: ', '392: \\t/* RFC 2616 14.10 */', '393: \\tif (version == SOUP_HTTP_1_0)', '394: \\t\\tsoup_message_headers_clean_connection_headers (headers);', '395: '], 'tests/header-parsing-test.c': ['1: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */', '2: ', '3: #include \"test-utils.h\"', '4: ', '5: typedef struct {', '6: \\tconst char *name, *value;', '7: } Header;', '8: ', '9: static struct RequestTest {', '10: \\tconst char *description;', '11: \\tconst char *bugref;', '12: \\tconst char *request;', '13: \\tint length;', '14: \\tguint status;', '15: \\tconst char *method, *path;', '16: \\tSoupHTTPVersion version;', '17: \\tHeader headers[10];', '18: } reqtests[] = {', '19: \\t/**********************/', '20: \\t/*** VALID REQUESTS ***/', '21: \\t/**********************/', '22: ', '23: \\t{ \"HTTP 1.0 request with no headers\", NULL,', '24: \\t  \"GET / HTTP/1.0\\\\r\\\\n\", -1,', '25: \\t  SOUP_STATUS_OK,', '26: \\t  \"GET\", \"/\", SOUP_HTTP_1_0,', '27: \\t  { { NULL } }', '28: \\t},', '29: ', '30: \\t{ \"Req w/ 1 header\", NULL,', '31: \\t  \"GET / HTTP/1.1\\\\r\\\\nHost: example.com\\\\r\\\\n\", -1,', '32: \\t  SOUP_STATUS_OK,', '33: \\t  \"GET\", \"/\", SOUP_HTTP_1_1,', '34: \\t  { { \"Host\", \"example.com\" },', '35: \\t    { NULL }', '36: \\t  }', '37: \\t},', '38: ', '39: \\t{ \"Req w/ 1 header, no leading whitespace\", NULL,', '40: \\t  \"GET / HTTP/1.1\\\\r\\\\nHost:example.com\\\\r\\\\n\", -1,', '41: \\t  SOUP_STATUS_OK,', '174: ', '175: \\t{ \"GET with full URI\", \"667637\",', '176: \\t  \"GET http://example.com HTTP/1.1\\\\r\\\\n\", -1,', '177: \\t  SOUP_STATUS_OK,', '178: \\t  \"GET\", \"http://example.com\", SOUP_HTTP_1_1,', '179: \\t  { { NULL } }', '180: \\t},', '181: ', '182: \\t{ \"GET with full URI in upper-case\", \"667637\",', '183: \\t  \"GET HTTP://example.com HTTP/1.1\\\\r\\\\n\", -1,', '184: \\t  SOUP_STATUS_OK,', '185: \\t  \"GET\", \"HTTP://example.com\", SOUP_HTTP_1_1,', '186: \\t  { { NULL } }', '187: \\t},', '188: ', \"189: \\t/* It's better for this to be passed through: this means a SoupServer\", '190: \\t * could implement ftp-over-http proxying, for instance', '191: \\t */', '192: \\t{ \"GET with full URI of unrecognised scheme\", \"667637\",', '193: \\t  \"GET AbOuT: HTTP/1.1\\\\r\\\\n\", -1,', '194: \\t  SOUP_STATUS_OK,', '195: \\t  \"GET\", \"AbOuT:\", SOUP_HTTP_1_1,', '196: \\t  { { NULL } }', '197: \\t},', '198: ', '199: \\t/****************************/', '200: \\t/*** RECOVERABLE REQUESTS ***/', '201: \\t/****************************/', '362: \\t/*** INVALID REQUESTS ***/', '363: \\t/************************/', '364: ', '365: \\t{ \"HTTP 0.9 request; not supported\", NULL,', '366: \\t  \"GET /\\\\r\\\\n\", -1,', '367: \\t  SOUP_STATUS_BAD_REQUEST,', '368: \\t  NULL, NULL, -1,', '369: \\t  { { NULL } }', '370: \\t},', '371: ', '372: \\t{ \"HTTP 1.2 request (no such thing)\", NULL,', '373: \\t  \"GET / HTTP/1.2\\\\r\\\\n\", -1,', '374: \\t  SOUP_STATUS_HTTP_VERSION_NOT_SUPPORTED,', '375: \\t  NULL, NULL, -1,', '376: \\t  { { NULL } }', '377: \\t},', '378: ', '379: \\t{ \"HTTP 2000 request (no such thing)\", NULL,', '380: \\t  \"GET / HTTP/2000.0\\\\r\\\\n\", -1,', '381: \\t  SOUP_STATUS_HTTP_VERSION_NOT_SUPPORTED,', '382: \\t  NULL, NULL, -1,', '383: \\t  { { NULL } }', '384: \\t},', '385: ', '386: \\t{ \"Non-HTTP request\", NULL,', '387: \\t  \"GET / SOUP/1.1\\\\r\\\\nHost: example.com\\\\r\\\\n\", -1,', '388: \\t  SOUP_STATUS_BAD_REQUEST,', '389: \\t  NULL, NULL, -1,', '390: \\t  { { NULL } }', '391: \\t},', '392: ', '393: \\t{ \"Junk after Request-Line\", NULL,', '394: \\t  \"GET / HTTP/1.1 blah\\\\r\\\\nHost: example.com\\\\r\\\\n\", -1,', '395: \\t  SOUP_STATUS_BAD_REQUEST,', '396: \\t  NULL, NULL, -1,', '397: \\t  { { NULL } }', '398: \\t},', '399: ', '400: \\t{ \"NUL in Method\", NULL,', '401: \\t  \"G\\\\x00T / HTTP/1.1\\\\r\\\\nHost: example.com\\\\r\\\\n\", 37,', '402: \\t  SOUP_STATUS_BAD_REQUEST,', '403: \\t  NULL, NULL, -1,', '404: \\t  { { NULL } }', '405: \\t},', '406: ', '407: \\t{ \"NUL at beginning of Method\", \"666316\",', '408: \\t  \"\\\\x00 / HTTP/1.1\\\\r\\\\nHost: example.com\\\\r\\\\n\", 35,', '409: \\t  SOUP_STATUS_BAD_REQUEST,', '410: \\t  NULL, NULL, -1,', '411: \\t  { { NULL } }', '412: \\t},', '413: ', '414: \\t{ \"NUL in Path\", NULL,', '415: \\t  \"GET /\\\\x00 HTTP/1.1\\\\r\\\\nHost: example.com\\\\r\\\\n\", 38,', '416: \\t  SOUP_STATUS_BAD_REQUEST,', '417: \\t  NULL, NULL, -1,', '418: \\t  { { NULL } }', '419: \\t},', '420: ', '421: \\t{ \"No terminating CRLF\", NULL,', '422: \\t  \"GET / HTTP/1.1\\\\r\\\\nHost: example.com\", -1,', '423: \\t  SOUP_STATUS_BAD_REQUEST,', '424: \\t  NULL, NULL, -1,', '425: \\t  { { NULL } }', '426: \\t},', '427: ', '428: \\t{ \"Unrecognized expectation\", NULL,', '429: \\t  \"GET / HTTP/1.1\\\\r\\\\nHost: example.com\\\\r\\\\nExpect: the-impossible\\\\r\\\\n\", -1,', '430: \\t  SOUP_STATUS_EXPECTATION_FAILED,', '431: \\t  NULL, NULL, -1,', '432: \\t  { { NULL } }', '433: \\t},', '434: ', '435: \\t// https://gitlab.gnome.org/GNOME/libsoup/-/issues/377', '436: \\t{ \"NUL in header name\", NULL,', '437: \\t  \"GET / HTTP/1.1\\\\r\\\\nHost\\\\x00: example.com\\\\r\\\\n\", 36,', '438: \\t  SOUP_STATUS_BAD_REQUEST,', '439: \\t  NULL, NULL, -1,', '440: \\t  { { NULL } }', '441: \\t},', '442: ', '443: \\t{ \"NUL in header value\", NULL,', '444: \\t  \"HTTP/1.1 200 OK\\\\r\\\\nFoo: b\\\\x00\" \"ar\\\\r\\\\n\", 28,', '445: \\t  SOUP_STATUS_BAD_REQUEST,', '446:            NULL, NULL, -1,', '447: \\t  { { NULL } }', '448: \\t}', '449: };', '450: static const int num_reqtests = G_N_ELEMENTS (reqtests);', '451: ', '462: \\t/***********************/', '463: \\t/*** VALID RESPONSES ***/', '464: \\t/***********************/', '465: ', '466: \\t{ \"HTTP 1.0 response w/ no headers\", NULL,', '467: \\t  \"HTTP/1.0 200 ok\\\\r\\\\n\", -1,', '468: \\t  SOUP_HTTP_1_0, SOUP_STATUS_OK, \"ok\",', '469: \\t  { { NULL } }', '470: \\t},', '471: ', '472: \\t{ \"HTTP 1.1 response w/ no headers\", NULL,', '473: \\t  \"HTTP/1.1 200 ok\\\\r\\\\n\", -1,', '474: \\t  SOUP_HTTP_1_1, SOUP_STATUS_OK, \"ok\",', '475: \\t  { { NULL } }', '476: \\t},', '477: ', '478: \\t{ \"Response w/ multi-word Reason-Phrase\", NULL,', '479: \\t  \"HTTP/1.1 400 bad request\\\\r\\\\n\", -1,', '480: \\t  SOUP_HTTP_1_1, SOUP_STATUS_BAD_REQUEST, \"bad request\",', '481: \\t  { { NULL } }', '482: \\t},', '483: ', '484: \\t{ \"Response w/ 1 header\", NULL,', '485: \\t  \"HTTP/1.1 200 ok\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '486: \\t  SOUP_HTTP_1_1, SOUP_STATUS_OK, \"ok\",', '487: \\t  { { \"Foo\", \"bar\" },', '488: \\t    { NULL }', '489: \\t  }', '490: \\t},', '624: \\t/* Tests from Cockpit project */', '625: ', '626: \\t{ \"Response w/ 101 Switching Protocols + spaces after new line\", NULL,', '627: \\t  \"HTTP/1.0 101 Switching Protocols\\\\r\\\\n  \\\\r\\\\n\", 38,', '628: \\t  SOUP_HTTP_1_0, SOUP_STATUS_SWITCHING_PROTOCOLS, \"Switching Protocols\",', '629: \\t  { { NULL } }', '630: \\t},', '631: ', '632: \\t{ \"Response w/ 101 Switching Protocols missing \\\\\\\\r + spaces\", NULL,', '633: \\t  \"HTTP/1.0  101  Switching Protocols\\\\r\\\\n  \\\\r\\\\n\", 40,', '634: \\t  SOUP_HTTP_1_0, SOUP_STATUS_SWITCHING_PROTOCOLS, \"Switching Protocols\",', '635: \\t  { { NULL } }', '636: \\t},', '637: ', '638: \\t{ \"Response w/ 101 Switching Protocols + spaces after & before new line\", NULL,', '639: \\t  \"HTTP/1.1  101  Switching Protocols  \\\\r\\\\n  \\\\r\\\\n\", 42,', '640: \\t  SOUP_HTTP_1_1, SOUP_STATUS_SWITCHING_PROTOCOLS, \"Switching Protocols\",', '641: \\t  { { NULL } }', '642: \\t},', '643: ', '644: \\t/*************************/', '645: \\t/*** INVALID RESPONSES ***/', '646: \\t/*************************/', '647: ', '648: \\t{ \"Invalid HTTP version\", NULL,', '649: \\t  \"HTTP/1.2 200 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '650: \\t  -1, 0, NULL,', '651: \\t  { { NULL } }', '652: \\t},', '653: ', '654: \\t{ \"Non-HTTP response\", NULL,', '655: \\t  \"SOUP/1.1 200 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '656: \\t  -1, 0, NULL,', '657: \\t  { { NULL } }', '658: \\t},', '659: ', '660: \\t{ \"Non-numeric status code\", NULL,', '661: \\t  \"HTTP/1.1 XXX OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '662: \\t  -1, 0, NULL,', '663: \\t  { { NULL } }', '664: \\t},', '665: ', '666: \\t{ \"No status code\", NULL,', '667: \\t  \"HTTP/1.1 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '668: \\t  -1, 0, NULL,', '669: \\t  { { NULL } }', '670: \\t},', '671: ', '672: \\t{ \"One-digit status code\", NULL,', '673: \\t  \"HTTP/1.1 2 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '674: \\t  -1, 0, NULL,', '675: \\t  { { NULL } }', '676: \\t},', '677: ', '678: \\t{ \"Two-digit status code\", NULL,', '679: \\t  \"HTTP/1.1 20 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '680: \\t  -1, 0, NULL,', '681: \\t  { { NULL } }', '682: \\t},', '683: ', '684: \\t{ \"Four-digit status code\", NULL,', '685: \\t  \"HTTP/1.1 2000 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '686: \\t  -1, 0, NULL,', '687: \\t  { { NULL } }', '688: \\t},', '689: ', '690: \\t{ \"Status code < 100\", NULL,', '691: \\t  \"HTTP/1.1 001 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '692: \\t  -1, 0, NULL,', '693: \\t  { { NULL } }', '694: \\t},', '695: ', '696: \\t{ \"Status code > 999\", NULL,', '697: \\t  \"HTTP/1.1 1000 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", -1,', '698: \\t  -1, 0, NULL,', '699: \\t  { { NULL } }', '700: \\t},', '701: ', '702: \\t{ \"NUL at start\", \"666316\",', '703: \\t  \"\\\\x00HTTP/1.1 200 OK\\\\r\\\\nFoo: bar\\\\r\\\\n\", 28,', '704: \\t  -1, 0, NULL,', '705: \\t  { { NULL } }', '706: \\t},', '707: ', '708: \\t{ \"NUL in Reason Phrase\", NULL,', '709: \\t  \"HTTP/1.1 200 O\\\\x00K\\\\r\\\\nFoo: bar\\\\r\\\\n\", 28,', '710: \\t  -1, 0, NULL,', '711: \\t  { { NULL } }', '712: \\t},', '713: ', '714: \\t/* Failing test from Cockpit */', '715: ', '716: \\t{ \"Partial response stops after HTTP/\", NULL,', '717: \\t  \"HTTP/\", -1,', '718: \\t  -1, 0, NULL,', '719: \\t  { { NULL } }', '720: \\t},', '721: ', '722: \\t{ \"Space before HTTP/\", NULL,', '723: \\t  \" HTTP/1.0 101 Switching Protocols\\\\r\\\\n  \", -1,', '724: \\t  -1, 0, NULL,', '725: \\t  { { NULL } }', '726: \\t},', '727: ', '728: \\t{ \"Missing reason\", NULL,', '729: \\t  \"HTTP/1.0  101\\\\r\\\\n  \", -1,', '730: \\t  -1, 0, NULL,', '731: \\t  { { NULL } }', '732: \\t},', '733: ', '734: \\t{ \"Response code containing alphabetic character\", NULL,', '735: \\t  \"HTTP/1.1  1A01  Switching Protocols  \\\\r\\\\n  \", -1,', '736: \\t  -1, 0, NULL,', '737: \\t  { { NULL } }', '738: \\t},', '739: ', '740: \\t{ \"TESTONE\\\\\\\\r\\\\\\\\n\", NULL,', '741: \\t  \"TESTONE\\\\r\\\\n  \", -1,', '742: \\t  -1, 0, NULL,', '743: \\t  { { NULL } }', '744: \\t},', '745: ', '746: \\t{ \"Response w/ 3 headers truncated\", NULL,', '747: \\t  \"HTTP/1.0 200 ok\\\\r\\\\nHeader1: value3\\\\r\\\\nHeader2:  field\\\\r\\\\nHead3:  Anothe\", -1,', '748: \\t  -1, 0, NULL,', '752: ', '753: \\t// https://gitlab.gnome.org/GNOME/libsoup/-/issues/377', '754: \\t{ \"NUL in header name\", NULL,', '755: \\t  \"HTTP/1.1 200 OK\\\\r\\\\nF\\\\x00oo: bar\\\\r\\\\n\", 28,', '756: \\t  -1, 0, NULL,', '757: \\t  { { NULL } }', '758: \\t},', '759: ', '760: \\t{ \"NUL in header value\", \"760832\",', '761: \\t  \"HTTP/1.1 200 OK\\\\r\\\\nFoo: b\\\\x00\" \"ar\\\\r\\\\n\", 28,', '762: \\t  -1, 0, NULL,', '763: \\t  { { NULL } }', '764: \\t},', '765: };', '766: static const int num_resptests = G_N_ELEMENTS (resptests);', '767: ', '768: static struct QValueTest {', '807: \\t{ TRUE,', '808: \\t  \"form-data; name=\\\\\"fieldName\\\\\"; filename=\\\\\"filename.jpg\\\\\"\",', '809: \\t  { { \"form-data\", NULL },', '810: \\t    { \"name\", \"fieldName\" },', '811: \\t    { \"filename\", \"filename.jpg\" },', '812: \\t  },', '813: \\t},', '814: ', '815: \\t{ FALSE,', '816: \\t  \"form-data; form-data; filename=\\\\\"filename.jpg\\\\\"\",', '817: \\t  { { \"form-data\", NULL },', '818: \\t    { \"filename\", \"filename.jpg\" },', '819: \\t  },', '820: \\t},', '821: ', '822: \\t{ FALSE,', '823: \\t  \"attachment; filename*=UTF-8\\'\\'t%C3%A9st.txt; filename=\\\\\"test.txt\\\\\"\",', '824: \\t  { { \"attachment\", NULL },', '825: \\t    { \"filename\", \"t\\\\xC3\\\\xA9st.txt\" },', '826: \\t  },', '827: \\t},', '828: ', '829:         /* This tests invalid UTF-8 data which *should* never be passed here but it was designed to be robust against it. */', '830:         { TRUE,', '831:               \"invalid*=\\\\x69\\\\x27\\\\x27\\\\x93\\\\x93\\\\x93\\\\x93\\\\xff\\\\x61\\\\x61\\\\x61\\\\x61\\\\x61\\\\x61\\\\x61\\\\x62\\\\x63\\\\x64\\\\x65\\\\x0a; filename*=iso-8859-1\\'\\'\\\\x69\\\\x27\\\\x27\\\\x93\\\\x93\\\\x93\\\\x93\\\\xff\\\\x61\\\\x61\\\\x61\\\\x61\\\\x61\\\\x61\\\\x61\\\\x62\\\\x63\\\\x64\\\\x65\\\\x0a; foo\",']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From e0831346d685ee907065fa5e489e133f8ca12013 Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Wed, 12 Feb 2025 11:30:02 -0600\nSubject: [PATCH] headers: Handle parsing only newlines\n\nCloses #404\nCloses #407\n\nLink: https://gitlab.gnome.org/GNOME/libsoup/-/commit/af5b9a4a3945c52b940d5ac181ef51bb12011f1f.patch\n---\n libsoup/soup-headers.c | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\nindex a0cf351..88aafc9 100644\n--- a/libsoup/soup-headers.c\n+++ b/libsoup/soup-headers.c\n@@ -193,7 +193,7 @@ soup_headers_parse_request (const char          *str,\n \t/* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n \t * received where a Request-Line is expected.\"\n \t */\n-\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\n+\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\n \t\tstr++;\n \t\tlen--;\n \t}\n@@ -378,7 +378,7 @@ soup_headers_parse_response (const char          *str,\n \t * after a response, which we then see prepended to the next\n \t * response on that connection.\n \t */\n-\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\n+\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\n \t\tstr++;\n \t\tlen--;\n \t}\n-- \n2.34.1\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32909": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup. SoupContentSniffer may be vulnerable to a NULL pointer dereference in the sniff_mp4 function. The HTTP server may cause the libsoup client to crash.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From ba4c3a6f988beff59e45801ab36067293d24ce92 Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Wed, 8 Jan 2025 16:30:17 -0600\\n    Subject: [PATCH] content-sniffer: Handle sniffing resource shorter than 4\\n    bytes\\n\\n    ---\\n    libsoup/content-sniffer/soup-content-sniffer.c | 7 ++++++-\\n    1 file changed, 6 insertions(+), 1 deletion(-)\\n\\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\\n    index 5a181ff1..aeee2e25 100644\\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\\n    @@ -243,9 +243,14 @@ sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)\\n        gsize resource_length;\\n        const char *resource = g_bytes_get_data (buffer, &resource_length);\\n        resource_length = MIN (512, resource_length);\\n    -\\tguint32 box_size = *((guint32*)resource);\\n    +\\tguint32 box_size;\\n        guint i;\\n    \\n    +        if (resource_length < sizeof (guint32))\\n    +                return FALSE;\\n    +\\n    +\\tbox_size = *((guint32*)resource);\\n    +\\n    #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\\n        box_size = ((box_size >> 24) |\\n                ((box_size << 8) & 0x00FF0000) |\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/content-sniffer/soup-content-sniffer.c': ['93: \\t     GBytes *buffer,', '94: \\t     SoupContentSnifferMediaPattern table[],', '95: \\t     int table_length)', '96: {', '97: ', '98:         gsize resource_length;', '99:         const guchar *resource = g_bytes_get_data (buffer, &resource_length);', '100:         resource_length = MIN (512, resource_length);', '101: \\tint i;', '102: ', '103: \\tfor (i = 0; i < table_length; i++) {', '104: \\t\\tSoupContentSnifferMediaPattern *type_row = &(table[i]);', '236: ', '237:         return memcmp (data, prefix, strlen (prefix)) == 0;', '238: }', '239: ', '240: static gboolean', '241: sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)', '242: {', '243: \\tgsize resource_length;', '244: \\tconst char *resource = g_bytes_get_data (buffer, &resource_length);', '245: \\tresource_length = MIN (512, resource_length);', '246: \\tguint32 box_size = *((guint32*)resource);', '247: \\tguint i;', '248: ', '249: #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__', '250: \\tbox_size = ((box_size >> 24) |', '251: \\t\\t    ((box_size << 8) & 0x00FF0000) |', '252: \\t\\t    ((box_size >> 8) & 0x0000FF00) |', '253: \\t\\t    (box_size << 24));', '254: #endif', '255: ', '256: \\tif (resource_length < 12 || resource_length < box_size || box_size % 4 != 0)', '257: \\t\\treturn FALSE;', '258: ', '259: \\tif (!data_has_prefix (resource + 4, \"ftyp\", resource_length - 4))', '260: \\t\\treturn FALSE;', '261: ', '262: \\tif (!data_has_prefix (resource + 8, \"mp4\", resource_length - 8))', '263: \\t\\treturn FALSE;', '264: ', '265: \\tfor (i = 16; i < box_size && i < resource_length; i = i + 4) {', '266: \\t\\tif (data_has_prefix (resource + i, \"mp4\", resource_length - i))', '267: \\t\\t\\treturn TRUE;', '268: \\t}', '269: ', '270: \\treturn FALSE;', '271: }', '272: ', '273: static char*', '274: sniff_audio_video (SoupContentSniffer *sniffer, GBytes *buffer)', '275: {', '276: \\tchar *sniffed_type;', '503: static char*', '504: sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,', '505: \\t       gboolean sniff_scriptable)', '506: {', '507: \\tchar *sniffed_type = NULL;', '508: \\tgsize resource_length;', '509: \\tconst guchar *resource = g_bytes_get_data (buffer, &resource_length);', '510: \\tresource_length = MIN (512, resource_length);', '511: \\tguint i;', '512: ', '513:         if (resource_length == 0)', '514:                 return g_strdup (\"text/plain\");', '594: ', '595: /* MIMESNIFF: 7.2 Sniffing a mislabeled binary resource */', '596: static char*', '597: sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)', '598: {', '599: \\tgsize resource_length;', '600: \\tconst guchar *resource = g_bytes_get_data (buffer, &resource_length);', '601: \\tresource_length = MIN (512, resource_length);', '602: \\tgboolean looks_binary = FALSE;', '603: \\tint i;', '604: ', \"605: \\t/* 2. Detecting UTF-16BE, UTF-16LE BOMs means it's text/plain */\", '649: }', '650: ', '651: static char*', '652: sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)', '653: {', '654: \\tgsize resource_length;', '655: \\tconst char *resource = g_bytes_get_data (buffer, &resource_length);', '656: \\tresource_length = MIN (512, resource_length);', '657: \\tint pos = 0;', '658: ', '659: \\tif (resource_length < 3)', '660: \\t\\tgoto text_html;']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From ba4c3a6f988beff59e45801ab36067293d24ce92 Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Wed, 8 Jan 2025 16:30:17 -0600\nSubject: [PATCH] content-sniffer: Handle sniffing resource shorter than 4\n bytes\n\nLink: https://gitlab.gnome.org/GNOME/libsoup/-/commit/ba4c3a6f988beff59e45801ab36067293d24ce92.patch\n---\n libsoup/content-sniffer/soup-content-sniffer.c | 7 ++++++-\n 1 file changed, 6 insertions(+), 1 deletion(-)\n\ndiff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\nindex 5a181ff1..aeee2e25 100644\n--- a/libsoup/content-sniffer/soup-content-sniffer.c\n+++ b/libsoup/content-sniffer/soup-content-sniffer.c\n@@ -243,9 +243,14 @@ sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)\n \tgsize resource_length;\n \tconst char *resource = g_bytes_get_data (buffer, &resource_length);\n \tresource_length = MIN (512, resource_length);\n-\tguint32 box_size = *((guint32*)resource);\n+\tguint32 box_size;\n \tguint i;\n \n+        if (resource_length < sizeof (guint32))\n+                return FALSE;\n+\n+\tbox_size = *((guint32*)resource);\n+\n #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n \tbox_size = ((box_size >> 24) |\n \t\t    ((box_size << 8) & 0x00FF0000) |\n-- \nGitLab\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    },
    "CVE-2025-32910": {
        "INPUT_PROMPT": "\n        You are a patch generator.\n\n        <INPUT>\n        CVE_DESCRIPTION:\n        \"\\n    A flaw was found in libsoup, where soup_auth_digest_authenticate() is vulnerable to a NULL pointer dereference. This issue may cause the libsoup client to crash.\\n    \"\n\n        UPSTREAM_PATCH:\n        \"\\n    From e40df6d48a1cbab56f5d15016cc861a503423cfe Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Sun, 8 Dec 2024 20:00:35 -0600\\n    Subject: [PATCH 1/3] auth-digest: Handle missing realm in authenticate header\\n\\n    ---\\n    libsoup/auth/soup-auth-digest.c |  3 ++\\n    tests/auth-test.c               | 50 +++++++++++++++++++++++++++++++++\\n    2 files changed, 53 insertions(+)\\n\\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\\n    index 2e81849af..4f12e87a5 100644\\n    --- a/libsoup/auth/soup-auth-digest.c\\n    +++ b/libsoup/auth/soup-auth-digest.c\\n    @@ -148,6 +148,9 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\\n        guint qop_options;\\n        gboolean ok = TRUE;\\n    \\n    +        if (!soup_auth_get_realm (auth))\\n    +                return FALSE;\\n    +\\n        g_free (priv->domain);\\n        g_free (priv->nonce);\\n        g_free (priv->opaque);\\n    diff --git a/tests/auth-test.c b/tests/auth-test.c\\n    index 158fdac10..3066e904a 100644\\n    --- a/tests/auth-test.c\\n    +++ b/tests/auth-test.c\\n    @@ -1866,6 +1866,55 @@ do_multiple_digest_algorithms (void)\\n        soup_test_server_quit_unref (server);\\n    }\\n    \\n    +static void\\n    +on_request_read_for_missing_realm (SoupServer        *server,\\n    +                                   SoupServerMessage *msg,\\n    +                                   gpointer           user_data)\\n    +{\\n    +        SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\\n    +        soup_message_headers_replace (response_headers, \\\"WWW-Authenticate\\\", \\\"Digest qop=\\\"auth\\\"\\\");\\n    +}\\n    +\\n    +static void\\n    +do_missing_realm_test (void)\\n    +{\\n    +        SoupSession *session;\\n    +        SoupMessage *msg;\\n    +        SoupServer *server;\\n    +        SoupAuthDomain *digest_auth_domain;\\n    +        gint status;\\n    +        GUri *uri;\\n    +\\n    +        server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\\n    +\\tsoup_server_add_handler (server, NULL,\\n    +\\t\\t\\t\\t server_callback, NULL, NULL);\\n    +\\turi = soup_test_server_get_uri (server, \\\"http\\\", NULL);\\n    +\\n    +\\tdigest_auth_domain = soup_auth_domain_digest_new (\\n    +\\t\\t\\\"realm\\\", \\\"auth-test\\\",\\n    +\\t\\t\\\"auth-callback\\\", server_digest_auth_callback,\\n    +\\t\\tNULL);\\n    +        soup_auth_domain_add_path (digest_auth_domain, \\\"/\\\");\\n    +\\tsoup_server_add_auth_domain (server, digest_auth_domain);\\n    +        g_object_unref (digest_auth_domain);\\n    +\\n    +        g_signal_connect (server, \\\"request-read\\\",\\n    +                          G_CALLBACK (on_request_read_for_missing_realm),\\n    +                          NULL);\\n    +\\n    +        session = soup_test_session_new (NULL);\\n    +        msg = soup_message_new_from_uri (\\\"GET\\\", uri);\\n    +        g_signal_connect (msg, \\\"authenticate\\\",\\n    +                          G_CALLBACK (on_digest_authenticate),\\n    +                          NULL);\\n    +\\n    +        status = soup_test_session_send_message (session, msg);\\n    +\\n    +        g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\\n    +\\tg_uri_unref (uri);\\n    +\\tsoup_test_server_quit_unref (server);\\n    +}\\n    +\\n    int\\n    main (int argc, char **argv)\\n    {\\n    @@ -1899,6 +1948,7 @@ main (int argc, char **argv)\\n        g_test_add_func (\\\"/auth/auth-uri\\\", do_auth_uri_test);\\n            g_test_add_func (\\\"/auth/cancel-request-on-authenticate\\\", do_cancel_request_on_authenticate);\\n            g_test_add_func (\\\"/auth/multiple-algorithms\\\", do_multiple_digest_algorithms);\\n    +        g_test_add_func (\\\"/auth/missing-realm\\\", do_missing_realm_test);\\n    \\n        ret = g_test_run ();\\n    \\n    -- \\n    GitLab\\n\\n\\n    From 405a8a34597a44bd58c4759e7d5e23f02c3b556a Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Thu, 26 Dec 2024 18:18:35 -0600\\n    Subject: [PATCH 2/3] auth-digest: Handle missing nonce\\n\\n    ---\\n    libsoup/auth/soup-auth-digest.c | 45 +++++++++++++++++++++++++--------\\n    tests/auth-test.c               | 19 ++++++++------\\n    2 files changed, 46 insertions(+), 18 deletions(-)\\n\\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\\n    index 4f12e87a5..350bfde69 100644\\n    --- a/libsoup/auth/soup-auth-digest.c\\n    +++ b/libsoup/auth/soup-auth-digest.c\\n    @@ -138,6 +138,19 @@ soup_auth_digest_get_qop (SoupAuthDigestQop qop)\\n        return g_string_free (out, FALSE);\\n    }\\n    \\n    +static gboolean\\n    +validate_params (SoupAuthDigest *auth_digest)\\n    +{\\n    +        SoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);\\n    +\\n    +        if (priv->qop || priv->algorithm == SOUP_AUTH_DIGEST_ALGORITHM_MD5_SESS) {\\n    +                if (!priv->nonce)\\n    +                        return FALSE;\\n    +        }\\n    +\\n    +        return TRUE;\\n    +}\\n    +\\n    static gboolean\\n    soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\\n                GHashTable *auth_params)\\n    @@ -175,16 +188,21 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\\n        if (priv->algorithm == -1)\\n            ok = FALSE;\\n    \\n    -\\tstale = g_hash_table_lookup (auth_params, \\\"stale\\\");\\n    -\\tif (stale && !g_ascii_strcasecmp (stale, \\\"TRUE\\\") && *priv->hex_urp)\\n    -\\t\\trecompute_hex_a1 (priv);\\n    -\\telse {\\n    -\\t\\tg_free (priv->user);\\n    -\\t\\tpriv->user = NULL;\\n    -\\t\\tg_free (priv->cnonce);\\n    -\\t\\tpriv->cnonce = NULL;\\n    -\\t\\tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\\n    -\\t\\tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\\n    +        if (!validate_params (auth_digest))\\n    +                ok = FALSE;\\n    +\\n    +        if (ok) {\\n    +                stale = g_hash_table_lookup (auth_params, \\\"stale\\\");\\n    +                if (stale && !g_ascii_strcasecmp (stale, \\\"TRUE\\\") && *priv->hex_urp)\\n    +                        recompute_hex_a1 (priv);\\n    +                else {\\n    +                        g_free (priv->user);\\n    +                        priv->user = NULL;\\n    +                        g_free (priv->cnonce);\\n    +                        priv->cnonce = NULL;\\n    +                        memset (priv->hex_urp, 0, sizeof (priv->hex_urp));\\n    +                        memset (priv->hex_a1, 0, sizeof (priv->hex_a1));\\n    +                }\\n            }\\n    \\n        return ok;\\n    @@ -276,6 +294,8 @@ soup_auth_digest_compute_hex_a1 (const char              *hex_urp,\\n    \\n            /* In MD5-sess, A1 is hex_urp:nonce:cnonce */\\n    \\n    +                g_assert (nonce && cnonce);\\n    +\\n            checksum = g_checksum_new (G_CHECKSUM_MD5);\\n            g_checksum_update (checksum, (guchar *)hex_urp, strlen (hex_urp));\\n            g_checksum_update (checksum, (guchar *)\\\":\\\", 1);\\n    @@ -366,6 +386,8 @@ soup_auth_digest_compute_response (const char        *method,\\n        if (qop) {\\n            char tmp[9];\\n    \\n    +                g_assert (cnonce);\\n    +\\n            g_snprintf (tmp, 9, \\\"%.8x\\\", nc);\\n            g_checksum_update (checksum, (guchar *)tmp, strlen (tmp));\\n            g_checksum_update (checksum, (guchar *)\\\":\\\", 1);\\n    @@ -429,6 +451,9 @@ soup_auth_digest_get_authorization (SoupAuth *auth, SoupMessage *msg)\\n        g_return_val_if_fail (uri != NULL, NULL);\\n        url = soup_uri_get_path_and_query (uri);\\n    \\n    +        g_assert (priv->nonce);\\n    +        g_assert (!priv->qop || priv->cnonce);\\n    +\\n        soup_auth_digest_compute_response (soup_message_get_method (msg), url, priv->hex_a1,\\n                        priv->qop, priv->nonce,\\n                        priv->cnonce, priv->nc,\\n    diff --git a/tests/auth-test.c b/tests/auth-test.c\\n    index 3066e904a..c651c7cd9 100644\\n    --- a/tests/auth-test.c\\n    +++ b/tests/auth-test.c\\n    @@ -1867,16 +1867,17 @@ do_multiple_digest_algorithms (void)\\n    }\\n    \\n    static void\\n    -on_request_read_for_missing_realm (SoupServer        *server,\\n    -                                   SoupServerMessage *msg,\\n    -                                   gpointer           user_data)\\n    +on_request_read_for_missing_params (SoupServer        *server,\\n    +                                      SoupServerMessage *msg,\\n    +                                      gpointer           user_data)\\n    {\\n    +        const char *auth_header = user_data;\\n            SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\\n    -        soup_message_headers_replace (response_headers, \\\"WWW-Authenticate\\\", \\\"Digest qop=\\\"auth\\\"\\\");\\n    +        soup_message_headers_replace (response_headers, \\\"WWW-Authenticate\\\", auth_header);\\n    }\\n    \\n    static void\\n    -do_missing_realm_test (void)\\n    +do_missing_params_test (gconstpointer auth_header)\\n    {\\n            SoupSession *session;\\n            SoupMessage *msg;\\n    @@ -1899,8 +1900,8 @@ do_missing_realm_test (void)\\n            g_object_unref (digest_auth_domain);\\n    \\n            g_signal_connect (server, \\\"request-read\\\",\\n    -                          G_CALLBACK (on_request_read_for_missing_realm),\\n    -                          NULL);\\n    +                          G_CALLBACK (on_request_read_for_missing_params),\\n    +                          (gpointer)auth_header);\\n    \\n            session = soup_test_session_new (NULL);\\n            msg = soup_message_new_from_uri (\\\"GET\\\", uri);\\n    @@ -1948,7 +1949,9 @@ main (int argc, char **argv)\\n        g_test_add_func (\\\"/auth/auth-uri\\\", do_auth_uri_test);\\n            g_test_add_func (\\\"/auth/cancel-request-on-authenticate\\\", do_cancel_request_on_authenticate);\\n            g_test_add_func (\\\"/auth/multiple-algorithms\\\", do_multiple_digest_algorithms);\\n    -        g_test_add_func (\\\"/auth/missing-realm\\\", do_missing_realm_test);\\n    +        g_test_add_data_func (\\\"/auth/missing-params/realm\\\", \\\"Digest qop=\\\"auth\\\"\\\", do_missing_params_test);\\n    +        g_test_add_data_func (\\\"/auth/missing-params/nonce\\\", \\\"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\\\", do_missing_params_test);\\n    +        g_test_add_data_func (\\\"/auth/missing-params/nonce-md5-sess\\\", \\\"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\\\", do_missing_params_test);\\n    \\n        ret = g_test_run ();\\n    \\n    -- \\n    GitLab\\n\\n\\n    From ea16eeacb052e423eb5c3b0b705e5eab34b13832 Mon Sep 17 00:00:00 2001\\n    From: Patrick Griffis <pgriffis@igalia.com>\\n    Date: Fri, 27 Dec 2024 13:52:52 -0600\\n    Subject: [PATCH 3/3] auth-digest: Fix leak\\n\\n    ---\\n    libsoup/auth/soup-auth-digest.c | 1 +\\n    1 file changed, 1 insertion(+)\\n\\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\\n    index 350bfde69..9eb7fa0e2 100644\\n    --- a/libsoup/auth/soup-auth-digest.c\\n    +++ b/libsoup/auth/soup-auth-digest.c\\n    @@ -72,6 +72,7 @@ soup_auth_digest_finalize (GObject *object)\\n        g_free (priv->nonce);\\n        g_free (priv->domain);\\n        g_free (priv->cnonce);\\n    +        g_free (priv->opaque);\\n    \\n        memset (priv->hex_urp, 0, sizeof (priv->hex_urp));\\n        memset (priv->hex_a1, 0, sizeof (priv->hex_a1));\\n    -- \\n    GitLab\\n    \"\n\n        RELEVANT_FILE_CODE_LATEST_VERSION:\n        Format: \"<LINE_NUMBER>: <LINE_CONTENT>\"\n        {'libsoup/auth/soup-auth-digest.c': ['62: soup_auth_digest_init (SoupAuthDigest *digest)', '63: {', '64: }', '65: ', '66: static void', '67: soup_auth_digest_finalize (GObject *object)', '68: {', '69: \\tSoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (SOUP_AUTH_DIGEST (object));', '70: ', '71: \\tg_free (priv->user);', '72: \\tg_free (priv->nonce);', '73: \\tg_free (priv->domain);', '74: \\tg_free (priv->cnonce);', '75: ', '76: \\tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));', '77: \\tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));', '78: ', '79: \\tG_OBJECT_CLASS (soup_auth_digest_parent_class)->finalize (object);', '80: }', '81: ', '82: SoupAuthDigestAlgorithm', '83: soup_auth_digest_parse_algorithm (const char *algorithm)', '84: {', '85: \\tif (!algorithm || !g_ascii_strcasecmp (algorithm, \"MD5\"))', '86: \\t\\treturn SOUP_AUTH_DIGEST_ALGORITHM_MD5;', '87: \\telse if (!g_ascii_strcasecmp (algorithm, \"MD5-sess\"))', '88: \\t\\treturn SOUP_AUTH_DIGEST_ALGORITHM_MD5_SESS;', '89: \\telse', '90: \\t\\treturn -1;', '91: }', '92: ', '93: char *', '94: soup_auth_digest_get_algorithm (SoupAuthDigestAlgorithm algorithm)', '95: {', '113: \\tfor (iter = qop_values; iter; iter = iter->next) {', '114: \\t\\tif (!g_ascii_strcasecmp (iter->data, \"auth\"))', '115: \\t\\t\\tout |= SOUP_AUTH_DIGEST_QOP_AUTH;', '116: \\t\\telse if (!g_ascii_strcasecmp (iter->data, \"auth-int\"))', '117: \\t\\t\\tout |= SOUP_AUTH_DIGEST_QOP_AUTH_INT;', '118: \\t}', '119: \\tsoup_header_free_list (qop_values);', '120: ', '121: \\treturn out;', '122: }', '123: ', '124: char *', '125: soup_auth_digest_get_qop (SoupAuthDigestQop qop)', '126: {', '127: \\tGString *out;', '128: ', '129: \\tout = g_string_new (NULL);', '131: \\t\\tg_string_append (out, \"auth\");', '132: \\tif (qop & SOUP_AUTH_DIGEST_QOP_AUTH_INT) {', '133: \\t\\tif (qop & SOUP_AUTH_DIGEST_QOP_AUTH)', '134: \\t\\t\\tg_string_append (out, \",\");', '135: \\t\\tg_string_append (out, \"auth-int\");', '136: \\t}', '137: ', '138: \\treturn g_string_free (out, FALSE);', '139: }', '140: ', '141: static gboolean', '142: soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,', '143: \\t\\t\\t GHashTable *auth_params)', '144: {', '145: \\tSoupAuthDigest *auth_digest = SOUP_AUTH_DIGEST (auth);', '146: \\tSoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);', '147: \\tconst char *stale, *qop;', '148: \\tguint qop_options;', '149: \\tgboolean ok = TRUE;', '150: ', '151: \\tg_free (priv->domain);', '152: \\tg_free (priv->nonce);', '153: \\tg_free (priv->opaque);', '154: ', '155: \\tpriv->nc = 1;', '156: ', '157: \\tpriv->domain = g_strdup (g_hash_table_lookup (auth_params, \"domain\"));', '158: \\tpriv->nonce = g_strdup (g_hash_table_lookup (auth_params, \"nonce\"));', '159: \\tpriv->opaque = g_strdup (g_hash_table_lookup (auth_params, \"opaque\"));', '160: ', '161: \\tqop = g_hash_table_lookup (auth_params, \"qop\");', '162: \\tif (qop) {', '163: \\t\\tqop_options = soup_auth_digest_parse_qop (qop);', '164: \\t\\t/* We only support auth */', '165: \\t\\tif (!(qop_options & SOUP_AUTH_DIGEST_QOP_AUTH))', '166: \\t\\t\\tok = FALSE;', '167: \\t\\tpriv->qop = SOUP_AUTH_DIGEST_QOP_AUTH;', '168: \\t} else', '169: \\t\\tpriv->qop = 0;', '170: ', '171: \\tpriv->algorithm = soup_auth_digest_parse_algorithm (g_hash_table_lookup (auth_params, \"algorithm\"));', '172: \\tif (priv->algorithm == -1)', '173: \\t\\tok = FALSE;', '174: ', '175: \\tstale = g_hash_table_lookup (auth_params, \"stale\");', '176: \\tif (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)', '177: \\t\\trecompute_hex_a1 (priv);', '180: \\t\\tpriv->user = NULL;', '181: \\t\\tg_free (priv->cnonce);', '182: \\t\\tpriv->cnonce = NULL;', '183: \\t\\tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));', '184: \\t\\tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));', '185:         }', '186: ', '187: \\treturn ok;', '188: }', '189: ', '190: static GSList *', '191: soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)', '192: {', '193: \\tSoupAuthDigest *auth_digest = SOUP_AUTH_DIGEST (auth);', '194: \\tSoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);', '195: \\tGSList *space = NULL;', '196: \\tGUri *uri;', '197: \\tchar **dvec, *d, *dir, *slash;', '198: \\tint dix;', '199: ', '200: \\tif (!priv->domain || !*priv->domain) {', '201: \\t\\t/* If no domain directive, the protection space is the', '202: \\t\\t * whole server.', '203: \\t\\t */', '204: \\t\\treturn g_slist_prepend (NULL, g_strdup (\"\"));', '205: \\t}', '206: ', '207: \\tdvec = g_strsplit (priv->domain, \" \", 0);', '208: \\tfor (dix = 0; dvec[dix] != NULL; dix++) {', '209: \\t\\td = dvec[dix];', \"210: \\t\\tif (*d == '/')\", '211: \\t\\t\\tdir = g_strdup (d);', '212: \\t\\telse {', '213: \\t\\t\\turi = g_uri_parse (d, SOUP_HTTP_URI_FLAGS, NULL);', '214: \\t\\t\\tif (uri &&', '215:                             g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&', '216: \\t\\t\\t    g_uri_get_port (uri) == g_uri_get_port (source_uri) &&', '217: \\t\\t\\t    !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))', '218: \\t\\t\\t\\tdir = g_strdup (g_uri_get_path (uri));', '219: \\t\\t\\telse', '220: \\t\\t\\t\\tdir = NULL;', '221: \\t\\t\\tif (uri)', '222: \\t\\t\\t\\tg_uri_unref (uri);', '223: \\t\\t}', '224: ', '225: \\t\\tif (dir) {', \"226: \\t\\t\\tslash = strrchr (dir, '/');\", '227: \\t\\t\\tif (slash && !slash[1])', \"228: \\t\\t\\t\\t*slash = '\\\\0';\", '229: ', '230: \\t\\t\\tspace = g_slist_prepend (space, dir);', '231: \\t\\t}', '232: \\t}', '233: \\tg_strfreev (dvec);', '234: ', '235: \\treturn space;', '236: }', '237: ', '238: void', '239: soup_auth_digest_compute_hex_urp (const char *username,', '240: \\t\\t\\t\\t  const char *realm,', '279: \\t\\tg_checksum_update (checksum, (guchar *)nonce, strlen (nonce));', '280: \\t\\tg_checksum_update (checksum, (guchar *)\":\", 1);', '281: \\t\\tg_checksum_update (checksum, (guchar *)cnonce, strlen (cnonce));', '282:                 g_strlcpy (hex_a1, g_checksum_get_string (checksum), 33);', '283: \\t\\tg_checksum_free (checksum);', '284: \\t}', '285: }', '286: ', '287: static void', '288: recompute_hex_a1 (SoupAuthDigestPrivate *priv)', '289: {', '295: }', '296: ', '297: static void', '298: soup_auth_digest_authenticate (SoupAuth *auth, const char *username,', '299: \\t\\t\\t       const char *password)', '300: {', '301: \\tSoupAuthDigest *auth_digest = SOUP_AUTH_DIGEST (auth);', '302: \\tSoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);', '303: \\tchar *bgen;', '304: ', '305: \\tg_clear_pointer (&priv->cnonce, g_free);', '306: \\tg_clear_pointer (&priv->user, g_free);', '307: ', '308: \\t/* Create client nonce */', '309: \\tbgen = g_strdup_printf (\"%p:%lu:%lu\",', '310: \\t\\t\\t\\tauth,', '311: \\t\\t\\t\\t(unsigned long) getpid (),', '312: \\t\\t\\t\\t(unsigned long) time (0));', '313: \\tpriv->cnonce = g_base64_encode ((guchar *)bgen, strlen (bgen));', '314: \\tg_free (bgen);', '315: ', '316: \\tpriv->user = g_strdup (username);', '317: ', '318: \\t/* compute \"URP\" (user:realm:password) */', '358: \\tg_checksum_update (checksum, (guchar *)hex_a1, strlen (hex_a1));', '359: \\tg_checksum_update (checksum, (guchar *)\":\", 1);', '360: \\tg_checksum_update (checksum, (guchar *)nonce, strlen (nonce));', '361: \\tg_checksum_update (checksum, (guchar *)\":\", 1);', '362: ', '363: \\tif (qop) {', '364: \\t\\tchar tmp[9];', '365: ', '366: \\t\\tg_snprintf (tmp, 9, \"%.8x\", nc);', '367: \\t\\tg_checksum_update (checksum, (guchar *)tmp, strlen (tmp));', '368: \\t\\tg_checksum_update (checksum, (guchar *)\":\", 1);', '371: ', '372: \\t\\tif (!(qop & SOUP_AUTH_DIGEST_QOP_AUTH))', '373: \\t\\t\\tg_warn_if_reached ();', '374: \\t\\tg_checksum_update (checksum, (guchar *)\"auth\", strlen (\"auth\"));', '375: \\t\\tg_checksum_update (checksum, (guchar *)\":\", 1);', '376: \\t}', '377: ', '378: \\tg_checksum_update (checksum, (guchar *)hex_a2, 32);', '379: \\tmemcpy (response, g_checksum_get_string (checksum), sizeof (char) * 33);', '380: \\tg_checksum_free (checksum);', '381: }', '382: ', '383: static void', '384: authentication_info_cb (SoupMessage *msg, gpointer data)', '385: {', '387: \\tSoupAuthDigest *auth_digest = SOUP_AUTH_DIGEST (auth);', '388: \\tSoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);', '389: \\tconst char *header;', '390: \\tGHashTable *auth_params;', '391: \\tchar *nextnonce;', '392: ', '393: \\tif (auth != soup_message_get_auth (msg))', '394: \\t\\treturn;', '395: ', '396: \\theader = soup_message_headers_get_one_common (soup_message_get_response_headers (msg),', '397:                                                       soup_auth_is_for_proxy (auth) ?', '398:                                                       SOUP_HEADER_PROXY_AUTHENTICATION_INFO :', '399:                                                       SOUP_HEADER_AUTHENTICATION_INFO);', '400: \\tg_return_if_fail (header != NULL);', '401: ', '402: \\tauth_params = soup_header_parse_param_list (header);', '403: \\tif (!auth_params)', '404: \\t\\treturn;', '405: ', '406: \\tnextnonce = g_strdup (g_hash_table_lookup (auth_params, \"nextnonce\"));', '407: \\tif (nextnonce) {', '408: \\t\\tg_free (priv->nonce);', '409: \\t\\tpriv->nonce = nextnonce;', '410: \\t}', '411: ', '412: \\tsoup_header_free_param_list (auth_params);', '413: }', '414: ', '415: static char *', '416: soup_auth_digest_get_authorization (SoupAuth *auth, SoupMessage *msg)', '417: {', '421: \\tchar *url, *algorithm;', '422: \\tGString *out;', '423: \\tGUri *uri;', '424: ', '425: \\turi = soup_message_get_uri (msg);', '426: \\tg_return_val_if_fail (uri != NULL, NULL);', '427: \\turl = soup_uri_get_path_and_query (uri);', '428: ', '429: \\tsoup_auth_digest_compute_response (soup_message_get_method (msg), url, priv->hex_a1,', '430: \\t\\t\\t\\t\\t   priv->qop, priv->nonce,', '431: \\t\\t\\t\\t\\t   priv->cnonce, priv->nc,', '452: \\t\\tsoup_header_g_string_append_param_quoted (out, \"opaque\", priv->opaque);', '453: \\t}', '454: ', '455: \\tif (priv->qop) {', '456: \\t\\tchar *qop = soup_auth_digest_get_qop (priv->qop);', '457: ', '458: \\t\\tg_string_append (out, \", \");', '459: \\t\\tsoup_header_g_string_append_param_quoted (out, \"cnonce\", priv->cnonce);', '460: \\t\\tg_string_append_printf (out, \", nc=%.8x, qop=%s\",', '461: \\t\\t\\t\\t\\tpriv->nc, qop);', '462: \\t\\tg_free (qop);', '463: \\t}', '464: ', '465: \\tg_free (url);', '466: ', '467: \\tpriv->nc++;', '468: ', '469: \\ttoken = g_string_free (out, FALSE);', '470: ', '471: \\tsoup_message_add_header_handler (msg,', '472: \\t\\t\\t\\t\\t \"got_headers\",', '473: \\t\\t\\t\\t\\t soup_auth_is_for_proxy (auth) ?', '474: \\t\\t\\t\\t\\t \"Proxy-Authentication-Info\" :', '475: \\t\\t\\t\\t\\t \"Authentication-Info\",', '476: \\t\\t\\t\\t\\t G_CALLBACK (authentication_info_cb),'], 'tests/auth-test.c': ['181: \\t\\tuser = strstr (header, \"username=\\\\\"user\");', '182: \\t\\tif (user)', \"183: \\t\\t\\tnum = user[14] - '0';\", '184: \\t\\telse', '185: \\t\\t\\tnum = 0;', '186: \\t}', '187: ', '188: \\tg_assert (num >= 0 && num <= 4);', '189: ', '190: \\treturn num;', '191: }', '192: ', '193: static void', '194: handler (SoupMessage *msg, gpointer data)', '195: {', '196: \\tchar *expected = data;', '197: \\tint auth, exp;', '208: \\t\\t\\t\\t  \"expected %s\", auths[exp]);', '209: \\t\\tmemmove (expected, expected + 1, strlen (expected));', '210: \\t} else {', '211: \\t\\tsoup_test_assert (*expected,', '212: \\t\\t\\t\\t  \"expected to be finished\");', '213: \\t}', '214: }', '215: ', '216: static gboolean', '217: authenticate (SoupMessage  *msg,', '218: \\t      SoupAuth     *auth,', '236: \\tsoup_auth_authenticate (auth, username, password);', '237: \\tg_free (username);', '238: \\tg_free (password);', '239: ', '240: \\treturn TRUE;', '241: }', '242: ', '243: static void', '244: bug271540_sent (SoupMessage *msg, gpointer data)', '245: {', '246: \\tint n = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (msg), \"#\"));', '247: \\tgboolean *authenticated = data;', '270: \\t\\tsoup_auth_authenticate (auth, \"user1\", \"realm1\");', '271: \\t\\t*authenticated = TRUE;', '272: \\t} else {', '273: \\t\\tsoup_test_assert (!*authenticated,', '274: \\t\\t\\t\\t  \"asked to authenticate message %d after authenticating\", n);', '275: \\t}', '276: ', '277: \\treturn TRUE;', '278: }', '279: ', '280: static void', '281: bug271540_finished (SoupMessage *msg, gpointer data)', '282: {', '283: \\tint *left = data;', '284: ', '285: \\tsoup_test_assert_message_status (msg, SOUP_STATUS_OK);', '286: ', '287: \\t(*left)--;', '288: \\tif (!*left)', '289: \\t\\tg_main_loop_quit (loop);', '290: }', '291: ', '292: static void', '293: do_pipelined_auth_test (void)', '294: {', '295: \\tSoupSession *session;', '296: \\tSoupMessage *msg;', '411: \\t\\treturn FALSE;', '412: ', '413: \\tsoup_auth_authenticate (auth, \"user1\", \"realm1\");', '414: ', '415: \\treturn TRUE;', '416: }', '417: ', '418: static void', '419: digest_nonce_unauthorized (SoupMessage *msg, gpointer data)', '420: {', '421: \\tgboolean *got_401 = data;', '422: \\t*got_401 = TRUE;', '423: }', '424: ', '425: static void', '426: do_digest_nonce_test (SoupSession *session,', '427: \\t\\t      const char *nth, const char *uri, gboolean use_auth_cache,', '428: \\t\\t      gboolean expect_401, gboolean expect_signal)', '429: {', '452: ', '453: \\tif (expect_signal) {', '454: \\t\\tg_signal_handlers_disconnect_by_func (session,', '455: \\t\\t\\t\\t\\t\\t      G_CALLBACK (digest_nonce_authenticate),', '456: \\t\\t\\t\\t\\t\\t      NULL);', '457: \\t}', '458: ', '459: \\tg_object_unref (msg);', '460: }', '461: ', '462: static void', '463: do_digest_expiration_test (void)', '464: {', '465: \\tSoupSession *session;', '466: \\tchar *uri;', '514: \\tif (saved_auth)', '515: \\t\\t*saved_auth = g_object_ref (auth);', '516: \\tg_main_loop_quit (loop);', '517: ', '518: \\treturn TRUE;', '519: }', '520: ', '521: static void', '522: async_finished (SoupMessage *msg,', '523: \\t\\tgpointer     user_data)', '524: {', '525: \\tint *remaining = user_data;', '560: \\t*saved_auth = g_object_ref (auth);', '561: ', '562: \\tg_main_loop_quit (loop);', '563: ', '564: \\treturn TRUE;', '565: }', '566: ', '567: static void', '568: do_async_auth_good_password_test (void)', '569: {', '570: \\tSoupSession *session;', '571: \\tSoupMessage *msg1, *msg2, *msg3;', '634: \\tg_object_unref (msg3);', '635: \\tg_object_unref (msg2);', '636: ', '637: \\tg_free (uri);', '638: \\tg_main_loop_unref (loop);', '639: }', '640: ', '641: static void', '642: do_async_auth_bad_password_test (void)', '643: {', '644: \\tSoupSession *session;', '645: \\tSoupMessage *msg;', '686: \\tsoup_test_session_abort_unref (session);', '687: \\tg_object_unref (msg);', '688: ', '689: \\tg_free (uri);', '690: \\tg_main_loop_unref (loop);', '691: }', '692: ', '693: static void', '694: do_async_auth_no_password_test (void)', '695: {', '696: \\tSoupSession *session;', '697: \\tSoupMessage *msg;', '769: {', '770: \\tdata->auth = g_object_ref (auth);', '771: \\tg_idle_add ((GSourceFunc)async_authenticate_cancel_idle, data);', '772: ', '773: \\treturn TRUE;', '774: }', '775: ', '776: static void', '777: do_async_auth_cancel_test (void)', '778: {', '779: \\tSoupSession *session;', '780: \\tSoupMessage *msg;', '811:         if (retrying)', '812:                 return FALSE;', '813: ', '814:         soup_auth_authenticate (auth, \"user1\", \"wrong\");', '815:         return TRUE;', '816: }', '817: ', '818: static void', '819: do_sync_auth_bad_password_test (void)', '820: {', '821:         SoupSession *session;', '822:         SoupMessage *msg;', '873: \\tsad->round[round].response = soup_auth_get_scheme_name (auth);', '874: \\tif (sad->password && !retrying) {', '875: \\t\\tsoup_auth_authenticate (auth, \"user\", sad->password);', '876: ', '877: \\t\\treturn TRUE;', '878: \\t}', '879: ', '880: \\treturn FALSE;', '881: }', '882: ', '883: static void', '884: select_auth_test_one (GUri *uri,', '885: \\t\\t      gboolean disable_digest, const char *password,', '886: \\t\\t      const char *first_headers, const char *first_response,', '887: \\t\\t      const char *second_headers, const char *second_response,', '924: ', '925: \\tsoup_test_assert_message_status (msg, final_status);', '926: ', '927: \\tg_object_unref (msg);', '928: \\tsoup_test_session_abort_unref (session);', '929: }', '930: ', '931: static void', '932: server_callback (SoupServer        *server,', '933: \\t\\t SoupServerMessage *msg,', '934: \\t\\t const char        *path,', '935: \\t\\t GHashTable        *query,', '962: \\tif (strcmp (username, \"user\") != 0)', '963: \\t\\treturn NULL;', '964: \\treturn soup_auth_domain_digest_encode_password (\"user\",', '965: \\t\\t\\t\\t\\t\\t\\t\"auth-test\",', '966: \\t\\t\\t\\t\\t\\t\\t\"good\");', '967: }', '968: ', '969: static void', '970: do_select_auth_test (void)', '971: {', '972: \\tSoupServer *server;', '973: \\tSoupAuthDomain *basic_auth_domain, *digest_auth_domain;', '1066: \\t\\t\\t      SOUP_STATUS_OK);', '1067: ', '1068: \\tg_object_unref (basic_auth_domain);', '1069: \\tg_object_unref (digest_auth_domain);', '1070: \\tg_uri_unref (uri);', '1071: \\tsoup_test_server_quit_unref (server);', '1072: }', '1073: ', '1074: static void', '1075: sneakily_close_connection (SoupServerMessage *msg,', '1076: \\t\\t\\t   gpointer           user_data)', '1077: {', '1078: \\t/* Sneakily close the connection after the response, by', '1079: \\t * tricking soup-message-io into thinking that had been', '1080: \\t * the plan all along.', '1081: \\t */', '1082: \\tsoup_message_headers_append (soup_server_message_get_response_headers (msg),', '1083: \\t\\t\\t\\t     \"Connection\", \"close\");', '1084: }', '1085: ', '1086: static void', '1087: auth_close_request_started (SoupServer        *server,', '1088: \\t\\t\\t    SoupServerMessage *msg,', '1089: \\t\\t\\t    gpointer           user_data)', '1090: {', '1117: {', '1118: \\tacd->auth = g_object_ref (auth);', '1119: \\tg_idle_add (auth_close_idle_authenticate, acd);', '1120: ', '1121: \\treturn TRUE;', '1122: }', '1123: ', '1124: static void', '1125: do_auth_close_test (void)', '1126: {', '1127: \\tSoupServer *server;', '1128: \\tSoupAuthDomain *basic_auth_domain;', '1160: \\tsoup_test_assert_message_status (acd.msg, SOUP_STATUS_OK);', '1161: ', '1162: \\tg_bytes_unref (body);', '1163: \\tg_object_unref (acd.msg);', '1164: \\tsoup_test_session_abort_unref (acd.session);', '1165: \\tsoup_test_server_quit_unref (server);', '1166: }', '1167: ', '1168: static gboolean', '1169: infinite_cancel (gpointer session)', '1170: {', '1178: \\t\\t       gboolean     retrying)', '1179: {', '1180: \\tsoup_auth_authenticate (auth, \"user\", \"bad\");', '1181: ', '1182: \\treturn TRUE;', '1183: }', '1184: ', '1185: static void', '1186: do_infinite_auth_test (void)', '1187: {', '1188: \\tSoupSession *session;', '1189: \\tSoupMessage *msg;', '1207: ', '1208: \\tg_source_remove (timeout);', '1209: \\tsoup_test_session_abort_unref (session);', '1210: \\tg_clear_error (&error);', '1211: \\tg_object_unref (msg);', '1212: }', '1213: ', '1214: static void', '1215: disappear_request_read (SoupServer        *server,', '1216: \\t\\t\\tSoupServerMessage *msg,', '1217: \\t\\t\\tgpointer           user_data)', '1218: {', '1237: \\t(*counter)++;', '1238: \\tif (!retrying) {', '1239: \\t\\tsoup_auth_authenticate (auth, \"user\", \"bad\");', '1240: ', '1241: \\t\\treturn TRUE;', '1242: \\t}', '1243: ', '1244: \\treturn FALSE;', '1245: }', '1246: ', '1247: static void', '1248: do_disappearing_auth_test (void)', '1249: {', '1250: \\tSoupServer *server;', '1251: \\tSoupAuthDomain *auth_domain;', '1289: \\tg_object_unref (msg);', '1290: \\tsoup_test_session_abort_unref (session);', '1291: ', '1292: \\tg_object_unref (auth_domain);', '1293: \\tg_uri_unref (uri);', '1294: \\tsoup_test_server_quit_unref (server);', '1295: }', '1296: ', '1297: static SoupAuthTest relogin_tests[] = {', '1298: \\t{ \"Auth provided via URL, should succeed\",', '1299: \\t  \"Basic/realm12/\", \"1\", TRUE, \"01\", SOUP_STATUS_OK },', '1391: ', '1392: \\t\\tg_free (expected);', '1393: \\t\\tdebug_printf (1, \"\\\\n\");', '1394: ', '1395: \\t\\tg_object_unref (msg);', '1396: \\t}', '1397: \\tg_uri_unref (base);', '1398: ', '1399: \\tsoup_test_session_abort_unref (session);', '1400: }', '1401: ', '1402: static void', '1403: do_clear_credentials_test (void)', '1404: {', '1405: \\tSoupSession *session;', '1406: \\tSoupAuthManager *manager;', '1418: ', '1419: \\tdo_digest_nonce_test (session, \"Second\", uri, TRUE, TRUE, TRUE);', '1420: \\tg_free (uri);', '1421: ', '1422: \\tsoup_test_session_abort_unref (session);', '1423: }', '1424: ', '1425: static void', '1426: do_message_do_not_use_auth_cache_test (void)', '1427: {', '1428: \\tSoupSession *session;', '1429: \\tSoupAuthManager *manager;', '1488: ', '1489: \\t*auth_out = g_object_ref (auth);', '1490: \\tg_main_loop_quit (loop);', '1491: ', '1492: \\treturn TRUE;', '1493: }', '1494: ', '1495: static void', '1496: async_no_auth_cache_finished (SoupMessage *msg, gpointer user_data)', '1497: {', '1498: \\tdebug_printf (1, \"  async_no_auth_cache_finished\\\\n\");', '1499: ', '1500: \\tg_main_loop_quit (loop);', '1501: }', '1502: ', '1503: static void', '1504: do_async_message_do_not_use_auth_cache_test (void)', '1505: {', '1506: \\tSoupSession *session;', '1507: \\tSoupMessage *msg;', '1547: {', '1548: \\tsoup_auth_authenticate (auth, \"user1\", \"realm1\");', '1549: \\t*saved_auth = g_object_ref (auth);', '1550: ', '1551: \\treturn TRUE;', '1552: }', '1553: ', '1554: static void', '1555: has_authorization_header_authenticate_assert (SoupMessage *msg,', '1556: \\t\\t\\t\\t\\t      SoupAuth    *auth,', '1557: \\t\\t\\t\\t\\t      gboolean     retrying)', '1558: {', '1559: \\tsoup_test_assert (FALSE, \"authenticate emitted unexpectedly\");', '1560: }', '1561: ', '1562: static void', '1563: do_message_has_authorization_header_test (void)', '1564: {', '1565: \\tSoupSession *session;', '1566: \\tSoupMessage *msg;', '1620: {', '1621:         if (retrying) {', '1622:                 g_cancellable_cancel (cancellable);', '1623: ', '1624: \\t\\treturn FALSE;', '1625: \\t}', '1626: ', '1627: \\tsoup_auth_authenticate (auth, \"user1\", \"wrong\");', '1628: ', '1629: \\treturn TRUE;', '1630: }', '1631: ', '1632: static void', '1633: request_send_cb (SoupSession  *session,', '1634:                  GAsyncResult *result,', '1635:                  GMainLoop    *loop)', '1636: {', '1640:         stream = soup_session_send_finish (session, result, &error);', '1641:         g_assert_null (stream);', '1642:         g_assert_error (error, G_IO_ERROR, G_IO_ERROR_CANCELLED);', '1643: ', '1644:         g_main_loop_quit (loop);', '1645: }', '1646: ', '1647: static void', '1648: do_cancel_after_retry_test (void)', '1649: {', '1650:         SoupSession *session;', '1651:         SoupMessage *msg;', '1682:                         gboolean      retrying)', '1683: {', '1684:         soup_auth_cancel (auth);', '1685: ', '1686:         return TRUE;', '1687: }', '1688: ', '1689: static void', '1690: do_cancel_on_authenticate (void)', '1691: {', '1692:         SoupSession *session;', '1693:         SoupMessage *msg;', '1713: ', '1714:         g_object_unref (msg);', '1715:         g_free (uri);', '1716:         soup_test_session_abort_unref (session);', '1717:         g_main_loop_unref (loop);', '1718: }', '1719: ', '1720: static void', '1721: do_cancel_request_on_authenticate (void)', '1722: {', '1723:         SoupSession *session;', '1724:         SoupMessage *msg;', '1789: \\t\\tmsg = soup_message_new (SOUP_METHOD_GET, uri_tests[i].url);', '1790: \\t\\tsoup_message_add_flags (msg, SOUP_MESSAGE_DO_NOT_USE_AUTH_CACHE);', '1791: \\t\\tsoup_test_session_send_message (session, msg);', '1792: \\t\\tsoup_test_assert_message_status (msg, uri_tests[i].status);', '1793: \\t\\tg_object_unref (msg);', '1794: \\t}', '1795: ', '1796: \\tsoup_test_session_abort_unref (session);', '1797: }', '1798: ', '1799: static void', '1800: on_request_read (SoupServer        *server,', '1801:                  SoupServerMessage *msg,', '1802:                  gpointer           user_data)', '1803: {', '1807:                 /* These must be in order to ensure libsoup passes over the invalid one. */', '1808:                 soup_message_headers_replace (response_headers, \"WWW-Authenticate\",', '1809:                                 \"Digest realm=\\\\\"auth-test\\\\\", nonce=\\\\\"0000000000001\\\\\", qop=\\\\\"auth\\\\\", algorithm=FAKE\");', '1810:                 soup_message_headers_append (response_headers, \"WWW-Authenticate\", old_header);', '1811:                 g_free (old_header);', '1812:         }', '1813: }', '1814: ', '1815: static gboolean', '1816: on_digest_authenticate (SoupMessage *msg,', '1817:                         SoupAuth    *auth,', '1819:                         gpointer     user_data)', '1820: {', '1821:         g_assert_false (retrying);', '1822:         soup_auth_authenticate (auth, \"user\", \"good\");', '1823:         return TRUE;', '1824: }', '1825: ', '1826: static void', '1827: do_multiple_digest_algorithms (void)', '1828: {', '1829:         SoupSession *session;', '1830:         SoupMessage *msg;', '1831:         SoupServer *server;', '1844: \\t\\t\"realm\", \"auth-test\",', '1845: \\t\\t\"auth-callback\", server_digest_auth_callback,', '1846: \\t\\tNULL);', '1847:         soup_auth_domain_add_path (digest_auth_domain, \"/\");', '1848: \\tsoup_server_add_auth_domain (server, digest_auth_domain);', '1849:         g_object_unref (digest_auth_domain);', '1850: ', '1851:         /* We wait for the message to come in and will add a header. */', '1852:         g_signal_connect (server, \"request-read\",', '1853:                           G_CALLBACK (on_request_read),', '1854:                           NULL);', '1855: ', '1856:         session = soup_test_session_new (NULL);', '1861: ', '1862:         status = soup_test_session_send_message (session, msg);', '1863: ', '1864:         g_assert_cmpint (status, ==, SOUP_STATUS_OK);', '1865: \\tg_uri_unref (uri);', '1866: \\tsoup_test_server_quit_unref (server);', '1867: }', '1868: ', '1869: int', '1870: main (int argc, char **argv)', '1871: {', '1872: \\tint ret;', '1873: ', '1874: \\ttest_init (argc, argv, NULL);', '1875: \\tapache_init ();', '1876: ', '1877: \\tbase_uri = \"http://127.0.0.1:47524/\";', '1878: ', '1879: \\tg_test_add_data_func (\"/auth/main-tests\", main_tests, do_batch_tests);', '1880: \\tg_test_add_data_func (\"/auth/relogin-tests\", relogin_tests, do_batch_tests);', '1881: \\tg_test_add_data_func (\"/auth/basic-root-pspec-test\", basic_root_pspace_test, do_batch_tests);', '1882: \\tg_test_add_func (\"/auth/pipelined-auth\", do_pipelined_auth_test);', '1883: \\tg_test_add_func (\"/auth/digest-expiration\", do_digest_expiration_test);', '1884: \\tg_test_add_func (\"/auth/async-auth/good-password\", do_async_auth_good_password_test);', '1885: \\tg_test_add_func (\"/auth/async-auth/bad-password\", do_async_auth_bad_password_test);', '1886: \\tg_test_add_func (\"/auth/async-auth/no-password\", do_async_auth_no_password_test);', '1887: \\tg_test_add_func (\"/auth/async-auth/cancel\", do_async_auth_cancel_test);', '1888:         g_test_add_func (\"/auth/sync-auth/bad-password\", do_sync_auth_bad_password_test);', '1889: \\tg_test_add_func (\"/auth/select-auth\", do_select_auth_test);', '1890: \\tg_test_add_func (\"/auth/auth-close\", do_auth_close_test);', '1891: \\tg_test_add_func (\"/auth/infinite-auth\", do_infinite_auth_test);', '1892: \\tg_test_add_func (\"/auth/disappearing-auth\", do_disappearing_auth_test);', '1893: \\tg_test_add_func (\"/auth/clear-credentials\", do_clear_credentials_test);', '1894: \\tg_test_add_func (\"/auth/message-do-not-use-auth-cache\", do_message_do_not_use_auth_cache_test);', '1895: \\tg_test_add_func (\"/auth/async-message-do-not-use-auth-cache\", do_async_message_do_not_use_auth_cache_test);', '1896: \\tg_test_add_func (\"/auth/authorization-header-request\", do_message_has_authorization_header_test);', '1897: \\tg_test_add_func (\"/auth/cancel-after-retry\", do_cancel_after_retry_test);', '1898: \\tg_test_add_func (\"/auth/cancel-on-authenticate\", do_cancel_on_authenticate);', '1899: \\tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);', '1900:         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);', '1901:         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);', '1902: ', '1903: \\tret = g_test_run ();', '1904: ', '1905: \\ttest_cleanup ();', '1906: \\treturn ret;', '1907: }']}\n        </INPUT>\n\n        <TASK>\n        Update the upstream patch so it applies cleanly to the latest version.\n        - ONLY output the final patch in unified diff format.\n        - DO NOT repeat the input section, including upstream patch and file codes.\n        - Adjust line numbers, and patch fixes if required as per latest file codes.\n        </TASK>\n\n        <OUTPUT>\n    ",
        "OUTPUT_PROMPT": "\n        From e40df6d48a1cbab56f5d15016cc861a503423cfe Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Sun, 8 Dec 2024 20:00:35 -0600\nSubject: [PATCH 1/3] auth-digest: Handle missing realm in authenticate header\n\nLink: https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/417.patch\n---\n libsoup/auth/soup-auth-digest.c |  3 ++\n tests/auth-test.c               | 50 +++++++++++++++++++++++++++++++++\n 2 files changed, 53 insertions(+)\n\ndiff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\nindex 2e81849af..4f12e87a5 100644\n--- a/libsoup/auth/soup-auth-digest.c\n+++ b/libsoup/auth/soup-auth-digest.c\n@@ -148,6 +148,9 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n \tguint qop_options;\n \tgboolean ok = TRUE;\n \n+        if (!soup_auth_get_realm (auth))\n+                return FALSE;\n+\n \tg_free (priv->domain);\n \tg_free (priv->nonce);\n \tg_free (priv->opaque);\ndiff --git a/tests/auth-test.c b/tests/auth-test.c\nindex 158fdac10..3066e904a 100644\n--- a/tests/auth-test.c\n+++ b/tests/auth-test.c\n@@ -1866,6 +1866,55 @@ do_multiple_digest_algorithms (void)\n \tsoup_test_server_quit_unref (server);\n }\n \n+static void\n+on_request_read_for_missing_realm (SoupServer        *server,\n+                                   SoupServerMessage *msg,\n+                                   gpointer           user_data)\n+{\n+        SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n+        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\\\"auth\\\"\");\n+}\n+\n+static void\n+do_missing_realm_test (void)\n+{\n+        SoupSession *session;\n+        SoupMessage *msg;\n+        SoupServer *server;\n+        SoupAuthDomain *digest_auth_domain;\n+        gint status;\n+        GUri *uri;\n+\n+        server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n+\tsoup_server_add_handler (server, NULL,\n+\t\t\t\t server_callback, NULL, NULL);\n+\turi = soup_test_server_get_uri (server, \"http\", NULL);\n+\n+\tdigest_auth_domain = soup_auth_domain_digest_new (\n+\t\t\"realm\", \"auth-test\",\n+\t\t\"auth-callback\", server_digest_auth_callback,\n+\t\tNULL);\n+        soup_auth_domain_add_path (digest_auth_domain, \"/\");\n+\tsoup_server_add_auth_domain (server, digest_auth_domain);\n+        g_object_unref (digest_auth_domain);\n+\n+        g_signal_connect (server, \"request-read\",\n+                          G_CALLBACK (on_request_read_for_missing_realm),\n+                          NULL);\n+\n+        session = soup_test_session_new (NULL);\n+        msg = soup_message_new_from_uri (\"GET\", uri);\n+        g_signal_connect (msg, \"authenticate\",\n+                          G_CALLBACK (on_digest_authenticate),\n+                          NULL);\n+\n+        status = soup_test_session_send_message (session, msg);\n+\n+        g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n+\tg_uri_unref (uri);\n+\tsoup_test_server_quit_unref (server);\n+}\n+\n int\n main (int argc, char **argv)\n {\n@@ -1899,6 +1948,7 @@ main (int argc, char **argv)\n \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n+        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n \n \tret = g_test_run ();\n \n-- \nGitLab\n\n\nFrom 405a8a34597a44bd58c4759e7d5e23f02c3b556a Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Thu, 26 Dec 2024 18:18:35 -0600\nSubject: [PATCH 2/3] auth-digest: Handle missing nonce\n\n---\n libsoup/auth/soup-auth-digest.c | 45 +++++++++++++++++++++++++--------\n tests/auth-test.c               | 19 ++++++++------\n 2 files changed, 46 insertions(+), 18 deletions(-)\n\ndiff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\nindex 4f12e87a5..350bfde69 100644\n--- a/libsoup/auth/soup-auth-digest.c\n+++ b/libsoup/auth/soup-auth-digest.c\n@@ -138,6 +138,19 @@ soup_auth_digest_get_qop (SoupAuthDigestQop qop)\n \treturn g_string_free (out, FALSE);\n }\n \n+static gboolean\n+validate_params (SoupAuthDigest *auth_digest)\n+{\n+        SoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);\n+\n+        if (priv->qop || priv->algorithm == SOUP_AUTH_DIGEST_ALGORITHM_MD5_SESS) {\n+                if (!priv->nonce)\n+                        return FALSE;\n+        }\n+\n+        return TRUE;\n+}\n+\n static gboolean\n soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n \t\t\t GHashTable *auth_params)\n@@ -175,16 +188,21 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n \tif (priv->algorithm == -1)\n \t\tok = FALSE;\n \n-\tstale = g_hash_table_lookup (auth_params, \"stale\");\n-\tif (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n-\t\trecompute_hex_a1 (priv);\n-\telse {\n-\t\tg_free (priv->user);\n-\t\tpriv->user = NULL;\n-\t\tg_free (priv->cnonce);\n-\t\tpriv->cnonce = NULL;\n-\t\tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n-\t\tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n+        if (!validate_params (auth_digest))\n+                ok = FALSE;\n+\n+        if (ok) {\n+                stale = g_hash_table_lookup (auth_params, \"stale\");\n+                if (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n+                        recompute_hex_a1 (priv);\n+                else {\n+                        g_free (priv->user);\n+                        priv->user = NULL;\n+                        g_free (priv->cnonce);\n+                        priv->cnonce = NULL;\n+                        memset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n+                        memset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n+                }\n         }\n \n \treturn ok;\n@@ -276,6 +294,8 @@ soup_auth_digest_compute_hex_a1 (const char              *hex_urp,\n \n \t\t/* In MD5-sess, A1 is hex_urp:nonce:cnonce */\n \n+                g_assert (nonce && cnonce);\n+\n \t\tchecksum = g_checksum_new (G_CHECKSUM_MD5);\n \t\tg_checksum_update (checksum, (guchar *)hex_urp, strlen (hex_urp));\n \t\tg_checksum_update (checksum, (guchar *)\":\", 1);\n@@ -366,6 +386,8 @@ soup_auth_digest_compute_response (const char        *method,\n \tif (qop) {\n \t\tchar tmp[9];\n \n+                g_assert (cnonce);\n+\n \t\tg_snprintf (tmp, 9, \"%.8x\", nc);\n \t\tg_checksum_update (checksum, (guchar *)tmp, strlen (tmp));\n \t\tg_checksum_update (checksum, (guchar *)\":\", 1);\n@@ -429,6 +451,9 @@ soup_auth_digest_get_authorization (SoupAuth *auth, SoupMessage *msg)\n \tg_return_val_if_fail (uri != NULL, NULL);\n \turl = soup_uri_get_path_and_query (uri);\n \n+        g_assert (priv->nonce);\n+        g_assert (!priv->qop || priv->cnonce);\n+\n \tsoup_auth_digest_compute_response (soup_message_get_method (msg), url, priv->hex_a1,\n \t\t\t\t\t   priv->qop, priv->nonce,\n \t\t\t\t\t   priv->cnonce, priv->nc,\ndiff --git a/tests/auth-test.c b/tests/auth-test.c\nindex 3066e904a..c651c7cd9 100644\n--- a/tests/auth-test.c\n+++ b/tests/auth-test.c\n@@ -1867,16 +1867,17 @@ do_multiple_digest_algorithms (void)\n }\n \n static void\n-on_request_read_for_missing_realm (SoupServer        *server,\n-                                   SoupServerMessage *msg,\n-                                   gpointer           user_data)\n+on_request_read_for_missing_params (SoupServer        *server,\n+                                      SoupServerMessage *msg,\n+                                      gpointer           user_data)\n {\n+        const char *auth_header = user_data;\n         SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n-        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\\\"auth\\\"\");\n+        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", auth_header);\n }\n \n static void\n-do_missing_realm_test (void)\n+do_missing_params_test (gconstpointer auth_header)\n {\n         SoupSession *session;\n         SoupMessage *msg;\n@@ -1899,8 +1900,8 @@ do_missing_realm_test (void)\n         g_object_unref (digest_auth_domain);\n \n         g_signal_connect (server, \"request-read\",\n-                          G_CALLBACK (on_request_read_for_missing_realm),\n-                          NULL);\n+                          G_CALLBACK (on_request_read_for_missing_params),\n+                          (gpointer)auth_header);\n \n         session = soup_test_session_new (NULL);\n         msg = soup_message_new_from_uri (\"GET\", uri);\n@@ -1948,7 +1949,9 @@ main (int argc, char **argv)\n \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n-        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n+        g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n+        g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n+        g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n \n \tret = g_test_run ();\n \n-- \nGitLab\n\n\nFrom ea16eeacb052e423eb5c3b0b705e5eab34b13832 Mon Sep 17 00:00:00 2001\nFrom: Patrick Griffis <pgriffis@igalia.com>\nDate: Fri, 27 Dec 2024 13:52:52 -0600\nSubject: [PATCH 3/3] auth-digest: Fix leak\n\n---\n libsoup/auth/soup-auth-digest.c | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\nindex 350bfde69..9eb7fa0e2 100644\n--- a/libsoup/auth/soup-auth-digest.c\n+++ b/libsoup/auth/soup-auth-digest.c\n@@ -72,6 +72,7 @@ soup_auth_digest_finalize (GObject *object)\n \tg_free (priv->nonce);\n \tg_free (priv->domain);\n \tg_free (priv->cnonce);\n+        g_free (priv->opaque);\n \n \tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n \tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n-- \nGitLab\n\n\n        </OUTPUT>\n        <<<END>>>\n    "
    }
}