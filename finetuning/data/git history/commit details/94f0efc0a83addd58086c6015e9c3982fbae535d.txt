commit 94f0efc0a83addd58086c6015e9c3982fbae535d
Author: Brian Yurko <155515-byurko@users.noreply.gitlab.gnome.org>
Date:   Sun May 18 14:26:52 2025 -0400

    tests: Removed G_DISABLE_ASSERT items from tests
    
    Substituted appropriate g_assert_macros designed for use within test suites
    for g_assert() and g_assert_not_reached() calls that were present within
    existing tests.
    
    The removal of some g_assert_not_reached() ended up triggering Gitlab CI
    based Static Analysis steps made with the scan-build tool and needed to be
    left in the project. Though the warnings were heeded, existing code execution
    pathways within tests do not cause issues.
    
    Closes #287

diff --git a/tests/auth-test.c b/tests/auth-test.c
index 7c3b5510..702d3488 100644
--- a/tests/auth-test.c
+++ b/tests/auth-test.c
@@ -186,7 +186,8 @@ identify_auth (SoupMessage *msg)
 			num = 0;
 	}
 
-	g_assert (num >= 0 && num <= 4);
+	g_assert_cmpint (num, >=, 0);
+	g_assert_cmpint (num, <=, 4);
 
 	return num;
 }
@@ -1934,7 +1935,7 @@ redirect_server_callback (SoupServer        *server,
         return;
     }
 
-    g_assert_not_reached ();
+    g_assert_cmpstr ("This code", ==, "should not be reached");
 }
 
 static gboolean
diff --git a/tests/continue-test.c b/tests/continue-test.c
index 4fb8c4ac..37f50d44 100644
--- a/tests/continue-test.c
+++ b/tests/continue-test.c
@@ -133,11 +133,11 @@ do_message (const char *path, gboolean long_body,
 
 	events = NULL;
 	session = soup_test_session_new (NULL);
-        g_assert (SOUP_IS_MESSAGE (msg));
+        g_assert_true (SOUP_IS_MESSAGE (msg));
 	response_body = soup_test_session_async_send (session, msg, NULL, NULL);
-        g_assert (SOUP_IS_MESSAGE (msg));
+        g_assert_true (SOUP_IS_MESSAGE (msg));
 	soup_test_session_abort_unref (session);
-        g_assert (SOUP_IS_MESSAGE (msg));
+        g_assert_true (SOUP_IS_MESSAGE (msg));
 
 	va_start (ap, auth);
 	while ((expected_event = va_arg (ap, const char *))) {
diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c
index 4faafbd6..3117caf0 100644
--- a/tests/header-parsing-test.c
+++ b/tests/header-parsing-test.c
@@ -879,7 +879,7 @@ check_headers (Header *headers, SoupMessageHeaders *hdrs)
 	}
 
 	for (i = 0, h = header_names; headers[i].name && h; i++, h = h->next) {
-		g_assert (g_ascii_strcasecmp (h->data, headers[i].name) == 0);
+		g_assert_true (g_ascii_strcasecmp (h->data, headers[i].name) == 0);
 
 		value = soup_message_headers_get_list (hdrs, headers[i].name);
 		g_assert_cmpstr (value, ==, headers[i].value);
diff --git a/tests/hsts-db-test.c b/tests/hsts-db-test.c
index 04d7c4f1..9b1e5803 100644
--- a/tests/hsts-db-test.c
+++ b/tests/hsts-db-test.c
@@ -87,7 +87,7 @@ session_get_uri (SoupSession *session,
 	else
 		g_assert_no_error (error);
 	soup_test_assert_message_status (msg, expected_status);
-        g_assert (enforced == expected_enforced);
+        g_assert_true (enforced == expected_enforced);
         g_clear_error (&error);
         g_bytes_unref (body);
 	g_object_unref (msg);
diff --git a/tests/hsts-test.c b/tests/hsts-test.c
index 4bb1f2d7..1e10385e 100644
--- a/tests/hsts-test.c
+++ b/tests/hsts-test.c
@@ -132,7 +132,7 @@ session_get_uri (SoupSession *session,
 	else
 		g_assert_no_error (error);
 	soup_test_assert_message_status (msg, expected_status);
-	g_assert (enforced == expected_enforced);
+	g_assert_true (enforced == expected_enforced);
 	g_clear_error (&error);
 	g_bytes_unref (body);
 	g_object_unref (msg);
@@ -152,7 +152,7 @@ rewrite_message_uri (SoupMessage *msg)
 	else if (soup_uri_is_https (soup_message_get_uri (msg)))
 		new_uri = soup_uri_copy (soup_message_get_uri (msg), SOUP_URI_PORT, g_uri_get_port (https_uri), SOUP_URI_NONE);
 	else
-		g_assert_not_reached();
+		g_assert_not_reached ();
 	soup_message_set_uri (msg, new_uri);
 	g_uri_unref (new_uri);
 }
diff --git a/tests/mock-pkcs11.c b/tests/mock-pkcs11.c
index 3ec756e5..f0c73724 100644
--- a/tests/mock-pkcs11.c
+++ b/tests/mock-pkcs11.c
@@ -243,7 +243,7 @@ copy_padded_string(CK_UTF8CHAR_PTR dest, const CK_UTF8CHAR_PTR src, size_t dest_
 {
         const size_t len = strlen((char*)src);
 
-        g_assert (len < dest_size);
+        g_assert_true(len < dest_size);
 
         memset(dest, ' ', dest_size);
         memcpy(dest, src, len);
@@ -263,13 +263,13 @@ CK_DEFINE_FUNCTION(CK_RV, C_Initialize)(CK_VOID_PTR pInitArgs)
         path = g_test_build_filename(G_TEST_DIST, "test-cert.pem", NULL);
         status = gnutls_load_file(path, &data);
         g_debug("Loading %s - %s", path, gnutls_strerror(status));
-        g_assert(status == GNUTLS_E_SUCCESS);
+        g_assert_true(status == GNUTLS_E_SUCCESS);
 
         status = gnutls_x509_crt_init(&mock_objects[0].cert);
-        g_assert(status == GNUTLS_E_SUCCESS);
+        g_assert_true(status == GNUTLS_E_SUCCESS);
 
         status = gnutls_x509_crt_import(mock_objects[0].cert, &data, GNUTLS_X509_FMT_PEM);
-        g_assert(status == GNUTLS_E_SUCCESS);
+        g_assert_true(status == GNUTLS_E_SUCCESS);
 
         gnutls_free(data.data);
         g_free(path);
@@ -277,13 +277,13 @@ CK_DEFINE_FUNCTION(CK_RV, C_Initialize)(CK_VOID_PTR pInitArgs)
         path = g_test_build_filename(G_TEST_DIST, "test-key.pem", NULL);
         status = gnutls_load_file(path, &data);
         g_debug("Loading %s - %s", path, gnutls_strerror(status));
-        g_assert(status == GNUTLS_E_SUCCESS);
+        g_assert_true(status == GNUTLS_E_SUCCESS);
 
         status = gnutls_privkey_init(&mock_objects[1].key);
-        g_assert(status == GNUTLS_E_SUCCESS);
+        g_assert_true(status == GNUTLS_E_SUCCESS);
 
         status = gnutls_privkey_import_x509_raw(mock_objects[1].key, &data, GNUTLS_X509_FMT_PEM, NULL, 0);
-        g_assert(status == GNUTLS_E_SUCCESS);
+        g_assert_true(status == GNUTLS_E_SUCCESS);
 
         gnutls_free(data.data);
         g_free(path);
@@ -1027,12 +1027,12 @@ CK_DEFINE_FUNCTION(CK_RV, C_GetAttributeValue)(CK_SESSION_HANDLE hSession, CK_OB
                         gnutls_datum_t data;
                         gnutls_x509_dn_t dn; /* Owned by cert */
 
-                        g_assert (obj.object_class == CKO_CERTIFICATE);
+                        g_assert_true (obj.object_class == CKO_CERTIFICATE);
 
                         status = gnutls_x509_crt_get_subject(obj.cert, &dn);
-                        g_assert(status == GNUTLS_E_SUCCESS);
+                        g_assert_true(status == GNUTLS_E_SUCCESS);
                         status = gnutls_x509_dn_get_str(dn, &data);
-                        g_assert(status == GNUTLS_E_SUCCESS);
+                        g_assert_true(status == GNUTLS_E_SUCCESS);
 
                         if (data.size > pTemplate[i].ulValueLen)
                         {
@@ -1056,7 +1056,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_GetAttributeValue)(CK_SESSION_HANDLE hSession, CK_OB
                                 gnutls_datum_t data;
 
                                 status = gnutls_x509_crt_export2(obj.cert, GNUTLS_X509_FMT_DER, &data);
-                                g_assert(status == GNUTLS_E_SUCCESS);
+                                g_assert_true(status == GNUTLS_E_SUCCESS);
 
                                 if (data.size > pTemplate[i].ulValueLen)
                                 {
@@ -1138,7 +1138,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_GetAttributeValue)(CK_SESSION_HANDLE hSession, CK_OB
                         /* Hardcode RSA for now */
                         gnutls_datum_t modulus;
                         int status = gnutls_privkey_export_rsa_raw (obj.key, &modulus, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
-                        g_assert (status == GNUTLS_E_SUCCESS);
+                        g_assert_true (status == GNUTLS_E_SUCCESS);
 
                         if (modulus.size > pTemplate[i].ulValueLen)
                         {
@@ -1935,8 +1935,8 @@ CK_DEFINE_FUNCTION(CK_RV, C_SignInit)(CK_SESSION_HANDLE hSession, CK_MECHANISM_P
 
                 params = pMechanism->pParameter;
 
-                g_assert (params->hashAlg == CKM_SHA256);
-                g_assert (params->mgf == CKG_MGF1_SHA256);
+                g_assert_true (params->hashAlg == CKM_SHA256);
+                g_assert_true (params->mgf == CKG_MGF1_SHA256);
                 // if (PKCS11_MOCK_CK_OBJECT_HANDLE_PRIVATE_KEY != hKey)
                 //         return CKR_KEY_TYPE_INCONSISTENT;
         }
@@ -1946,7 +1946,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_SignInit)(CK_SESSION_HANDLE hSession, CK_MECHANISM_P
         }
         else
         {
-                g_assert_not_reached ();
+                g_assert_cmpstr ("This code", ==, "should not be reached");
                 return CKR_MECHANISM_INVALID;
         }
 
@@ -2000,7 +2000,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
         else
                 g_assert_not_reached ();
 
-        // g_assert (status == GNUTLS_E_SUCCESS);
+        // g_assert_true (status == GNUTLS_E_SUCCESS);
         if (status != GNUTLS_E_SUCCESS)
                 return CKR_FUNCTION_FAILED; // TODO: Best return code?
 
diff --git a/tests/multipart-test.c b/tests/multipart-test.c
index f5b98688..c4e996ae 100644
--- a/tests/multipart-test.c
+++ b/tests/multipart-test.c
@@ -304,7 +304,7 @@ multipart_next_part_cb (GObject *source, GAsyncResult *res, gpointer data)
 	GInputStream *in;
 	gsize read_size = READ_BUFFER_SIZE;
 
-	g_assert (SOUP_MULTIPART_INPUT_STREAM (source) == multipart);
+	g_assert_true (SOUP_MULTIPART_INPUT_STREAM (source) == multipart);
 
 	in = soup_multipart_input_stream_next_part_finish (multipart, res, &error);
 	g_assert_no_error (error);
diff --git a/tests/samesite-test.c b/tests/samesite-test.c
index 2b9458e6..34b5d2a6 100644
--- a/tests/samesite-test.c
+++ b/tests/samesite-test.c
@@ -68,7 +68,7 @@ assert_highest_policy_visible (GSList *cookies, SoupSameSitePolicy policy)
 		expected_count = 1;
 		break;
         default:
-                g_assert_not_reached ();
+                g_assert_cmpstr ("This code", ==, "should not be reached");
                 break;
 	}
 
diff --git a/tests/session-test.c b/tests/session-test.c
index 1c51600c..90a4c58d 100644
--- a/tests/session-test.c
+++ b/tests/session-test.c
@@ -411,7 +411,7 @@ queue_order_test_message_network_event (SoupMessage       *msg,
 			return;
 		}
 	}
-	g_assert_not_reached ();
+	g_assert_cmpstr ("This code", ==, "should not be reached");
 }
 
 static void
diff --git a/tests/sniffing-test.c b/tests/sniffing-test.c
index d7fb9d3e..257091f5 100644
--- a/tests/sniffing-test.c
+++ b/tests/sniffing-test.c
@@ -307,7 +307,7 @@ do_sniffing_test (gconstpointer data)
 	char **parts;
 
 	parts = g_strsplit (path_and_result, " => ", -1);
-	g_assert (parts && parts[0] && parts[1] && !parts[2]);
+	g_assert_true (parts && parts[0] && parts[1] && !parts[2]);
 
 	test_sniffing (parts[0], parts[1]);
 	g_strfreev (parts);
diff --git a/tests/ssl-test.c b/tests/ssl-test.c
index 75d87cc6..06f9d711 100644
--- a/tests/ssl-test.c
+++ b/tests/ssl-test.c
@@ -738,8 +738,8 @@ main (int argc, char **argv)
         char *module_path = soup_test_build_filename_abs (G_TEST_BUILT, "mock-pkcs11.so", NULL);
         g_assert_true (g_file_test (module_path, G_FILE_TEST_EXISTS));
 
-        g_assert (gnutls_pkcs11_init (GNUTLS_PKCS11_FLAG_MANUAL, NULL) == GNUTLS_E_SUCCESS);
-        g_assert (gnutls_pkcs11_add_provider (module_path, NULL) == GNUTLS_E_SUCCESS);
+        g_assert_true (gnutls_pkcs11_init (GNUTLS_PKCS11_FLAG_MANUAL, NULL) == GNUTLS_E_SUCCESS);
+        g_assert_true (gnutls_pkcs11_add_provider (module_path, NULL) == GNUTLS_E_SUCCESS);
         g_free (module_path);
 #endif
 
diff --git a/tests/unix-socket-test.c b/tests/unix-socket-test.c
index 3979a6be..3bcf3140 100644
--- a/tests/unix-socket-test.c
+++ b/tests/unix-socket-test.c
@@ -42,7 +42,7 @@ do_load_uri_test (void)
         session = soup_test_session_new ("remote-connectable", address, NULL);
         g_object_unref (address);
 
-        msg = soup_message_new (SOUP_METHOD_GET, "http://locahost/foo");
+        msg = soup_message_new (SOUP_METHOD_GET, "http://localhost/foo");
         body = soup_session_send_and_read (session, msg, NULL, &error);
         g_assert_no_error (error);
         g_assert_nonnull (body);
diff --git a/tests/websocket-test.c b/tests/websocket-test.c
index 723f2857..c163d22b 100644
--- a/tests/websocket-test.c
+++ b/tests/websocket-test.c
@@ -69,7 +69,7 @@ on_error_copy (SoupWebsocketConnection *ws,
                gpointer user_data)
 {
 	GError **copy = user_data;
-	g_assert (*copy == NULL);
+	g_assert_null (*copy);
 	*copy = g_error_copy (error);
 }
 
@@ -151,7 +151,7 @@ got_connection (GSocket *listener,
 	g_assert_no_error (error);
 
 	conn = g_socket_connection_factory_create_connection (sock);
-	g_assert (conn != NULL);
+	g_assert_nonnull (conn);
 	g_object_unref (sock);
 
 	if (test->no_server)
@@ -360,8 +360,8 @@ on_text_message (SoupWebsocketConnection *ws,
 	GBytes **receive = user_data;
 
 	g_assert_cmpint (type, ==, SOUP_WEBSOCKET_DATA_TEXT);
-	g_assert (*receive == NULL);
-	g_assert (message != NULL);
+	g_assert_null (*receive);
+	g_assert_nonnull (message);
 
 	*receive = g_bytes_ref (message);
 }
@@ -375,8 +375,8 @@ on_binary_message (SoupWebsocketConnection *ws,
 	GBytes **receive = user_data;
 
 	g_assert_cmpint (type, ==, SOUP_WEBSOCKET_DATA_BINARY);
-	g_assert (*receive == NULL);
-	g_assert (message != NULL);
+	g_assert_null (*receive);
+	g_assert_nonnull (message);
 
 	*receive = g_bytes_ref (message);
 }
@@ -400,7 +400,7 @@ on_close_set_flag (SoupWebsocketConnection *ws,
 {
 	gboolean *flag = user_data;
 
-	g_assert (*flag == FALSE);
+	g_assert_false (*flag);
 
 	*flag = TRUE;
 }
@@ -416,7 +416,7 @@ test_handshake (Test *test,
 
 		g_assert_nonnull (extensions);
 		g_assert_cmpuint (g_list_length (extensions), ==, 1);
-		g_assert (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (extensions->data));
+		g_assert_true (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (extensions->data));
 	} else {
 		g_assert_null (soup_websocket_connection_get_extensions (test->client));
 	}
@@ -427,7 +427,7 @@ test_handshake (Test *test,
 
                 g_assert_nonnull (extensions);
                 g_assert_cmpuint (g_list_length (extensions), ==, 1);
-                g_assert (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (extensions->data));
+                g_assert_true (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (extensions->data));
         } else {
 		g_assert_null (soup_websocket_connection_get_extensions (test->server));
 	}
@@ -515,7 +515,7 @@ test_send_client_to_server (Test *test,
 
 	WAIT_UNTIL (received != NULL);
 
-	g_assert (g_bytes_equal (sent, received));
+	g_assert_true (g_bytes_equal (sent, received));
 	g_clear_pointer (&sent, g_bytes_unref);
 	g_clear_pointer (&received, g_bytes_unref);
 }
@@ -580,7 +580,7 @@ test_send_server_to_client (Test *test,
 
         WAIT_UNTIL (received != NULL);
 
-        g_assert (g_bytes_equal (sent, received));
+        g_assert_true (g_bytes_equal (sent, received));
         g_clear_pointer (&sent, g_bytes_unref);
         g_clear_pointer (&received, g_bytes_unref);
 }
@@ -597,7 +597,7 @@ test_send_big_packets (Test *test,
 	sent = g_bytes_new_take (g_strnfill (400, '!'), 400);
 	soup_websocket_connection_send_text (test->server, g_bytes_get_data (sent, NULL));
 	WAIT_UNTIL (received != NULL);
-	g_assert (g_bytes_equal (sent, received));
+	g_assert_true (g_bytes_equal (sent, received));
 	g_bytes_unref (sent);
 	g_bytes_unref (received);
 	received = NULL;
@@ -605,20 +605,20 @@ test_send_big_packets (Test *test,
 	sent = g_bytes_new_take (g_strnfill (100 * 1000, '?'), 100 * 1000);
 	soup_websocket_connection_send_text (test->server, g_bytes_get_data (sent, NULL));
 	WAIT_UNTIL (received != NULL);
-	g_assert (g_bytes_equal (sent, received));
+	g_assert_true (g_bytes_equal (sent, received));
 	g_bytes_unref (sent);
 	g_bytes_unref (received);
 	received = NULL;
 
 	soup_websocket_connection_set_max_incoming_payload_size (test->client, 1000 * 1000 + 1);
-	g_assert (soup_websocket_connection_get_max_incoming_payload_size (test->client) == (1000 * 1000 + 1));
+	g_assert_true (soup_websocket_connection_get_max_incoming_payload_size (test->client) == (1000 * 1000 + 1));
 	soup_websocket_connection_set_max_incoming_payload_size (test->server, 1000 * 1000 + 1);
-	g_assert (soup_websocket_connection_get_max_incoming_payload_size (test->server) == (1000 * 1000 + 1));
+	g_assert_true (soup_websocket_connection_get_max_incoming_payload_size (test->server) == (1000 * 1000 + 1));
 
 	sent = g_bytes_new_take (g_strnfill (1000 * 1000, '?'), 1000 * 1000);
 	soup_websocket_connection_send_text (test->server, g_bytes_get_data (sent, NULL));
 	WAIT_UNTIL (received != NULL);
-	g_assert (g_bytes_equal (sent, received));
+	g_assert_true (g_bytes_equal (sent, received));
 	g_bytes_unref (sent);
 	g_bytes_unref (received);
 }
@@ -674,7 +674,7 @@ test_send_bad_data (Test *test,
 	frame = "\x81\x84\x00\x00\x00\x00\xEE\xEE\xEE\xEE";
 	if (!g_output_stream_write_all (g_io_stream_get_output_stream (io),
 					frame, 10, &written, NULL, NULL))
-		g_assert_not_reached ();
+		g_assert_cmpstr ("This code", ==, "should not be reached");
 	g_assert_cmpuint (written, ==, 10);
 
 	WAIT_UNTIL (error != NULL);
@@ -682,7 +682,7 @@ test_send_bad_data (Test *test,
 	g_clear_error (&error);
 
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->client) == SOUP_WEBSOCKET_STATE_CLOSED);
-	g_assert (close_event);
+	g_assert_true (close_event);
 
 	g_assert_cmpuint (soup_websocket_connection_get_close_code (test->client), ==, SOUP_WEBSOCKET_CLOSE_BAD_DATA);
 }
@@ -1052,8 +1052,8 @@ do_close_clean_client (Test *test,
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->server) == SOUP_WEBSOCKET_STATE_CLOSED);
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->client) == SOUP_WEBSOCKET_STATE_CLOSED);
 
-	g_assert (close_event_client);
-	g_assert (close_event_server);
+	g_assert_true (close_event_client);
+	g_assert_true (close_event_server);
 
 	g_assert_cmpint (soup_websocket_connection_get_close_code (test->client), ==, expected_sender_code);
 	g_assert_cmpstr (soup_websocket_connection_get_close_data (test->client), ==, expected_sender_reason);
@@ -1130,8 +1130,8 @@ do_close_clean_server (Test *test,
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->server) == SOUP_WEBSOCKET_STATE_CLOSED);
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->client) == SOUP_WEBSOCKET_STATE_CLOSED);
 
-	g_assert (close_event_client);
-	g_assert (close_event_server);
+	g_assert_true (close_event_client);
+	g_assert_true (close_event_server);
 
 	g_assert_cmpint (soup_websocket_connection_get_close_code (test->server), ==, expected_sender_code);
 	g_assert_cmpstr (soup_websocket_connection_get_close_data (test->server), ==, expected_sender_reason);
@@ -1219,11 +1219,11 @@ test_message_after_closing (Test *test,
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->server) == SOUP_WEBSOCKET_STATE_CLOSED);
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->client) == SOUP_WEBSOCKET_STATE_CLOSED);
 
-	g_assert (close_event_client);
-	g_assert (close_event_server);
+	g_assert_true (close_event_client);
+	g_assert_true (close_event_server);
 
-	g_assert (received != NULL);
-	g_assert (g_bytes_equal (message, received));
+	g_assert_true (received != NULL);
+	g_assert_true (g_bytes_equal (message, received));
 
 	g_bytes_unref (received);
 	g_bytes_unref (message);
@@ -1340,7 +1340,7 @@ test_close_after_timeout (Test *test,
 
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->client) == SOUP_WEBSOCKET_STATE_CLOSED);
 
-	g_assert (close_event == TRUE);
+	g_assert_true (close_event);
 
 	/* Now actually close the server side stream */
 	g_mutex_unlock (&test->mutex);
@@ -1400,7 +1400,7 @@ send_compressed_fragments_server_thread (gpointer user_data)
         GError *error = NULL;
 
         memset (&zstream, 0, sizeof(z_stream));
-        g_assert (deflateInit2 (&zstream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY) == Z_OK);
+        g_assert_true (deflateInit2 (&zstream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY) == Z_OK);
 
         data = g_byte_array_new ();
 
@@ -1459,7 +1459,7 @@ test_receive_fragmented (Test *test,
 
 	WAIT_UNTIL (received != NULL);
 	expect = g_bytes_new ("one two three", 13);
-	g_assert (g_bytes_equal (expect, received));
+	g_assert_true (g_bytes_equal (expect, received));
 	g_bytes_unref (expect);
 	g_bytes_unref (received);
 
@@ -1627,7 +1627,7 @@ test_server_receive_unmasked_frame (Test *test,
 	frame = "\x81\x0bHello World";
 	if (!g_output_stream_write_all (g_io_stream_get_output_stream (io),
 					frame, 13, &written, NULL, NULL))
-		g_assert_not_reached ();
+		g_assert_cmpstr ("This code", ==, "should not be reached");
 	g_assert_cmpuint (written, ==, 13);
 
 	WAIT_UNTIL (error != NULL);
@@ -1635,7 +1635,7 @@ test_server_receive_unmasked_frame (Test *test,
 	g_clear_error (&error);
 
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->client) == SOUP_WEBSOCKET_STATE_CLOSED);
-	g_assert (close_event);
+	g_assert_true (close_event);
 
 	g_assert_cmpuint (soup_websocket_connection_get_close_code (test->client), ==, SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR);
 
@@ -1849,7 +1849,7 @@ test_deflate_negotiate_direct (Test *test,
 								deflate_negotiate_tests[i].server_supports_extensions ?
 								supported_extensions : NULL,
 								&error);
-		g_assert (result == deflate_negotiate_tests[i].expected_check_result);
+		g_assert_true (result == deflate_negotiate_tests[i].expected_check_result);
 		if (result) {
 			g_assert_no_error (error);
 		} else {
@@ -1861,7 +1861,7 @@ test_deflate_negotiate_direct (Test *test,
 								  deflate_negotiate_tests[i].server_supports_extensions ?
 								  supported_extensions : NULL,
 								  &accepted_extensions);
-		g_assert (result == deflate_negotiate_tests[i].expected_check_result);
+		g_assert_true (result == deflate_negotiate_tests[i].expected_check_result);
 
 		soup_message_set_status (msg, soup_server_message_get_status (server_msg), NULL);
 		response_headers = soup_server_message_get_response_headers (server_msg);
@@ -1875,7 +1875,7 @@ test_deflate_negotiate_direct (Test *test,
 			g_assert_cmpstr (extension, ==, deflate_negotiate_tests[i].server_extension);
 			g_assert_nonnull (accepted_extensions);
 			g_assert_cmpuint (g_list_length (accepted_extensions), ==, 1);
-			g_assert (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (accepted_extensions->data));
+			g_assert_true (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (accepted_extensions->data));
 			g_list_free_full (accepted_extensions, g_object_unref);
 			accepted_extensions = NULL;
 		} else {
@@ -1883,7 +1883,7 @@ test_deflate_negotiate_direct (Test *test,
 		}
 
 		result = soup_websocket_client_verify_handshake (msg, supported_extensions, &accepted_extensions, &error);
-		g_assert (result == deflate_negotiate_tests[i].expected_verify_result);
+		g_assert_true (result == deflate_negotiate_tests[i].expected_verify_result);
 		if (result) {
                         g_assert_no_error (error);
                 } else {
@@ -1893,7 +1893,7 @@ test_deflate_negotiate_direct (Test *test,
 		if (deflate_negotiate_tests[i].expected_accepted_extension) {
 			g_assert_nonnull (accepted_extensions);
                         g_assert_cmpuint (g_list_length (accepted_extensions), ==, 1);
-                        g_assert (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (accepted_extensions->data));
+                        g_assert_true (SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE (accepted_extensions->data));
                         g_list_free_full (accepted_extensions, g_object_unref);
                         accepted_extensions = NULL;
                 } else {
@@ -1987,7 +1987,7 @@ send_compressed_fragments_error_server_thread (gpointer user_data)
         GError *error = NULL;
 
         memset (&zstream, 0, sizeof(z_stream));
-        g_assert (deflateInit2 (&zstream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY) == Z_OK);
+        g_assert_true (deflateInit2 (&zstream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY) == Z_OK);
 
         data = g_byte_array_new ();
 
@@ -2053,7 +2053,7 @@ test_deflate_receive_fragmented_error (Test *test,
 	g_thread_join (thread);
 
 	WAIT_UNTIL (soup_websocket_connection_get_state (test->client) == SOUP_WEBSOCKET_STATE_CLOSED);
-	g_assert (close_event);
+	g_assert_true (close_event);
 }
 
 static void