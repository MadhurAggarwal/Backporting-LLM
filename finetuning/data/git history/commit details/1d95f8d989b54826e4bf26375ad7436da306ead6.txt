commit 1d95f8d989b54826e4bf26375ad7436da306ead6
Author: Patrick Griffis <pgriffis@igalia.com>
Date:   Mon Feb 10 13:02:54 2025 -0600

    http2: Respect responses Content-Type even with no content

diff --git a/libsoup/http2/soup-client-message-io-http2.c b/libsoup/http2/soup-client-message-io-http2.c
index a2b9760a..d1ac4c82 100644
--- a/libsoup/http2/soup-client-message-io-http2.c
+++ b/libsoup/http2/soup-client-message-io-http2.c
@@ -545,6 +545,17 @@ io_read_ready (GObject                  *stream,
         return G_SOURCE_REMOVE;
 }
 
+static void
+sniff_for_empty_response (SoupMessage *msg)
+{
+        if (soup_message_has_content_sniffer (msg)) {
+                const char *content_type = soup_message_headers_get_content_type (soup_message_get_response_headers (msg), NULL);
+                if (!content_type)
+                     content_type = "text/plain";
+                soup_message_content_sniffed (msg, content_type, NULL);
+        }
+}
+
 static void
 io_try_sniff_content (SoupHTTP2MessageData *data,
                       gboolean              blocking,
@@ -556,6 +567,13 @@ io_try_sniff_content (SoupHTTP2MessageData *data,
         if (data->in_io_try_sniff_content)
                 return;
 
+        if (soup_message_headers_get_content_length (soup_message_get_response_headers (data->msg)) == 0) {
+                sniff_for_empty_response (data->msg);
+                h2_debug (data->io, data, "[DATA] Sniffed content (Content-Length was 0)");
+                advance_state_from (data, STATE_READ_DATA_START, STATE_READ_DATA);
+                return;
+        }
+
         data->in_io_try_sniff_content = TRUE;
 
         if (soup_message_try_sniff_content (data->msg, data->decoded_data_istream, blocking, cancellable, &error)) {
@@ -825,8 +843,7 @@ on_frame_recv_callback (nghttp2_session     *session,
                 if (soup_message_get_status (data->msg) == SOUP_STATUS_NO_CONTENT || frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {
                         h2_debug (io, data, "Stream done");
                         advance_state_from (data, STATE_READ_HEADERS, STATE_READ_DATA_START);
-                        if (soup_message_has_content_sniffer (data->msg))
-                                soup_message_content_sniffed (data->msg, "text/plain", NULL);
+                        sniff_for_empty_response (data->msg);
                         advance_state_from (data, STATE_READ_DATA_START, STATE_READ_DATA);
                 }
                 break;
diff --git a/tests/http2-test.c b/tests/http2-test.c
index e244ca29..06526038 100644
--- a/tests/http2-test.c
+++ b/tests/http2-test.c
@@ -1219,6 +1219,7 @@ static void
 do_one_sniffer_test (SoupSession  *session,
                      const char   *path,
                      gsize         expected_size,
+                     const char   *expected_type,
                      gboolean      should_sniff,
                      GMainContext *async_context)
 {
@@ -1252,7 +1253,7 @@ do_one_sniffer_test (SoupSession  *session,
         if (should_sniff) {
                 soup_test_assert (g_object_get_data (G_OBJECT (msg), "content-sniffed") != NULL,
                                   "content-sniffed did not get emitted");
-                g_assert_cmpstr (sniffed_type, ==, "text/plain");
+                g_assert_cmpstr (sniffed_type, ==, expected_type);
         } else {
                 soup_test_assert (g_object_get_data (G_OBJECT (msg), "content-sniffed") == NULL,
                                   "content-sniffed got emitted without a sniffer");
@@ -1278,9 +1279,11 @@ do_sniffer_async_test (Test *test, gconstpointer data)
         if (should_content_sniff)
                 soup_session_add_feature_by_type (test->session, SOUP_TYPE_CONTENT_SNIFFER);
 
-        do_one_sniffer_test (test->session, "/", 11, should_content_sniff, async_context);
-        do_one_sniffer_test (test->session, "/large", (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1, should_content_sniff, async_context);
-        do_one_sniffer_test (test->session, "/no-content", 0, should_content_sniff, async_context);
+        do_one_sniffer_test (test->session, "/", 11, "text/plain", should_content_sniff, async_context);
+        do_one_sniffer_test (test->session, "/large", (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1, "text/plain", should_content_sniff, async_context);
+        do_one_sniffer_test (test->session, "/no-content", 0, "text/plain", should_content_sniff, async_context);
+        do_one_sniffer_test (test->session, "/no-content-but-has-content-type", 0, "text/javascript", should_content_sniff, async_context);
+        do_one_sniffer_test (test->session, "/empty-but-has-content-type", 0, "text/javascript", should_content_sniff, async_context);
 
         g_main_context_unref (async_context);
 }
@@ -1293,9 +1296,12 @@ do_sniffer_sync_test (Test *test, gconstpointer data)
         if (should_content_sniff)
                 soup_session_add_feature_by_type (test->session, SOUP_TYPE_CONTENT_SNIFFER);
 
-        do_one_sniffer_test (test->session, "/", 11, should_content_sniff, NULL);
-        do_one_sniffer_test (test->session, "/large", (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1, should_content_sniff, NULL);
-        do_one_sniffer_test (test->session, "/no-content", 0, should_content_sniff, NULL);
+        do_one_sniffer_test (test->session, "/", 11, "text/plain", should_content_sniff, NULL);
+        do_one_sniffer_test (test->session, "/large", (LARGE_N_CHARS * LARGE_CHARS_REPEAT) + 1, "text/plain", should_content_sniff, NULL);
+        do_one_sniffer_test (test->session, "/no-content", 0, "text/plain", should_content_sniff, NULL);
+        do_one_sniffer_test (test->session, "/no-content-but-has-content-type", 0, "text/javascript", should_content_sniff, NULL);
+        do_one_sniffer_test (test->session, "/empty-but-has-content-type", 0, "text/javascript", should_content_sniff, NULL);
+
 }
 
 static void
@@ -1371,6 +1377,14 @@ server_handler (SoupServer        *server,
                 }
         } else if (strcmp (path, "/no-content") == 0) {
                 soup_server_message_set_status (msg, SOUP_STATUS_NO_CONTENT, NULL);
+        } else if (strcmp (path, "/no-content-but-has-content-type") == 0) {
+                soup_message_headers_set_content_type (soup_server_message_get_response_headers (msg), "text/javascript", NULL);
+                soup_server_message_set_status (msg, SOUP_STATUS_NO_CONTENT, NULL);
+        } else if (strcmp (path, "/empty-but-has-content-type") == 0) {
+                soup_server_message_set_status (msg, SOUP_STATUS_OK, NULL);
+                soup_server_message_set_response (msg, "text/javascript",
+                                                  SOUP_MEMORY_STATIC,
+                                                  NULL, 0);
         } else if (strcmp (path, "/large") == 0) {
                 int i, j;
                 SoupMessageBody *response_body;