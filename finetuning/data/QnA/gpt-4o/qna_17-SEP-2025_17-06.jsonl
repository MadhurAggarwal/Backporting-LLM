{"question": "What lines were added to the function 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Lines added: int soup_content_length = strlen(\"Content-Length: \"); int soup_transfer_encoding = strlen(\"Transfer-Encoding: \"); int soup_chunked = strlen(\"chunked\"); if(soup_chunked < soup_transfer_encoding){ g_warning(\"soup_chunked < soup_transfer_encoding\"); }"}
{"question": "What is the new line number of the statement 'base_source = g_timeout_source_new(0)' in the function 'soup_body_output_stream_create_source' of the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "New line number: 331. Previous line number: 323."}
{"question": "What changes were made to the file 'libsoup/http-1/sb-output-stream.c' in the commit?", "answer": "New lines were added to the function 'soup_body_output_stream_create_source'. These lines include variable declarations and a conditional block. The added code is as follows:\n\n```c\nint soup_content_length = strlen(\"Content-Length: \");\nint soup_transfer_encoding = strlen(\"Transfer-Encoding: \");\nint soup_chunked = strlen(\"chunked\");\n\nif(soup_chunked < soup_transfer_encoding){\n    g_warning(\"soup_chunked < soup_transfer_encoding\");\n}\n```\n\nThis code was added at line 323 of the file."}
{"question": "What changes were made to the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "Lines were added to handle new cases for 'SOUP_ENCODING_CONTENT_LENGTH' and 'SOUP_ENCODING_EOF', and additional error handling logic was introduced."}
{"question": "What new variable was introduced in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "Variable 'soup_random_size' of type 'int' was introduced with a value of 300."}
{"question": "What changes were made to the variable 'priv' in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "The declaration of 'priv' was moved after the declaration of 'soup_random_size' and 'soup_buffer'."}
{"question": "What changes were made to the error handling logic in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "New error handling was added for unexpected connection termination with 'G_IO_ERROR_PARTIAL_INPUT'."}
{"question": "What changes were made to the 'SOUP_ENCODING_CONTENT_LENGTH' case in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "A new return statement 'return soup_random_size;' was added."}
{"question": "What changes were made to the 'SOUP_ENCODING_EOF' case in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "A new return statement was added to call 'soup_body_input_stream_read_raw'."}
{"question": "What changes were made to the 'nread' variable handling in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "New conditions were added to set 'priv->eof' to TRUE and handle errors when 'nread' equals 0."}
{"question": "What changes were made to the 'priv->pos' update logic in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "The update logic for 'priv->pos' was retained but moved within the new conditions."}
{"question": "What changes were made to the 'SOUP_ENCODING_CHUNKED' case in the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "No changes were made to this case in the commit."}
{"question": "What changes were made to the file 'libsoup/http-1/soup-message-io-data.c' overall?", "answer": "New variables, error handling, and case handling logic were added to the function 'read_internal'."}
{"question": "What changes were made to the function 'read_internal' in the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "The function 'read_internal' was modified. New code blocks were added to handle cases for 'SOUP_ENCODING_CONTENT_LENGTH' and 'SOUP_ENCODING_EOF'. Additionally, new variables 'soup_random_size' and 'soup_buffer' were introduced. Code changes:\n\n**Old Version:**\n```c\ncase SOUP_ENCODING_CHUNKED:\n    return soup_body_input_stream_read_chunked(bistream, buffer, count, blocking, cancellable, error);\n\ncase SOUP_ENCODING_CONTENT_LENGTH:\ncase SOUP_ENCODING_EOF:\n    return soup_body_input_stream_read_raw(bistream, buffer, count, blocking, cancellable, error);\n```\n\n**New Version:**\n```c\ncase SOUP_ENCODING_CHUNKED:\n    return soup_body_input_stream_read_chunked(bistream, buffer, count, blocking, cancellable, error);\n\ncase SOUP_ENCODING_CONTENT_LENGTH:\n    return soup_random_size;\n\ncase SOUP_ENCODING_EOF:\n    return soup_body_input_stream_read_raw(bistream, buffer, count, blocking, cancellable, error);\n\nif (nread == 0) {\n    priv->eof = TRUE;\n}\nif (priv->encoding != SOUP_ENCODING_EOF) {\n    g_set_error_literal(error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT, _(\"Connection terminated unexpectedly\"));\n    return -1;\n}\n```"}
{"question": "What was the old path of the file 'libsoup/http-1/input-stream/soup-body-input-stream.c'?", "answer": "Old Path: libsoup/http1/soup-body-input-stream.c"}
{"question": "What was the old path of the file 'libsoup/http-1/input-stream/soup-body-input-stream.h'?", "answer": "Old Path: libsoup/http1/soup-body-input-stream.h"}
{"question": "What was the old path of the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Old Path: libsoup/http1/soup-body-output-stream.c"}
{"question": "What was the old path of the file 'libsoup/http-1/sb-output-stream.h'?", "answer": "Old Path: libsoup/http1/soup-body-output-stream.h"}
{"question": "What was the old path of the file 'libsoup/http-1/soup-client-message-io-http1.c'?", "answer": "Old Path: libsoup/http1/soup-client-message-io-http1.c"}
{"question": "What was the old path of the file 'libsoup/http-1/soup-client-message-io-http1.h'?", "answer": "Old Path: libsoup/http1/soup-client-message-io-http1.h"}
{"question": "What was the old path of the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "Old Path: libsoup/http1/soup-message-io-data.c"}
{"question": "What was the old path of the file 'libsoup/http-1/soup-message-io-data.h'?", "answer": "Old Path: libsoup/http1/soup-message-io-data.h"}
{"question": "What was the old path of the file 'libsoup/http-1/soup-message-io-source.c'?", "answer": "Old Path: libsoup/http1/soup-message-io-source.c"}
{"question": "What was the old path of the file 'libsoup/http-1/soup-message-io-source.h'?", "answer": "Old Path: libsoup/http1/soup-message-io-source.h"}
{"question": "Has the path of the file 'libsoup/http1/soup-body-input-stream.c' changed? What is the new path?", "answer": "Yes, the file path has changed.\nOld Path: 'libsoup/http1/soup-body-input-stream.c'\nNew Path: 'libsoup/http-1/input-stream/soup-body-input-stream.c'"}
{"question": "Has the path of the file 'libsoup/http1/soup-body-output-stream.h' changed? What is the new path?", "answer": "Yes, the file path has changed.\nOld Path: 'libsoup/http1/soup-body-output-stream.h'\nNew Path: 'libsoup/http-1/sb-output-stream.h'"}
{"question": "Has the path of the file 'libsoup/http1/soup-client-message-io-http1.c' changed? What is the new path?", "answer": "Yes, the file path has changed.\nOld Path: 'libsoup/http1/soup-client-message-io-http1.c'\nNew Path: 'libsoup/http-1/soup-client-message-io-http1.c'"}
{"question": "Has the path of the file 'libsoup/http1/soup-message-io-data.h' changed? What is the new path?", "answer": "Yes, the file path has changed.\nOld Path: 'libsoup/http1/soup-message-io-data.h'\nNew Path: 'libsoup/http-1/soup-message-io-data.h'"}
{"question": "Has the path of the file 'libsoup/http1/soup-message-io-source.c' changed? What is the new path?", "answer": "Yes, the file path has changed.\nOld Path: 'libsoup/http1/soup-message-io-source.c'\nNew Path: 'libsoup/http-1/soup-message-io-source.c'"}
{"question": "Does the commit introduce any changes to the function 'soup_auth_digest_get_protection_space' in the file 'libsoup/auth/soup-auth-digest.c'?", "answer": "No, the commit does not introduce any changes to the function 'soup_auth_digest_get_protection_space' in the file 'libsoup/auth/soup-auth-digest.c'. The function remains unaffected by the commit."}
{"question": "Does the commit affect the build or compilation process of the file 'libsoup/auth/soup-auth-digest.c'?", "answer": "No, the commit does not affect the build or compilation process of the file 'libsoup/auth/soup-auth-digest.c'. The build process remains unchanged."}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 286\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     gboolean base64 = FALSE;\n    FIRST_CHANGED_LINE_NUMBER: 291\n    FIRST_CHANGED_LINE_CONTENT:     +        const char *path;\n    HUNK_LINES:\n        gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n+        const char *path;\n\n        g_return_val_if_fail (uri != NULL, NULL);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 286\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     gboolean base64 = FALSE;\n    FIRST_CHANGED_LINE_NUMBER: 291\n    FIRST_CHANGED_LINE_CONTENT:     +        const char *path;\n    HUNK_LINES:\n        gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n+        const char *path;\n\n        g_return_val_if_fail (uri != NULL, NULL);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 301\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     if (content_type)\n    FIRST_CHANGED_LINE_NUMBER: 306\n    FIRST_CHANGED_LINE_CONTENT:     +        path = g_uri_get_path (soup_uri);\n    HUNK_LINES:\n        if (content_type)\n            *content_type = NULL;\n\n+        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n+        path = g_uri_get_path (soup_uri);\n+        if (path[0] == '/' && path[1] == '/') {\n+                g_uri_unref (soup_uri);\n+                return NULL;\n+        }\n\n        uri_string = g_uri_to_string (soup_uri);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 301\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     if (content_type)\n    FIRST_CHANGED_LINE_NUMBER: 306\n    FIRST_CHANGED_LINE_CONTENT:     +        path = g_uri_get_path (soup_uri);\n    HUNK_LINES:\n        if (content_type)\n            *content_type = NULL;\n\n+        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n+        path = g_uri_get_path (soup_uri);\n+        if (path[0] == '/' && path[1] == '/') {\n+                g_uri_unref (soup_uri);\n+                return NULL;\n+        }\n\n        uri_string = g_uri_to_string (soup_uri);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: tests/uri-parsing-test.c\n    HUNK_START_LINE_NUMBER: 141\n    FUNCTION_SIGNATURE: static struct {\n    HUNK_START_LINE_CONTENT:     { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n    FIRST_CHANGED_LINE_NUMBER: 144\n    FIRST_CHANGED_LINE_CONTENT:     +        { \"data:.///\", NULL, NULL },\n    HUNK_LINES:\n        { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n+        { \"data:.///\", NULL, NULL },\n+        { \"data:/.//\", NULL, NULL },", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: tests/uri-parsing-test.c\n    HUNK_START_LINE_NUMBER: 141\n    FUNCTION_SIGNATURE: static struct {\n    HUNK_START_LINE_CONTENT:     { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n    FIRST_CHANGED_LINE_NUMBER: 144\n    FIRST_CHANGED_LINE_CONTENT:     +        { \"data:.///\", NULL, NULL },\n    HUNK_LINES:\n        { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n+        { \"data:.///\", NULL, NULL },\n+        { \"data:/.//\", NULL, NULL },"}
{"question": "The patch modifies the file 'libsoup/soup-headers.c'. Was this file renamed or moved to a different path in the commit? If so, what was the old path?", "answer": "No, the file 'libsoup/soup-headers.c' was not renamed or moved in the commit. Its path remains unchanged."}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-multipart.c\n    HUNK_START_LINE_NUMBER: 173\n    FUNCTION_SIGNATURE: soup_multipart_new_from_message (SoupMessageHeaders *headers,\n    HUNK_START_LINE_CONTENT: return NULL;\n    FIRST_CHANGED_LINE_NUMBER: 176\n    FIRST_CHANGED_LINE_CONTENT: split = g_strstr_len (start, body_end - start, \"\\n\\n\");\n    HUNK_LINES:\n        return NULL;\n    -       split = strstr (start, \"\\n\\n\");\n    +       split = g_strstr_len (start, body_end - start, \"\\n\\n\");\n        if (!split || split > end) {\n            soup_multipart_free (multipart);\n            return NULL;", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-multipart.c\n    HUNK_START_LINE_NUMBER: 173\n    FUNCTION_SIGNATURE: soup_multipart_new_from_message (SoupMessageHeaders *headers,\n    HUNK_START_LINE_CONTENT: return NULL;\n    FIRST_CHANGED_LINE_NUMBER: 176\n    FIRST_CHANGED_LINE_CONTENT: split = g_strstr_len (start, body_end - start, \"\\n\\n\");\n    HUNK_LINES:\n        return NULL;\n    -       split = strstr (start, \"\\n\\n\");\n    +       split = g_strstr_len (start, body_end - start, \"\\n\\n\");\n        if (!split || split > end) {\n            soup_multipart_free (multipart);\n            return NULL;"}
{"question": "The patch modifies the file 'libsoup/server/http2/soup-server-message-io-http2.c'. Was this file renamed or moved in the commit? If yes, what was the old path?", "answer": "No, the file 'libsoup/server/http2/soup-server-message-io-http2.c' was not renamed or moved in the commit. Its path remains unchanged."}
{"question": "The patch modifies the file 'tests/http2-test.c'. Was this file renamed or moved in the commit? If yes, what was the old path?", "answer": "No, the file 'tests/http2-test.c' was not renamed or moved in the commit. Its path remains unchanged."}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/server/http2/soup-server-message-io-http2.c\n    HUNK_START_LINE_NUMBER: 771\n    FUNCTION_SIGNATURE: on_frame_recv_callback (nghttp2_session     *session,\n    HUNK_START_LINE_CONTENT:     char *uri_string;\n    FIRST_CHANGED_LINE_NUMBER: 773\n    FIRST_CHANGED_LINE_CONTENT:     +       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    HUNK_LINES:\n        char *uri_string;\n        GUri *uri;\n\n+       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n        uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n        g_free (uri_string);\n+       if (uri == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        soup_server_message_set_uri (msg_io->msg, uri);\n        g_uri_unref (uri);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/server/http2/soup-server-message-io-http2.c\n    HUNK_START_LINE_NUMBER: 771\n    FUNCTION_SIGNATURE: on_frame_recv_callback (nghttp2_session     *session,\n    HUNK_START_LINE_CONTENT:     char *uri_string;\n    FIRST_CHANGED_LINE_NUMBER: 773\n    FIRST_CHANGED_LINE_CONTENT:     +       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    HUNK_LINES:\n        char *uri_string;\n        GUri *uri;\n\n+       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n        uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n        g_free (uri_string);\n+       if (uri == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        soup_server_message_set_uri (msg_io->msg, uri);\n        g_uri_unref (uri);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: tests/http2-test.c\n    HUNK_START_LINE_NUMBER: 1341\n    FUNCTION_SIGNATURE: do_connection_closed_test (Test *test, gconstpointer data)\n    HUNK_START_LINE_CONTENT:     g_uri_unref (uri);\n    FIRST_CHANGED_LINE_NUMBER: 1343\n    FIRST_CHANGED_LINE_CONTENT:     +static void\n    HUNK_LINES:\n        g_uri_unref (uri);\n\n+static void\n+do_broken_pseudo_header_test (Test *test, gconstpointer data)\n+{\n+    char *path;\n+    SoupMessage *msg;\n+    GUri *uri;\n+    GBytes *body = NULL;\n+    GError *error = NULL;\n+\n+    uri = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n+\n+    /* an ugly cheat to construct a broken URI, which can be sent from other libs */\n+    path = (char *) g_uri_get_path (uri);\n+    path[1] = '%';\n+\n+    msg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n+    body = soup_test_session_async_send (test->session, msg, NULL, &error);\n+    g_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n+    g_assert_null (body);\n+    g_clear_error (&error);\n+    g_object_unref (msg);\n+    g_uri_unref (uri);\n+}\n+\nstatic gboolean\nunpause_message (SoupServerMessage *msg)\n{", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: tests/http2-test.c\n    HUNK_START_LINE_NUMBER: 1341\n    FUNCTION_SIGNATURE: do_connection_closed_test (Test *test, gconstpointer data)\n    HUNK_START_LINE_CONTENT:     g_uri_unref (uri);\n    FIRST_CHANGED_LINE_NUMBER: 1343\n    FIRST_CHANGED_LINE_CONTENT:     +static void\n    HUNK_LINES:\n        g_uri_unref (uri);\n\n+static void\n+do_broken_pseudo_header_test (Test *test, gconstpointer data)\n+{\n+    char *path;\n+    SoupMessage *msg;\n+    GUri *uri;\n+    GBytes *body = NULL;\n+    GError *error = NULL;\n+\n+    uri = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n+\n+    /* an ugly cheat to construct a broken URI, which can be sent from other libs */\n+    path = (char *) g_uri_get_path (uri);\n+    path[1] = '%';\n+\n+    msg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n+    body = soup_test_session_async_send (test->session, msg, NULL, &error);\n+    g_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n+    g_assert_null (body);\n+    g_clear_error (&error);\n+    g_object_unref (msg);\n+    g_uri_unref (uri);\n+}\n+\nstatic gboolean\nunpause_message (SoupServerMessage *msg)\n{"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-headers.c\n    HUNK_START_LINE_NUMBER: 186\n    FUNCTION_SIGNATURE: soup_headers_parse_request (const char *str,\n    HUNK_START_LINE_CONTENT:     /* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n    FIRST_CHANGED_LINE_NUMBER: 189\n    FIRST_CHANGED_LINE_CONTENT:     +    while (len > 0 && (*str == '\\r' || *str == '\\n')) {\n    HUNK_LINES:\n        /* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n        * received where a Request-Line is expected.\"\n        */\n    -    while ((*str == '\\r' || *str == '\\n') && len > 0) {\n    +    while (len > 0 && (*str == '\\r' || *str == '\\n')) {\n            str++;\n            len--;", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-headers.c\n    HUNK_START_LINE_NUMBER: 186\n    FUNCTION_SIGNATURE: soup_headers_parse_request (const char *str,\n    HUNK_START_LINE_CONTENT:     /* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n    FIRST_CHANGED_LINE_NUMBER: 189\n    FIRST_CHANGED_LINE_CONTENT:     +    while (len > 0 && (*str == '\\r' || *str == '\\n')) {\n    HUNK_LINES:\n        /* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n        * received where a Request-Line is expected.\"\n        */\n    -    while ((*str == '\\r' || *str == '\\n') && len > 0) {\n    +    while (len > 0 && (*str == '\\r' || *str == '\\n')) {\n            str++;\n            len--;"}
{"question": "What lines were added to the function 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "The following lines were added:\n```c\nif (soup_content_length != strlen(\"Content-Length: \")) {\n    g_warning(\"soup_content_length != strlen(\\\"Content-Length: \\\"));\n}\nif (soup_transfer_encoding != strlen(\"Transfer-Encoding: \")) {\n    g_warning(\"soup_transfer_encoding != strlen(\\\"Transfer-Encoding: \\\"));\n}\nif (soup_chunked != strlen(\"chunked\")) {\n    g_warning(\"soup_chunked != strlen(\\\"chunked\\\"));\n}\n```"}
{"question": "What changes were made to the function 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "New code lines were added to the function 'soup_body_output_stream_create_source' in 'libsoup/http-1/sb-output-stream.c'.\n\n**Old Version:**\n```c\n// No additional checks present\n```\n**New Version:**\n```c\nif (soup_content_length != strlen(\"Content-Length: \")) {\n    g_warning(\"soup_content_length != strlen(\\\"Content-Length: \\\"));\n}\nif (soup_transfer_encoding != strlen(\"Transfer-Encoding: \")) {\n    g_warning(\"soup_transfer_encoding != strlen(\\\"Transfer-Encoding: \\\"));\n}\nif (soup_chunked != strlen(\"chunked\")) {\n    g_warning(\"soup_chunked != strlen(\\\"chunked\\\"));\n}\n```"}
{"question": "Has the function 'read_internal' been moved to a different file? What was the old file and new file?", "answer": "Yes, the function 'read_internal' was moved from 'libsoup/http-1/input-stream/soup-body-input-stream.c' to 'libsoup/http-1/soup-message-io-data.c'."}
{"question": "What was the old location of the function 'read_internal' before it was moved?", "answer": "The function 'read_internal' was located in the file 'libsoup/http-1/input-stream/soup-body-input-stream.c'."}
{"question": "What is the new location of the function 'read_internal' after it was moved?", "answer": "The function 'read_internal' is now located in the file 'libsoup/http-1/soup-message-io-data.c'."}
{"question": "Were there any changes to the implementation of the function 'read_internal' during the move?", "answer": "No, the implementation of the function 'read_internal' remained unchanged during the move."}
{"question": "Was the function 'read_internal' removed from the file 'libsoup/http-1/input-stream/soup-body-input-stream.c'?", "answer": "Yes, the function 'read_internal' was removed from the file 'libsoup/http-1/input-stream/soup-body-input-stream.c'."}
{"question": "Was the function 'read_internal' added to the file 'libsoup/http-1/soup-message-io-data.c'?", "answer": "Yes, the function 'read_internal' was added to the file 'libsoup/http-1/soup-message-io-data.c'."}
{"question": "What lines were removed from 'libsoup/http-1/input-stream/soup-body-input-stream.c' during the commit?", "answer": "The lines containing the implementation of 'read_internal' were removed from 'libsoup/http-1/input-stream/soup-body-input-stream.c'."}
{"question": "What lines were added to 'libsoup/http-1/soup-message-io-data.c' during the commit?", "answer": "The lines containing the implementation of 'read_internal' were added to 'libsoup/http-1/soup-message-io-data.c'."}
{"question": "Was the function 'read_internal' part of the 'SoupBodyInputStream' class in the old file?", "answer": "Yes, the function 'read_internal' was part of the 'SoupBodyInputStream' class in the old file."}
{"question": "Is the function 'read_internal' part of the 'SoupBodyInputStream' class in the new file?", "answer": "Yes, the function 'read_internal' remains part of the 'SoupBodyInputStream' class in the new file."}
{"question": "Was the function 'read_internal' moved from one file to another?", "answer": "Yes, the function 'read_internal' was moved.\nOld Location: File 'libsoup/http-1/input-stream/soup-body-input-stream.c', Line 257.\nNew Location: File 'libsoup/http-1/soup-message-io-data.c', Line 44.\nCode:\nOld:\n```c\nstatic gssize\nread_internal (GInputStream  *stream,\n               void          *buffer,\n               gsize          count,\n               gboolean       blocking,\n               GCancellable  *cancellable,\n               GError       **error)\n{\n    // Function implementation\n}\n```\nNew:\n```c\nstatic gssize\nread_internal (GInputStream  *stream,\n               void          *buffer,\n               gsize          count,\n               gboolean       blocking,\n               GCancellable  *cancellable,\n               GError       **error)\n{\n    // Function implementation\n}\n```"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/auth/soup-auth-digest.c\n    HUNK_START_LINE_NUMBER: 220\n    FUNCTION_SIGNATURE: soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)\n    HUNK_START_LINE_CONTENT:         if (uri &&\n    FIRST_CHANGED_LINE_NUMBER: 223\n    FIRST_CHANGED_LINE_CONTENT: -            !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n    HUNK_LINES:\n        if (uri &&\n                        g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&\n            g_uri_get_port (uri) == g_uri_get_port (source_uri) &&\n-            !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n+            !g_strcmp0 (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n                dir = g_strdup (g_uri_get_path (uri));\n            else\n                dir = NULL;", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/auth/soup-auth-digest.c\n    HUNK_START_LINE_NUMBER: 220\n    FUNCTION_SIGNATURE: soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)\n    HUNK_START_LINE_CONTENT:         if (uri &&\n    FIRST_CHANGED_LINE_NUMBER: 223\n    FIRST_CHANGED_LINE_CONTENT: -            !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n    HUNK_LINES:\n        if (uri &&\n                        g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&\n            g_uri_get_port (uri) == g_uri_get_port (source_uri) &&\n-            !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n+            !g_strcmp0 (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n                dir = g_strdup (g_uri_get_path (uri));\n            else\n                dir = NULL;"}
{"question": "In the file 'libsoup/content-sniffer/soup-content-sniffer.c', the function 'skip_insignificant_space' had its parameter types changed. What were the old and new parameter types?", "answer": "The function 'skip_insignificant_space' had its parameter types changed from 'int *pos, int resource_length' to 'gsize *pos, gsize resource_length'."}
{"question": "The hunk in 'libsoup/content-sniffer/soup-content-sniffer.c' shows the removal of a condition check 'if (pos >= resource_length) goto text_html;'. Was this condition present in the older version of the file?", "answer": "Yes, the condition 'if (pos >= resource_length) goto text_html;' was present in the older version of the file and was removed in the commit."}
{"question": "In the file 'libsoup/content-sniffer/soup-content-sniffer.c', the variable 'pos' was changed from 'int' to 'gsize'. What was the original type of 'pos' before the commit?", "answer": "The variable 'pos' was originally of type 'int' before the commit, and it was changed to 'gsize'."}
{"question": "The function 'sniff_feed_or_html' in 'libsoup/content-sniffer/soup-content-sniffer.c' had its variable 'resource_length' type changed. What was the type before and after the commit?", "answer": "The variable 'resource_length' was of type 'int' before the commit and was changed to 'gsize'."}
{"question": "The file 'tests/resources/whitespace.html' was removed in the commit. Was this file present in the older version of the repository?", "answer": "Yes, the file 'tests/resources/whitespace.html' was present in the older version of the repository and was removed in the commit."}
{"question": "In the file 'tests/sniffing-test.c', the test case '/sniffing/whitespace' was replaced with a new test function. What was the old test case and what is the new test function?", "answer": "The old test case was 'g_test_add_data_func (\"/sniffing/whitespace\", \"type/text_html/whitespace.html => text/html\", do_sniffing_test);' and it was replaced with 'g_test_add_func (\"/sniffing/whitespace\", do_skip_whitespace_test);'."}
{"question": "The function 'do_skip_whitespace_test' was added in 'tests/sniffing-test.c'. Was this function present in the older version of the file?", "answer": "No, the function 'do_skip_whitespace_test' was not present in the older version of the file and was added in the commit."}
{"question": "The file 'tests/soup-tests.gresource.xml' had a reference to 'resources/whitespace.html' removed. Was this reference present in the older version of the file?", "answer": "Yes, the reference to 'resources/whitespace.html' was present in the older version of the file and was removed in the commit."}
{"question": "In the file 'libsoup/content-sniffer/soup-content-sniffer.c', the function 'skip_insignificant_space' had its implementation modified. What changes were made to the function body?", "answer": "The function 'skip_insignificant_space' had a new condition 'if (*pos >= resource_length) return TRUE;' added at the beginning of its implementation."}
{"question": "The variable 'MARKUP_LENGTH' was introduced in 'tests/sniffing-test.c'. Was this variable present in the older version of the file?", "answer": "No, the variable 'MARKUP_LENGTH' was not present in the older version of the file and was introduced in the commit."}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 286\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:         gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n    FIRST_CHANGED_LINE_NUMBER: 289\n    FIRST_CHANGED_LINE_CONTENT:         const char *path;\n    HUNK_LINES:\n        gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n+        const char *path;\n\n        g_return_val_if_fail (uri != NULL, NULL);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 286\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:         gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n    FIRST_CHANGED_LINE_NUMBER: 289\n    FIRST_CHANGED_LINE_CONTENT:         const char *path;\n    HUNK_LINES:\n        gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n+        const char *path;\n\n        g_return_val_if_fail (uri != NULL, NULL);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 301\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:         if (content_type)\n            *content_type = NULL;\n    FIRST_CHANGED_LINE_NUMBER: 303\n    FIRST_CHANGED_LINE_CONTENT:         path = g_uri_get_path (soup_uri);\n    HUNK_LINES:\n        if (content_type)\n            *content_type = NULL;\n\n+        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n+        path = g_uri_get_path (soup_uri);\n+        if (path[0] == '/' && path[1] == '/') {\n+                g_uri_unref (soup_uri);\n+                return NULL;\n+        }\n+\n        uri_string = g_uri_to_string (soup_uri);\n        g_uri_unref (soup_uri);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 301\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:         if (content_type)\n            *content_type = NULL;\n    FIRST_CHANGED_LINE_NUMBER: 303\n    FIRST_CHANGED_LINE_CONTENT:         path = g_uri_get_path (soup_uri);\n    HUNK_LINES:\n        if (content_type)\n            *content_type = NULL;\n\n+        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n+        path = g_uri_get_path (soup_uri);\n+        if (path[0] == '/' && path[1] == '/') {\n+                g_uri_unref (soup_uri);\n+                return NULL;\n+        }\n+\n        uri_string = g_uri_to_string (soup_uri);\n        g_uri_unref (soup_uri);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: tests/uri-parsing-test.c\n    HUNK_START_LINE_NUMBER: 141\n    FUNCTION_SIGNATURE: static struct {\n    HUNK_START_LINE_CONTENT:         { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n    FIRST_CHANGED_LINE_NUMBER: 144\n    FIRST_CHANGED_LINE_CONTENT:         { \"data:.///\", NULL, NULL },\n    HUNK_LINES:\n        { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n+        { \"data:.///\", NULL, NULL },\n+        { \"data:/.//\", NULL, NULL },", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: tests/uri-parsing-test.c\n    HUNK_START_LINE_NUMBER: 141\n    FUNCTION_SIGNATURE: static struct {\n    HUNK_START_LINE_CONTENT:         { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n    FIRST_CHANGED_LINE_NUMBER: 144\n    FIRST_CHANGED_LINE_CONTENT:         { \"data:.///\", NULL, NULL },\n    HUNK_LINES:\n        { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n+        { \"data:.///\", NULL, NULL },\n+        { \"data:/.//\", NULL, NULL },"}
{"question": "Does the commit affect the file 'libsoup/soup-headers.c' as referenced in the patch hunk?", "answer": "No, the commit modifies files 'libsoup/http-1/input-stream/soup-body-input-stream.c' and 'libsoup/http-1/soup-message-io-data.c', which are different from the file in the patch hunk."}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/server/http2/soup-server-message-io-http2.c\n    HUNK_START_LINE_NUMBER: 771\n    FUNCTION_SIGNATURE: on_frame_recv_callback (nghttp2_session     *session,\n    HUNK_START_LINE_CONTENT:     char *uri_string;\n    FIRST_CHANGED_LINE_NUMBER: 773\n    FIRST_CHANGED_LINE_CONTENT:         if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    HUNK_LINES:\n        char *uri_string;\n        GUri *uri;\n\n+       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n        uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n        g_free (uri_string);\n+       if (uri == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        soup_server_message_set_uri (msg_io->msg, uri);\n        g_uri_unref (uri);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/server/http2/soup-server-message-io-http2.c\n    HUNK_START_LINE_NUMBER: 771\n    FUNCTION_SIGNATURE: on_frame_recv_callback (nghttp2_session     *session,\n    HUNK_START_LINE_CONTENT:     char *uri_string;\n    FIRST_CHANGED_LINE_NUMBER: 773\n    FIRST_CHANGED_LINE_CONTENT:         if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    HUNK_LINES:\n        char *uri_string;\n        GUri *uri;\n\n+       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n        uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n        g_free (uri_string);\n+       if (uri == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        soup_server_message_set_uri (msg_io->msg, uri);\n        g_uri_unref (uri);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/content-sniffer/soup-content-sniffer.c\n    HUNK_START_LINE_NUMBER: 243\n    FUNCTION_SIGNATURE: sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)\n    HUNK_START_LINE_CONTENT:     gsize resource_length;\n    FIRST_CHANGED_LINE_NUMBER: 246\n    FIRST_CHANGED_LINE_CONTENT: \tbox_size = *((guint32*)resource);\n    HUNK_LINES:\n        gsize resource_length;\n        const char *resource = g_bytes_get_data (buffer, &resource_length);\n        resource_length = MIN (512, resource_length);\n-       guint32 box_size = *((guint32*)resource);\n+       guint32 box_size;\n        guint i;\n    \n+           if (resource_length < sizeof (guint32))\n+                   return FALSE;\n    \n+       box_size = *((guint32*)resource);\n    \n#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n        box_size = ((box_size >> 24) |\n                ((box_size << 8) & 0x00FF0000) |", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/content-sniffer/soup-content-sniffer.c\n    HUNK_START_LINE_NUMBER: 243\n    FUNCTION_SIGNATURE: sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)\n    HUNK_START_LINE_CONTENT:     gsize resource_length;\n    FIRST_CHANGED_LINE_NUMBER: 246\n    FIRST_CHANGED_LINE_CONTENT: \tbox_size = *((guint32*)resource);\n    HUNK_LINES:\n        gsize resource_length;\n        const char *resource = g_bytes_get_data (buffer, &resource_length);\n        resource_length = MIN (512, resource_length);\n-       guint32 box_size = *((guint32*)resource);\n+       guint32 box_size;\n        guint i;\n    \n+           if (resource_length < sizeof (guint32))\n+                   return FALSE;\n    \n+       box_size = *((guint32*)resource);\n    \n#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n        box_size = ((box_size >> 24) |\n                ((box_size << 8) & 0x00FF0000) |"}
{"question": "What is the new name of the function 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "New name: sb_output_stream_source_create_function"}
{"question": "What changes were made to the function 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Function split into two: sb_output_stream_source_create_function and sb_output_stream_source_creation_with_params"}
{"question": "What lines were removed from the function 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Removed lines: checks for soup_content_length, soup_transfer_encoding, and soup_chunked"}
{"question": "What is the new function added in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "New function: sb_output_stream_source_creation_with_params"}
{"question": "What changes were made to the logic of creating a pollable source in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Logic moved to sb_output_stream_source_creation_with_params"}
{"question": "What changes were made to the function signature of 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Signature changed to sb_output_stream_source_create_function(GPollableOutputStream *stream, GCancellable *cancellable)"}
{"question": "What changes were made to the file 'libsoup/http-1/sb-output-stream.c' in terms of added or removed lines?", "answer": "Lines added: sb_output_stream_source_creation_with_params function implementation; Lines removed: checks for soup_content_length, soup_transfer_encoding, and soup_chunked"}
{"question": "What changes were made to the function name 'soup_body_output_stream_create_source' in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "The function 'soup_body_output_stream_create_source' was renamed to 'sb_output_stream_source_create_function'.\nOld Name: soup_body_output_stream_create_source\nNew Name: sb_output_stream_source_create_function"}
{"question": "Was the function 'soup_body_output_stream_create_source' modified in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Yes, the function 'soup_body_output_stream_create_source' was refactored, and its implementation was split into a new function 'sb_output_stream_source_creation_with_params'.\nOld Implementation Location: lines 316-336\nNew Implementation Location: lines 392-417"}
{"question": "Was a new function added in the file 'libsoup/http-1/sb-output-stream.c'?", "answer": "Yes, a new function 'sb_output_stream_source_creation_with_params' was added.\nNew Function Signature: sb_output_stream_source_creation_with_params (GPollableOutputStream *stream, GCancellable *cancellable, int soup_content_length, int soup_transfer_encoding, int soup_chunked)\nNew Function Location: lines 392-417"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 286\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     gboolean base64 = FALSE;\n    FIRST_CHANGED_LINE_NUMBER: 290\n    FIRST_CHANGED_LINE_CONTENT:     const char *path;\n    HUNK_LINES:\n        gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n+        const char *path;\n\n        g_return_val_if_fail (uri != NULL, NULL);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 286\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     gboolean base64 = FALSE;\n    FIRST_CHANGED_LINE_NUMBER: 290\n    FIRST_CHANGED_LINE_CONTENT:     const char *path;\n    HUNK_LINES:\n        gboolean base64 = FALSE;\n        char *uri_string;\n        GBytes *bytes;\n+        const char *path;\n\n        g_return_val_if_fail (uri != NULL, NULL);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 301\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     if (content_type)\n    FIRST_CHANGED_LINE_NUMBER: 305\n    FIRST_CHANGED_LINE_CONTENT:     path = g_uri_get_path (soup_uri);\n    HUNK_LINES:\n        if (content_type)\n            *content_type = NULL;\n\n+        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n+        path = g_uri_get_path (soup_uri);\n+        if (path[0] == '/' && path[1] == '/') {\n+                g_uri_unref (soup_uri);\n+                return NULL;\n+        }\n\n        uri_string = g_uri_to_string (soup_uri);\n        g_uri_unref (soup_uri);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/soup-uri-utils.c\n    HUNK_START_LINE_NUMBER: 301\n    FUNCTION_SIGNATURE: soup_uri_decode_data_uri (const char *uri,\n    HUNK_START_LINE_CONTENT:     if (content_type)\n    FIRST_CHANGED_LINE_NUMBER: 305\n    FIRST_CHANGED_LINE_CONTENT:     path = g_uri_get_path (soup_uri);\n    HUNK_LINES:\n        if (content_type)\n            *content_type = NULL;\n\n+        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n+        path = g_uri_get_path (soup_uri);\n+        if (path[0] == '/' && path[1] == '/') {\n+                g_uri_unref (soup_uri);\n+                return NULL;\n+        }\n\n        uri_string = g_uri_to_string (soup_uri);\n        g_uri_unref (soup_uri);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: tests/uri-parsing-test.c\n    HUNK_START_LINE_NUMBER: 141\n    FUNCTION_SIGNATURE: static struct {\n    HUNK_START_LINE_CONTENT:     { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n    FIRST_CHANGED_LINE_NUMBER: 144\n    FIRST_CHANGED_LINE_CONTENT:     { \"data:.///\", NULL, NULL },\n    HUNK_LINES:\n        { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n+        { \"data:.///\", NULL, NULL },\n+        { \"data:/.//\", NULL, NULL },", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: tests/uri-parsing-test.c\n    HUNK_START_LINE_NUMBER: 141\n    FUNCTION_SIGNATURE: static struct {\n    HUNK_START_LINE_CONTENT:     { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n    FIRST_CHANGED_LINE_NUMBER: 144\n    FIRST_CHANGED_LINE_CONTENT:     { \"data:.///\", NULL, NULL },\n    HUNK_LINES:\n        { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n        { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n        { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n+        { \"data:.///\", NULL, NULL },\n+        { \"data:/.//\", NULL, NULL },"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: libsoup/server/http2/soup-server-message-io-http2.c\n    HUNK_START_LINE_NUMBER: 771\n    FUNCTION_SIGNATURE: on_frame_recv_callback (nghttp2_session *session,\n    HUNK_START_LINE_CONTENT: char *uri_string;\n    FIRST_CHANGED_LINE_NUMBER: 773\n    FIRST_CHANGED_LINE_CONTENT: +       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    HUNK_LINES:\n        char *uri_string;\n        GUri *uri;\n\n+       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n        uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n        g_free (uri_string);\n+       if (uri == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        soup_server_message_set_uri (msg_io->msg, uri);\n        g_uri_unref (uri);", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: libsoup/server/http2/soup-server-message-io-http2.c\n    HUNK_START_LINE_NUMBER: 771\n    FUNCTION_SIGNATURE: on_frame_recv_callback (nghttp2_session *session,\n    HUNK_START_LINE_CONTENT: char *uri_string;\n    FIRST_CHANGED_LINE_NUMBER: 773\n    FIRST_CHANGED_LINE_CONTENT: +       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    HUNK_LINES:\n        char *uri_string;\n        GUri *uri;\n\n+       if (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n        uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n        g_free (uri_string);\n+       if (uri == NULL)\n+           return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n        soup_server_message_set_uri (msg_io->msg, uri);\n        g_uri_unref (uri);"}
{"question": "ORIGINAL_HUNK_DATA:\n    FILE_PATH: tests/http2-test.c\n    HUNK_START_LINE_NUMBER: 1341\n    FUNCTION_SIGNATURE: do_connection_closed_test (Test *test, gconstpointer data)\n    HUNK_START_LINE_CONTENT: g_uri_unref (uri);\n    FIRST_CHANGED_LINE_NUMBER: 1343\n    FIRST_CHANGED_LINE_CONTENT: +static void\n    HUNK_LINES:\n        g_uri_unref (uri);\n    }\n\n+static void\n+do_broken_pseudo_header_test (Test *test, gconstpointer data)\n+{\n+    char *path;\n+    SoupMessage *msg;\n+    GUri *uri;\n+    GBytes *body = NULL;\n+    GError *error = NULL;\n+\n+    uri = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n+\n+    /* an ugly cheat to construct a broken URI, which can be sent from other libs */\n+    path = (char *) g_uri_get_path (uri);\n+    path[1] = '%';\n+\n+    msg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n+    body = soup_test_session_async_send (test->session, msg, NULL, &error);\n+    g_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n+    g_assert_null (body);\n+    g_clear_error (&error);\n+    g_object_unref (msg);\n+    g_uri_unref (uri);\n+}\n+\n    static gboolean\n    unpause_message (SoupServerMessage *msg)\n    {", "answer": "BACKPORTED_HUNK_DATA:\n    FILE_PATH: tests/http2-test.c\n    HUNK_START_LINE_NUMBER: 1341\n    FUNCTION_SIGNATURE: do_connection_closed_test (Test *test, gconstpointer data)\n    HUNK_START_LINE_CONTENT: g_uri_unref (uri);\n    FIRST_CHANGED_LINE_NUMBER: 1343\n    FIRST_CHANGED_LINE_CONTENT: +static void\n    HUNK_LINES:\n        g_uri_unref (uri);\n    }\n\n+static void\n+do_broken_pseudo_header_test (Test *test, gconstpointer data)\n+{\n+    char *path;\n+    SoupMessage *msg;\n+    GUri *uri;\n+    GBytes *body = NULL;\n+    GError *error = NULL;\n+\n+    uri = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n+\n+    /* an ugly cheat to construct a broken URI, which can be sent from other libs */\n+    path = (char *) g_uri_get_path (uri);\n+    path[1] = '%';\n+\n+    msg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n+    body = soup_test_session_async_send (test->session, msg, NULL, &error);\n+    g_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n+    g_assert_null (body);\n+    g_clear_error (&error);\n+    g_object_unref (msg);\n+    g_uri_unref (uri);\n+}\n+\n    static gboolean\n    unpause_message (SoupServerMessage *msg)\n    {"}
