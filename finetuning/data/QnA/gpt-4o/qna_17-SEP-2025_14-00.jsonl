{"question": "What changes were made to the function 'parse_one_cookie' in the file 'libsoup/cookies/soup-cookie.c'?", "answer": "The function 'parse_one_cookie' was modified to fix a memory leak related to the 'expires' field of cookies. The old code used 'soup_cookie_set_expires', while the new code uses 'g_clear_pointer' and directly assigns the parsed date.\n\n**Old Code:**\n```c\nsoup_cookie_set_expires (cookie, parse_date (&p));\n```\n\n**New Code:**\n```c\ng_clear_pointer (&cookie->expires, g_date_time_unref);\ncookie->expires = parse_date (&p);\n```\n\n**File:** libsoup/cookies/soup-cookie.c"}
{"question": "What was the change in the version number in the 'meson.build' file?", "answer": "The version number was updated from '3.6.0' to '3.6.1'.\n\n**Old Code:**\n```meson\nversion: '3.6.0',\n```\n**New Code:**\n```meson\nversion: '3.6.1',\n```"}
{"question": "What new file was added in the commit?", "answer": "A new file 'po/uz.po' was added."}
{"question": "What changes were made to the 'po/LINGUAS' file?", "answer": "The language 'uz' was added to the list of supported languages in the 'po/LINGUAS' file."}
{"question": "What changes were made to the condition in the 'if' statement in the 'soup-body-input-stream.c' file?", "answer": "The condition in the 'if' statement was modified to correctly detect chunked trailers end.\\n\\n**Old Code (Line 244, soup-body-input-stream.c):**\\n```c\\nif (strncmp (metabuf, \"\\r\\n\", nread) || strncmp (metabuf, \"\\n\", nread)) {\\n```\\n\\n**New Code (Line 244, soup-body-input-stream.c):**\\n```c\\nif ((nread == 2 && strncmp (metabuf, \"\\r\\n\", nread) == 0) || (nread == 1 && strncmp (metabuf, \"\\n\", nread) == 0)) {\\n```"}
{"question": "Has the path of the file 'libsoup/soup-cache-input-stream.c' changed? What was the old path?", "answer": "Yes, the path of the file was changed. Old Path: libsoup/soup-cache-input-stream.c New Path: libsoup/cache/soup-cache-input-stream.c"}
{"question": "Has the path of the file 'libsoup/soup-converter-wrapper.c' changed? What was the old path?", "answer": "Yes, the path of the file was changed. Old Path: libsoup/soup-converter-wrapper.c New Path: libsoup/content-decoder/soup-converter-wrapper.c"}
{"question": "Has the path of the file 'libsoup/soup-message-io.c' changed? What was the old path?", "answer": "Yes, the path of the file was changed. Old Path: libsoup/soup-message-io.c New Path: libsoup/http1/soup-message-io-data.c"}
{"question": "Has the path of the file 'libsoup/soup-message-client-io.c' changed? What was the old path?", "answer": "Yes, the path of the file was changed. Old Path: libsoup/soup-message-client-io.c New Path: libsoup/http1/soup-client-message-io-http1.c"}
{"question": "Has the path of the file 'libsoup/soup-message-server-io.c' changed? What was the old path?", "answer": "Yes, the path of the file was changed. Old Path: libsoup/soup-message-server-io.c New Path: libsoup/server/http1/soup-server-message-io-http1.c"}
{"question": "What change was made to the dependency declaration in the 'meson.build' file?", "answer": "The dependency for 'gmodule-2.0' was replaced with 'gmodule-no-export-2.0'.\n\n**Old Code Block (meson.build):**\n```meson\n-gmodule_dep = dependency('gmodule-2.0', version : glib_required_version,\n                          fallback: ['glib', 'libgmodule_dep'])\n```\n\n**New Code Block (meson.build):**\n```meson\n+gmodule_dep = dependency('gmodule-no-export-2.0', version : glib_required_version,\n                          fallback: ['glib', 'libgmodule_dep'])\n```"}
{"question": "What changes were made to the file 'libsoup/auth/soup-auth-digest.c'?", "answer": "A memory leak fix was implemented by adding a call to 'g_free' for the 'priv->opaque' member in the 'soup_auth_digest_finalize' function."}
{"question": "Was the function 'soup_auth_digest_finalize' modified in the file 'libsoup/auth/soup-auth-digest.c'?", "answer": "Yes, the function 'soup_auth_digest_finalize' was modified. A new line was added: 'g_free (priv->opaque);' to free the 'opaque' member."}
{"question": "What changes were made to the function 'parse_one_cookie' in the file 'libsoup/cookies/soup-cookie.c'?", "answer": "A new condition was added to limit the combined size of the cookie name and value to 4096 bytes. Code before change:\n```c\n/* Parse the VALUE */\ncookie->value = parse_value(&p, TRUE);\n```\nCode after change:\n```c\n/* Parse the VALUE */\ncookie->value = parse_value(&p, TRUE);\nif (strlen(cookie->name) + strlen(cookie->value) > 4096) {\n    soup_cookie_free(cookie);\n    return NULL;\n}\n```"}
{"question": "What new test function was added in the file 'tests/cookies-test.c'?", "answer": "The function 'do_cookies_parsing_name_value_max_size' was added. Code:\n```c\nstatic void\ndo_cookies_parsing_name_value_max_size(void) {\n    // Function implementation\n}\n```"}
{"question": "What test case was added to the 'main' function in 'tests/cookies-test.c'?", "answer": "A new test case '/cookies/parsing/name-value-max-size' was added. Code before change:\n```c\ng_test_add_func(\"/cookies/parsing/control-characters\", do_cookies_parsing_control_characters);\n```\nCode after change:\n```c\ng_test_add_func(\"/cookies/parsing/control-characters\", do_cookies_parsing_control_characters);\ng_test_add_func(\"/cookies/parsing/name-value-max-size\", do_cookies_parsing_name_value_max_size);\n```"}
{"question": "What changes were made to the function 'do_host_big_header' in the file 'tests/misc-test.c'?", "answer": "A memory leak fix was added by clearing the error object. Old Code: ```stream = soup_session_send (session, msg, NULL, &error); g_assert_null (stream); g_assert_error (error, G_IO_ERROR, G_IO_ERROR_CONNECTION_CLOSED);``` New Code: ```stream = soup_session_send (session, msg, NULL, &error); g_assert_null (stream); g_assert_error (error, G_IO_ERROR, G_IO_ERROR_CONNECTION_CLOSED); g_clear_error (&error);```"}
{"question": "What changes were made to the function 'redirect_handler' in the file 'tests/misc-test.c'?", "answer": "A memory leak fix was added by unreferencing the body object. Old Code: ```g_assert_nonnull (body); g_assert_cmpstr (g_bytes_get_data (body, NULL), ==, \"index\"); g_object_unref (new_msg);``` New Code: ```g_assert_nonnull (body); g_assert_cmpstr (g_bytes_get_data (body, NULL), ==, \"index\"); g_object_unref (new_msg); g_bytes_unref (body);```"}
{"question": "What changes were made to the function 'on_frame_recv_callback' in the file 'libsoup/server/http2/soup-server-message-io-http2.c'?", "answer": "The function 'on_frame_recv_callback' was modified. Specifically, the conditions for handling 'msg_io->scheme', 'msg_io->authority', and 'msg_io->path' were updated, and additional checks were introduced to decrement 'io->in_callback' in certain early return cases. Code blocks for old and new versions are provided below.\n\n**Old Version:**\n```c\nif (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\nuri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\nif (uri == NULL)\n    return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n```\n\n**New Version:**\n```c\nif (msg_io->authority == NULL) {\n    io->in_callback--;\n    return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n}\nuri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path == NULL ? \"\" : msg_io->path);\nif (uri == NULL) {\n    io->in_callback--;\n    return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n}\n```"}
{"question": "What changes were made to the function 'parse_one_cookie' in the file 'libsoup/cookies/soup-cookie.c'?", "answer": "A new condition was added to check if both the cookie name and value are empty, and if so, the cookie is freed and NULL is returned. Code before change: ``` /* Parse the VALUE */ cookie->value = parse_value (&p, TRUE); if (strlen (cookie->name) + strlen (cookie->value) > 4096) { soup_cookie_free (cookie); return NULL; } ``` Code after change: ``` /* Parse the VALUE */ cookie->value = parse_value (&p, TRUE); if (!*cookie->name && !*cookie->value) { soup_cookie_free (cookie); return NULL; } if (strlen (cookie->name) + strlen (cookie->value) > 4096) { soup_cookie_free (cookie); return NULL; } ```"}
{"question": "What changes were made to the function 'soup_message_headers_get_ranges_internal' in the file 'libsoup/soup-message-headers.c'?", "answer": "A decrement operation was added to the loop index 'i' to ensure proper merging of ranges. Old Code: `if (cur->start <= prev->end) { prev->end = MAX (prev->end, cur->end); g_array_remove_index (array, i); }`. New Code: `if (cur->start <= prev->end) { prev->end = MAX (prev->end, cur->end); g_array_remove_index (array, i); i--; }`."}
{"question": "Was a new test file added in this commit? If so, what is its name and path?", "answer": "Yes, a new test file 'server-mem-limit-test.c' was added at the path 'tests/server-mem-limit-test.c'."}
{"question": "What new test case was added to the 'tests/meson.build' file?", "answer": "A new test case named 'server-mem-limit' was added to the 'tests' array in the 'tests/meson.build' file. Old Code: `tests = [{'name': 'samesite'}, {'name': 'session'}, {'name': 'server-auth'}, {'name': 'server'}, {'name': 'sniffing', 'depends': [test_resources]}]`. New Code: `tests = [{'name': 'samesite'}, {'name': 'session'}, {'name': 'server-auth'}, {'name': 'server-mem-limit'}, {'name': 'server'}, {'name': 'sniffing', 'depends': [test_resources]}]`."}
{"question": "What is the purpose of the new test file 'server-mem-limit-test.c'?", "answer": "The new test file 'server-mem-limit-test.c' is designed to test memory usage limits by triggering large buffer allocation crashes. It includes a test case '/server-mem/range-overlaps' to validate range overlap handling."}
{"question": "What new function was added in the file 'tests/server-mem-limit-test.c'?", "answer": "The function 'do_ranges_overlaps_test' was added to test the handling of overlapping ranges in server responses. It sets up a server, sends a request with overlapping ranges, and validates the response status."}
{"question": "What new file was added in this commit?", "answer": "The file `tests/ws-test-helper.c` was added."}
{"question": "What changes were made to the `tests/meson.build` file?", "answer": "A new executable target `ws-test-helper` was added, conditional on `unix_socket_dep` being found."}
{"question": "What is the purpose of the new file `tests/ws-test-helper.c`?", "answer": "The file implements a WebSocket test helper for use with valgrind, including connection handling and error reporting."}
{"question": "What new function was introduced in `tests/ws-test-helper.c`?", "answer": "The function `on_sigint` was introduced to handle SIGINT signals for clean shutdowns."}
{"question": "What is the main entry point of the new file `tests/ws-test-helper.c`?", "answer": "The `main` function serves as the entry point, setting up WebSocket connections and handling the main loop."}
{"question": "What changes were made to the file 'libsoup/cookies/soup-cookie.c'?", "answer": "The file 'libsoup/cookies/soup-cookie.c' was modified to include a maximum age cap for cookies. A constant 'MAX_AGE_CAP_IN_SECONDS' was defined, and logic was added to enforce this cap in the 'parse_one_cookie' function."}
{"question": "What modifications were made to the function 'parse_one_cookie' in 'libsoup/cookies/soup-cookie.c'?", "answer": "The function 'parse_one_cookie' was updated to include a check for the 'max_age' value. If 'max_age' exceeds 'MAX_AGE_CAP_IN_SECONDS', it is capped to this value. Code added: 'if (max_age > MAX_AGE_CAP_IN_SECONDS) max_age = MAX_AGE_CAP_IN_SECONDS;'"}
{"question": "What new tests were added to the file 'tests/cookies-test.c'?", "answer": "Two new test functions were added: 'do_cookies_parsing_max_age_int32_overflow' and 'do_cookies_parsing_max_age_long_overflow'. These tests validate the behavior of cookies with excessively large 'Max-Age' values."}
{"question": "What changes were made to the 'main' function in 'tests/cookies-test.c'?", "answer": "The 'main' function was updated to include the newly added test cases. The following lines were added: 'g_test_add_func(\"/cookies/parsing/max-age-int32-overflow\", do_cookies_parsing_max_age_int32_overflow);' and 'g_test_add_func(\"/cookies/parsing/max-age-long-overflow\", do_cookies_parsing_max_age_long_overflow);'"}
{"question": "What change was made to the 'unix_socket_dep' dependency in the 'meson.build' file?", "answer": "The 'fallback' parameter of 'unix_socket_dep' was modified. Old Code: `fallback: ['glib', 'libgiounix_dep']`. New Code: `fallback: (host_system != 'windows') ? ['glib', 'libgiounix_dep'] : []`. Location: 'meson.build', line 141."}
{"question": "What changes were made to the condition in the function 'skip_insignificant_space' in the file 'libsoup/content-sniffer/soup-content-sniffer.c'?", "answer": "The condition `if (*pos > resource_length)` was modified to `if (*pos >= resource_length)`.\n\n**Old Code:**\n```c\nif (*pos > resource_length)\n    return TRUE;\n```\n\n**New Code:**\n```c\nif (*pos >= resource_length)\n    return TRUE;\n```\n\n**Location:** Function `skip_insignificant_space`, File `libsoup/content-sniffer/soup-content-sniffer.c`."}
{"question": "What changes were made to the condition in the function 'sniff_feed_or_html' in the file 'libsoup/content-sniffer/soup-content-sniffer.c'?", "answer": "The condition `if (pos > resource_length)` was modified to `if ((pos + 1) > resource_length)`.\n\n**Old Code:**\n```c\nif (pos > resource_length)\n    goto text_html;\n```\n\n**New Code:**\n```c\nif ((pos + 1) > resource_length)\n    goto text_html;\n```\n\n**Location:** Function `sniff_feed_or_html`, File `libsoup/content-sniffer/soup-content-sniffer.c`."}
{"question": "What changes were made to the function 'soup_session_redirect_message' in 'libsoup/soup-session.c'?", "answer": "The function 'soup_session_redirect_message' was modified to include logic for stripping authentication credentials on cross-origin redirects. Code added:\n```c\nif (!soup_uri_host_equal (soup_message_get_uri (msg), new_uri)) {\n    soup_message_headers_remove_common (soup_message_get_request_headers (msg), SOUP_HEADER_AUTHORIZATION);\n    soup_message_set_auth (msg, NULL);\n}\n```\nLocation: 'libsoup/soup-session.c', line 1230."}
{"question": "What new test function was added in 'tests/auth-test.c'?", "answer": "A new test function 'do_strip_on_crossorigin_redirect' was added to validate the behavior of stripping credentials on cross-origin redirects. Code:\n```c\nstatic void\ndo_strip_on_crossorigin_redirect (void) {\n    // Test implementation\n}\n```\nLocation: 'tests/auth-test.c', line 1917."}
{"question": "What new test case was registered in the 'main' function of 'tests/auth-test.c'?", "answer": "A new test case '/auth/strip-on-crossorigin-redirect' was registered in the 'main' function. Code:\n```c\ng_test_add_func (\"/auth/strip-on-crossorigin-redirect\", do_strip_on_crossorigin_redirect);\n```\nLocation: 'tests/auth-test.c', line 2025."}
{"question": "What new callback function was added in 'tests/auth-test.c' for handling redirects?", "answer": "The function 'redirect_server_callback' was added to handle server redirects during testing. Code:\n```c\nstatic void\nredirect_server_callback (SoupServer *server, SoupServerMessage *msg, const char *path, GHashTable *query, gpointer user_data) {\n    // Callback implementation\n}\n```\nLocation: 'tests/auth-test.c', line 1917."}
{"question": "What new callback function was added in 'tests/auth-test.c' for authentication during redirects?", "answer": "The function 'auth_for_redirect_callback' was added to handle authentication during redirects. Code:\n```c\nstatic gboolean\nauth_for_redirect_callback (SoupMessage *msg, SoupAuth *auth, gboolean retrying, gpointer user_data) {\n    // Callback implementation\n}\n```\nLocation: 'tests/auth-test.c', line 1917."}
{"question": "What changes were made to the function 'parse_one_cookie' in the file 'libsoup/cookies/soup-cookie.c'?", "answer": "The function 'parse_one_cookie' was modified to include checks for attribute size limits. Code changes:\nOld:\n```c\nif (MATCH_NAME (\"domain\") && has_value) {\n    g_free (cookie->domain);\n    cookie->domain = parse_value (&p, TRUE);\n}\n```\nNew:\n```c\nif (MATCH_NAME (\"domain\") && has_value) {\n    char *new_domain = parse_value (&p, TRUE);\n    if (strlen (new_domain) > MAX_ATTRIBUTE_SIZE) {\n        g_free (new_domain);\n        continue;\n    }\n    g_free (cookie->domain);\n    cookie->domain = g_steal_pointer (&new_domain);\n}\n```"}
{"question": "Was a new macro definition added in the file 'libsoup/cookies/soup-cookie.c'?", "answer": "Yes, the macro 'MAX_ATTRIBUTE_SIZE' was added. Code addition:\n```c\n#define MAX_ATTRIBUTE_SIZE 1024\n```"}
{"question": "What changes were made to the Romanian translation file 'po/ro.po'?", "answer": "The Romanian translation file 'po/ro.po' was updated with new translations and metadata changes. Old and new versions of specific translations are provided below:\n\nOld:\n```plaintext\nmsgstr \"Nu s-a putut ad\u0103uga complet la cache resursa\"\n```\nNew:\n```plaintext\nmsgstr \"Resursa nu a putut fi salvat\u0103 \u00een spa\u021biul de prestocare\"\n```\n\nOld:\n```plaintext\nmsgstr \"Pre\u00eenc\u0103rcarea de rezultat este prea mic\u0103\"\n```\nNew:\n```plaintext\nmsgstr \"Memoria tampon de ie\u0219ire este prea mic\u0103\"\n```"}
{"question": "What changes were made to the conditional check for enabling PKCS#11 tests in 'tests/meson.build'?", "answer": "The conditional logic for enabling PKCS#11 tests was updated. Old Code: `if gnutls_dep.found()` New Code: `if enable_pkcs11_tests` Location: 'tests/meson.build'."}
{"question": "Was the function 'do_tls_interaction_msg_test' in 'tests/ssl-test.c' modified?", "answer": "Yes, the conditional check within the function was updated. Old Code: `if (g_strcmp0 (g_type_name (G_TYPE_FROM_INSTANCE (g_tls_backend_get_default ())), \"GTlsBackendGnutls\") == 0)` New Code: `if (ENABLE_PKCS11_TESTS && g_strcmp0 (g_type_name (G_TYPE_FROM_INSTANCE (g_tls_backend_get_default ())), \"GTlsBackendGnutls\") == 0)` Location: 'tests/ssl-test.c'."}
{"question": "Was the function 'do_tls_interaction_preconnect_test' in 'tests/ssl-test.c' modified?", "answer": "Yes, the conditional check within the function was updated. Old Code: `if (g_strcmp0 (g_type_name (G_TYPE_FROM_INSTANCE (g_tls_backend_get_default ())), \"GTlsBackendGnutls\") == 0)` New Code: `if (ENABLE_PKCS11_TESTS && g_strcmp0 (g_type_name (G_TYPE_FROM_INSTANCE (g_tls_backend_get_default ())), \"GTlsBackendGnutls\") == 0)` Location: 'tests/ssl-test.c'."}
{"question": "What changes were made to the 'main' function in 'tests/ssl-test.c'?", "answer": "The preprocessor directive for including PKCS#11 tests was updated. Old Code: `#if HAVE_GNUTLS` New Code: `#if HAVE_GNUTLS && ENABLE_PKCS11_TESTS` Location: 'tests/ssl-test.c'."}
{"question": "Was the 'c_args' field in the 'ssl' test configuration in 'tests/meson.build' modified?", "answer": "Yes, the 'c_args' field was updated to include a new macro. Old Code: `'-DHAVE_GNUTLS=@0@'.format(gnutls_dep.found() ? 1 : 0)` New Code: `['-DHAVE_GNUTLS=@0@'.format(gnutls_dep.found() ? 1 : 0), '-DENABLE_PKCS11_TESTS=@0@'.format(enable_pkcs11_tests ? 1 : 0)]` Location: 'tests/meson.build'."}
{"question": "What changes were made to the file '.gitlab-ci/index.html' in this commit?", "answer": "The URLs in the file were updated from 'https://libsoup.org/libsoup-3.0' and 'https://libsoup.org/libsoup-2.4' to 'https://libsoup.gnome.org/libsoup-3.0' and 'https://libsoup.gnome.org/libsoup-2.4' respectively."}
{"question": "What modifications were made to the 'docs_url' field in 'docs/reference/libsoup.toml.in'?", "answer": "The 'docs_url' field was updated from 'https://libsoup.org/libsoup-3.0/' to 'https://libsoup.gnome.org/libsoup-3.0/'."}
{"question": "What changes were made to the 'NEWS' file in this commit?", "answer": "References to 'https://libsoup.org/libsoup-3.0/client-thread-safety.html' and 'https://libsoup.org' were updated to 'https://libsoup.gnome.org/libsoup-3.0/client-thread-safety.html' and 'https://libsoup.gnome.org' respectively."}
{"question": "What changes were made to the condition handling in the function 'soup_filter_input_stream_read_line' in 'libsoup/http1/soup-body-input-stream.c'?", "answer": "The condition was modified to handle cases where 'nread == 0' and to set an error if 'error' is not NULL. Old Code: `if (!got_line) { g_set_error_literal (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT, _(\"Connection terminated unexpectedly\")); return -1; }`. New Code: `if (nread == 0 || !got_line) { if (error && *error == NULL) { g_set_error_literal (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT, _(\"Connection terminated unexpectedly\")); } return -1; }`."}
{"question": "Was there any addition to the error handling logic in 'libsoup/http1/soup-body-input-stream.c'?", "answer": "Yes, additional checks were added to ensure that if 'error' is not NULL and '*error' is NULL, an error is set using 'g_set_error_literal'. This was added in multiple locations within the file."}
{"question": "What changes were made to the return conditions in 'libsoup/http1/soup-body-input-stream.c'?", "answer": "The return conditions were updated to include a check for 'nread == 0' alongside the existing checks for 'nread < 0' and '!got_line'. This ensures proper error reporting for unexpected stream terminations."}
{"question": "Was the function signature of any function in 'libsoup/http1/soup-body-input-stream.c' modified?", "answer": "No, the function signatures remained unchanged in this commit. The changes were limited to the internal logic of the functions."}
{"question": "Were there any changes to the file path or name of 'libsoup/http1/soup-body-input-stream.c'?", "answer": "No, the file path and name remained unchanged in this commit."}
