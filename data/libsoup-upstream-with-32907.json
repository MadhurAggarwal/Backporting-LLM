{
    "CVE-2025-4948": {
        "pr_number": [
            "14412"
        ],
        "cve_description": "\n    A flaw was found in the soup_multipart_new_from_message() function of the libsoup HTTP library, which is commonly used by GNOME and other applications to handle web communications. The issue occurs when the library processes specially crafted multipart messages. Due to improper validation, an internal calculation can go wrong, leading to an integer underflow. This can cause the program to access invalid memory and crash. As a result, any application or server using libsoup could be forced to exit unexpectedly, creating a denial-of-service (DoS) risk.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/463/commits?commit_id=f2f28afe0b3b2b3009ab67d6874457ec6bac70c0"
        ],
        "upstream_patch": "\n        From f2f28afe0b3b2b3009ab67d6874457ec6bac70c0 Mon Sep 17 00:00:00 2001\n        From: Milan Crha <mcrha@redhat.com>\n        Date: Thu, 15 May 2025 17:49:11 +0200\n        Subject: [PATCH] soup-multipart: Verify boundary limits for multipart body\n\n        It could happen that the boundary started at a place which resulted into\n        a negative number, which in an unsigned integer is a very large value.\n        Check the body size is not a negative value before setting it.\n\n        Closes https://gitlab.gnome.org/GNOME/libsoup/-/issues/449\n\n        Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/463>\n        ---\n        libsoup/soup-multipart.c |  2 +-\n        tests/multipart-test.c   | 40 ++++++++++++++++++++++++++++++++++++++++\n        2 files changed, 41 insertions(+), 1 deletion(-)\n\n        diff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\n        index 7b1e20cf..e526369e 100644\n        --- a/libsoup/soup-multipart.c\n        +++ b/libsoup/soup-multipart.c\n        @@ -204,7 +204,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\n                */\n                part_body = g_bytes_new_from_bytes (body, // FIXME\n                                    split - body_data,\n        -\t\t\t\t\t\t    end - 2 - split);\n        +\t\t\t\t\t\t    end - 2 >= split ? end - 2 - split : 0);\n                g_ptr_array_add (multipart->bodies, part_body);\n        \n                start = end;\n        diff --git a/tests/multipart-test.c b/tests/multipart-test.c\n        index c4e996ae..e7c28dfb 100644\n        --- a/tests/multipart-test.c\n        +++ b/tests/multipart-test.c\n        @@ -527,6 +527,45 @@ test_multipart_bounds_bad (void)\n            g_bytes_unref (bytes);\n        }\n        \n        +static void\n        +test_multipart_too_large (void)\n        +{\n        +\tconst char *raw_body =\n        +\t\t\"-------------------\r\n\"\n        +\t\t\"-\n\"\n        +\t\t\"Cont\"\r\n\"\n        +\t\t\"Content-Tynt----e:nrQK\r\n\"\n        +\t\t\"Content-Disposition:   name=  form-; name=\"file\"; filename=\"ype:i/  -d; ----®\r\n\"\n        +\t\t\"Content-Typimag\u0001/png--\\\n\"\n        +\t\t\"\r\n\"\n        +\t\t\"---:\n\r\n\"\n        +\t\t\"\r\n\"\n        +\t\t\"-------------------------------------\r\n\"\n        +\t\t\"---------\r\n\"\n        +\t\t\"----------------------\";\n        +\tGBytes *body;\n        +\tGHashTable *params;\n        +\tSoupMessageHeaders *headers;\n        +\tSoupMultipart *multipart;\n        +\n        +\tparams = g_hash_table_new (g_str_hash, g_str_equal);\n        +\tg_hash_table_insert (params, (gpointer) \"boundary\", (gpointer) \"-----------------\");\n        +\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n        +\tsoup_message_headers_set_content_type (headers, \"multipart/form-data\", params);\n        +\tg_hash_table_unref (params);\n        +\n        +\tbody = g_bytes_new_static (raw_body, strlen (raw_body));\n        +\tmultipart = soup_multipart_new_from_message (headers, body);\n        +\tsoup_message_headers_unref (headers);\n        +\tg_bytes_unref (body);\n        +\n        +\tg_assert_nonnull (multipart);\n        +\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\n        +\tg_assert_true (soup_multipart_get_part (multipart, 0, &headers, &body));\n        +\tg_assert_cmpint (g_bytes_get_size (body), ==, 0);\n        +\tsoup_multipart_free (multipart);\n        +}\n        +\n        int\n        main (int argc, char **argv)\n        {\n        @@ -556,6 +595,7 @@ main (int argc, char **argv)\n            g_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\n            g_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);\n            g_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);\n        +\tg_test_add_func (\"/multipart/too-large\", test_multipart_too_large);\n        \n            ret = g_test_run ();\n        \n        -- \n        GitLab\n    "
    },
    "CVE-2025-4476": {
        "pr_number": [
            "14012",
            "13853"
        ],
        "cve_description": "\n    A denial-of-service vulnerability has been identified in the libsoup HTTP client library. This flaw can be triggered when a libsoup client receives a 401 (Unauthorized) HTTP response containing a specifically crafted domain parameter within the WWW-Authenticate header. Processing this malformed header can lead to a crash of the client application using libsoup. An attacker could exploit this by setting up a malicious HTTP server. If a user's application using the vulnerable libsoup library connects to this malicious server, it could result in a denial-of-service. Successful exploitation requires tricking a user's client application into connecting to the attacker's malicious server.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/457/diffs?commit_id=e64c221f9c7d09b48b610c5626b3b8c400f0907"
        ],
        "upstream_patch": "\n    From e64c221f9c7d09b48b610c5626b3b8c400f0907c Mon Sep 17 00:00:00 2001\n    From: Michael Catanzaro <mcatanzaro@redhat.com>\n    Date: Thu, 8 May 2025 09:27:01 -0500\n    Subject: [PATCH] auth-digest: fix crash in\n    soup_auth_digest_get_protection_space()\n\n    We need to validate the Domain parameter in the WWW-Authenticate header.\n\n    Unfortunately this crash only occurs when listening on default ports 80\n    and 443, so there's no good way to test for this. The test would require\n    running as root.\n\n    Fixes #440\n    ---\n    libsoup/auth/soup-auth-digest.c | 2 +-\n    1 file changed, 1 insertion(+), 1 deletion(-)\n\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n    index d8bb2910..292f2045 100644\n    --- a/libsoup/auth/soup-auth-digest.c\n    +++ b/libsoup/auth/soup-auth-digest.c\n    @@ -220,7 +220,7 @@ soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)\n                if (uri &&\n                                g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&\n                    g_uri_get_port (uri) == g_uri_get_port (source_uri) &&\n    -\t\t\t    !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n    +\t\t\t    !g_strcmp0 (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n                    dir = g_strdup (g_uri_get_path (uri));\n                else\n                    dir = NULL;\n    -- \n    GitLab\n    "
    },
    "CVE-2025-32907": {
        "pr_number": [
            "14012",
            "13853"
        ],
        "cve_description": "\n    A flaw was found in libsoup. The implementation of HTTP range requests is vulnerable to a resource consumption attack. This flaw allows a malicious client to request the same range many times in a single HTTP request, causing the server to use large amounts of memory. This does not allow for a full denial of service.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/452"
        ],
        "upstream_patch": "\n    From 9bb92f7a685e31e10e9e8221d0342280432ce836 Mon Sep 17 00:00:00 2001\n    From: Milan Crha <mcrha@redhat.com>\n    Date: Tue, 15 Apr 2025 12:17:39 +0200\n    Subject: [PATCH 1/2] soup-message-headers: Correct merge of ranges\n\n    It had been skipping every second range, which generated an array\n    of a lot of insane ranges, causing large memory usage by the server.\n\n    Closes #428\n\n    Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/452>\n    ---\n    libsoup/soup-message-headers.c |   1 +\n    tests/meson.build              |   1 +\n    tests/server-mem-limit-test.c  | 144 +++++++++++++++++++++++++++++++++\n    3 files changed, 146 insertions(+)\n    create mode 100644 tests/server-mem-limit-test.c\n\n    diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\n    index 8eec4200..e799082b 100644\n    --- a/libsoup/soup-message-headers.c\n    +++ b/libsoup/soup-message-headers.c\n    @@ -1244,6 +1244,7 @@ soup_message_headers_get_ranges_internal (SoupMessageHeaders  *hdrs,\n                if (cur->start <= prev->end) {\n                    prev->end = MAX (prev->end, cur->end);\n                    g_array_remove_index (array, i);\n    +\t\t\t\ti--;\n                }\n            }\n        }\n    diff --git a/tests/meson.build b/tests/meson.build\n    index 02924c03..ac892359 100644\n    --- a/tests/meson.build\n    +++ b/tests/meson.build\n    @@ -103,6 +103,7 @@ tests = [\n    {'name': 'samesite'},\n    {'name': 'session'},\n    {'name': 'server-auth'},\n    +  {'name': 'server-mem-limit'},\n    {'name': 'server'},\n    {'name': 'sniffing',\n        'depends': [test_resources],\n    diff --git a/tests/server-mem-limit-test.c b/tests/server-mem-limit-test.c\n    new file mode 100644\n    index 00000000..98f1c40f\n    --- /dev/null\n    +++ b/tests/server-mem-limit-test.c\n    @@ -0,0 +1,144 @@\n    +/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n    +/*\n    + * Copyright (C) 2025 Red Hat <www.redhat.com>\n    + */\n    +\n    +#include \"test-utils.h\"\n    +\n    +#include <sys/resource.h>\n    +\n    +/*\n    + This test limits memory usage to trigger too large buffer allocation crash.\n    + As restoring the limits back to what it was does not always work, it's split\n    + out of the server-test.c test with copied minimal server code.\n    + */\n    +\n    +typedef struct {\n    +\tSoupServer *server;\n    +\tGUri *base_uri, *ssl_base_uri;\n    +\tGSList *handlers;\n    +} ServerData;\n    +\n    +static void\n    +server_setup_nohandler (ServerData *sd, gconstpointer test_data)\n    +{\n    +\tsd->server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n    +\tsd->base_uri = soup_test_server_get_uri (sd->server, \"http\", NULL);\n    +\tif (tls_available)\n    +\t\tsd->ssl_base_uri = soup_test_server_get_uri (sd->server, \"https\", NULL);\n    +}\n    +\n    +static void\n    +server_add_handler (ServerData         *sd,\n    +\t\t    const char         *path,\n    +\t\t    SoupServerCallback  callback,\n    +\t\t    gpointer            user_data,\n    +\t\t    GDestroyNotify      destroy)\n    +{\n    +\tsoup_server_add_handler (sd->server, path, callback, user_data, destroy);\n    +\tsd->handlers = g_slist_prepend (sd->handlers, g_strdup (path));\n    +}\n    +\n    +static void\n    +server_setup (ServerData *sd, gconstpointer test_data)\n    +{\n    +\tserver_setup_nohandler (sd, test_data);\n    +}\n    +\n    +static void\n    +server_teardown (ServerData *sd, gconstpointer test_data)\n    +{\n    +\tGSList *iter;\n    +\n    +\tfor (iter = sd->handlers; iter; iter = iter->next)\n    +\t\tsoup_server_remove_handler (sd->server, iter->data);\n    +\tg_slist_free_full (sd->handlers, g_free);\n    +\n    +\tg_clear_pointer (&sd->server, soup_test_server_quit_unref);\n    +\tg_clear_pointer (&sd->base_uri, g_uri_unref);\n    +\tg_clear_pointer (&sd->ssl_base_uri, g_uri_unref);\n    +}\n    +\n    +static void\n    +server_file_callback (SoupServer        *server,\n    +\t\t      SoupServerMessage *msg,\n    +\t\t      const char        *path,\n    +\t\t      GHashTable        *query,\n    +\t\t      gpointer           data)\n    +{\n    +\tvoid *mem;\n    +\n    +\tg_assert_cmpstr (path, ==, \"/file\");\n    +\tg_assert_cmpstr (soup_server_message_get_method (msg), ==, SOUP_METHOD_GET);\n    +\n    +\tmem = g_malloc0 (sizeof (char) * 1024 * 1024);\n    +\t/* fedora-scan CI claims a warning about possibly leaked `mem` variable, thus use\n    +\t   the copy and free it explicitly, to workaround the false positive; the g_steal_pointer()\n    +\t   did not help for the malloc-ed memory */\n    +\tsoup_server_message_set_response (msg, \"application/octet-stream\", SOUP_MEMORY_COPY, mem, sizeof (char) * 1024 *1024);\n    +\tsoup_server_message_set_status (msg, SOUP_STATUS_OK, NULL);\n    +\tg_free (mem);\n    +}\n    +\n    +static void\n    +do_ranges_overlaps_test (ServerData *sd, gconstpointer test_data)\n    +{\n    +\tSoupSession *session;\n    +\tSoupMessage *msg;\n    +\tGString *range;\n    +\tGUri *uri;\n    +\tconst char *chunk = \",0,0,0,0,0,0,0,0,0,0,0\";\n    +\n    +\tg_test_bug (\"428\");\n    +\n    +\t#ifdef G_OS_WIN32\n    +\tg_test_skip (\"Cannot run under windows\");\n    +\treturn;\n    +\t#endif\n    +\n    +\trange = g_string_sized_new (99 * 1024);\n    +\tg_string_append (range, \"bytes=1024\");\n    +\twhile (range->len < 99 * 1024)\n    +\t\tg_string_append (range, chunk);\n    +\n    +\tsession = soup_test_session_new (NULL);\n    +\tserver_add_handler (sd, \"/file\", server_file_callback, NULL, NULL);\n    +\n    +\turi = g_uri_parse_relative (sd->base_uri, \"/file\", SOUP_HTTP_URI_FLAGS, NULL);\n    +\n    +\tmsg = soup_message_new_from_uri (\"GET\", uri);\n    +\tsoup_message_headers_append (soup_message_get_request_headers (msg), \"Range\", range->str);\n    +\n    +\tsoup_test_session_send_message (session, msg);\n    +\n    +\tsoup_test_assert_message_status (msg, SOUP_STATUS_PARTIAL_CONTENT);\n    +\n    +\tg_object_unref (msg);\n    +\n    +\tg_string_free (range, TRUE);\n    +\tg_uri_unref (uri);\n    +\n    +\tsoup_test_session_abort_unref (session);\n    +}\n    +\n    +int\n    +main (int argc, char **argv)\n    +{\n    +\tint ret;\n    +\n    +\ttest_init (argc, argv, NULL);\n    +\n    +\t#ifndef G_OS_WIN32\n    +\tstruct rlimit new_rlimit = { 1024 * 1024 * 64, 1024 * 1024 * 64 };\n    +\t/* limit memory usage, to trigger too large memory allocation abort */\n    +\tg_assert_cmpint (setrlimit (RLIMIT_DATA, &new_rlimit), ==, 0);\n    +\t#endif\n    +\n    +\tg_test_add (\"/server-mem/range-overlaps\", ServerData, NULL,\n    +\t\t    server_setup, do_ranges_overlaps_test, server_teardown);\n    +\n    +\tret = g_test_run ();\n    +\n    +\ttest_cleanup ();\n    +\treturn ret;\n    +}\n    -- \n    GitLab\n\n\n    From eeace39ec686094ff6a05a43e5fce06e9c37f376 Mon Sep 17 00:00:00 2001\n    From: Milan Crha <mcrha@redhat.com>\n    Date: Tue, 13 May 2025 14:20:46 +0200\n    Subject: [PATCH 2/2] server-mem-limit-test: Limit memory usage only when not\n    built witha sanitizer\n\n    A build with -Db_sanitize=address crashes with failed mmap(), which is done\n    inside libasan. The test requires 20.0TB of virtual memory when running with\n    the sanitizer, which is beyond unsigned integer limits and may not trigger\n    the bug anyway.\n\n    Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/452>\n    ---\n    meson.build                   |  4 ++++\n    tests/server-mem-limit-test.c | 13 +++++++++----\n    2 files changed, 13 insertions(+), 4 deletions(-)\n\n    diff --git a/meson.build b/meson.build\n    index 8772a0ea..b31a8791 100644\n    --- a/meson.build\n    +++ b/meson.build\n    @@ -357,6 +357,10 @@ configinc = include_directories('.')\n    \n    prefix = get_option('prefix')\n    \n    +if get_option('b_sanitize') != 'none'\n    +  cdata.set_quoted('B_SANITIZE_OPTION', get_option('b_sanitize'))\n    +endif\n    +\n    cdata.set_quoted('PACKAGE_VERSION', soup_version)\n    cdata.set_quoted('LOCALEDIR', join_paths(prefix, get_option('localedir')))\n    cdata.set_quoted('GETTEXT_PACKAGE', libsoup_api_name)\n    diff --git a/tests/server-mem-limit-test.c b/tests/server-mem-limit-test.c\n    index 98f1c40f..65dc875e 100644\n    --- a/tests/server-mem-limit-test.c\n    +++ b/tests/server-mem-limit-test.c\n    @@ -126,14 +126,19 @@ main (int argc, char **argv)\n    {\n        int ret;\n    \n    -\ttest_init (argc, argv, NULL);\n    -\n    -\t#ifndef G_OS_WIN32\n    -\tstruct rlimit new_rlimit = { 1024 * 1024 * 64, 1024 * 1024 * 64 };\n    +\t/* a build with an address sanitizer may crash on mmap() with the limit,\n    +\t   thus skip the limit set in such case, even it may not necessarily\n    +\t   trigger the bug if it regresses */\n    +\t#if !defined(G_OS_WIN32) && !defined(B_SANITIZE_OPTION)\n    +\tstruct rlimit new_rlimit = { 1024UL * 1024UL * 1024UL * 2UL, 1024UL * 1024UL * 1024UL * 2UL };\n        /* limit memory usage, to trigger too large memory allocation abort */\n        g_assert_cmpint (setrlimit (RLIMIT_DATA, &new_rlimit), ==, 0);\n    +\t#else\n    +\tg_message (\"server-mem-limit-test: Running without memory limit\");\n        #endif\n    \n    +\ttest_init (argc, argv, NULL);\n    +\n        g_test_add (\"/server-mem/range-overlaps\", ServerData, NULL,\n                server_setup, do_ranges_overlaps_test, server_teardown);\n    \n    -- \n    GitLab\n    "
    },
    "CVE-2025-2784": {
        "pr_number": [
            "13681",
            "13667"
        ],
        "cve_description": "\n    A flaw was found in libsoup. The implementation of HTTP range requests is vulnerable to a resource consumption attack. This flaw allows a malicious client to request the same range many times in a single HTTP request, causing the server to use large amounts of memory. This does not allow for a full denial of service.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/435/diffs",
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/c415ad0b6771992e66c70edf373566c6e247089d"
        ],
        "upstream_patch": "\n    From 242a10fbb12dbdc12d254bd8fc8669a0ac055304 Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Wed, 5 Feb 2025 14:39:42 -0600\n    Subject: [PATCH] sniffer: Fix potential overflow\n\n    ---\n    libsoup/content-sniffer/soup-content-sniffer.c |   2 +-\n    tests/meson.build                              |   4 +++-\n    tests/resources/whitespace.html                | Bin 0 -> 512 bytes\n    tests/sniffing-test.c                          |   5 +++++\n    tests/soup-tests.gresource.xml                 |   1 +\n    5 files changed, 10 insertions(+), 2 deletions(-)\n    create mode 100644 tests/resources/whitespace.html\n\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n    index aeee2e25c..da94e60c3 100644\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\n    @@ -669,7 +669,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n            pos = 3;\n    \n    look_for_tag:\n    -\tif (pos > resource_length)\n    +\tif (pos >= resource_length)\n            goto text_html;\n    \n        if (skip_insignificant_space (resource, &pos, resource_length))\n    diff --git a/tests/meson.build b/tests/meson.build\n    index 5aee70bc1..ee118a015 100644\n    --- a/tests/meson.build\n    +++ b/tests/meson.build\n    @@ -103,7 +103,9 @@ tests = [\n    {'name': 'session'},\n    {'name': 'server-auth'},\n    {'name': 'server'},\n    -  {'name': 'sniffing'},\n    +  {'name': 'sniffing',\n    +    'depends': [test_resources],\n    +  },\n    {'name': 'ssl',\n        'dependencies': [gnutls_dep],\n        'depends': mock_pkcs11_module,\n    diff --git a/tests/resources/whitespace.html b/tests/resources/whitespace.html\n    new file mode 100644\n    index 0000000000000000000000000000000000000000..7f07a0e639a102284d6f7c0c5d5560170f994553\n    GIT binary patch\n    literal 512\n    TcmcCf)YWAe1tT*Abam|ja4Z2(\n\n    literal 0\n    HcmV?d00001\n\n    diff --git a/tests/sniffing-test.c b/tests/sniffing-test.c\n    index 6116719ae..b5428177f 100644\n    --- a/tests/sniffing-test.c\n    +++ b/tests/sniffing-test.c\n    @@ -512,6 +512,11 @@ main (int argc, char **argv)\n                    \"type/text_html; charset=UTF-8/test.html => text/html; charset=UTF-8\",\n                    do_sniffing_test);\n    \n    +        /* Test hitting skip_insignificant_space() with number of bytes equaling resource_length. */\n    +\tg_test_add_data_func (\"/sniffing/whitespace\",\n    +\t\t\t      \"type/text_html/whitespace.html => text/html\",\n    +\t\t\t      do_sniffing_test);\n    +\n        /* Test that disabling the sniffer works correctly */\n        g_test_add_data_func (\"/sniffing/disabled\",\n                    \"/text_or_binary/home.gif\",\n    diff --git a/tests/soup-tests.gresource.xml b/tests/soup-tests.gresource.xml\n    index 9c08d170e..cbef1d402 100644\n    --- a/tests/soup-tests.gresource.xml\n    +++ b/tests/soup-tests.gresource.xml\n    @@ -25,5 +25,6 @@\n        <file>resources/text.txt</file>\n        <file>resources/text_binary.txt</file>\n        <file>resources/tux.webp</file>\n    +    <file>resources/whitespace.html</file>\n    </gresource>\n    </gresources>\n    -- \n    GitLab\n\n\n    From c415ad0b6771992e66c70edf373566c6e247089d Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Tue, 18 Feb 2025 14:29:50 -0600\n    Subject: [PATCH] sniffer: Add better coverage of skip_insignificant_space()\n\n    ---\n    .../content-sniffer/soup-content-sniffer.c    |  10 ++--\n    tests/resources/whitespace.html               | Bin 512 -> 0 bytes\n    tests/sniffing-test.c                         |  53 ++++++++++++++++--\n    tests/soup-tests.gresource.xml                |   1 -\n    4 files changed, 53 insertions(+), 11 deletions(-)\n    delete mode 100644 tests/resources/whitespace.html\n\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n    index da94e60c3..a5e18d5d5 100644\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\n    @@ -638,8 +638,11 @@ sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)\n    }\n    \n    static gboolean\n    -skip_insignificant_space (const char *resource, int *pos, int resource_length)\n    +skip_insignificant_space (const char *resource, gsize *pos, gsize resource_length)\n    {\n    +        if (*pos >= resource_length)\n    +\t        return TRUE;\n    +\n        while ((resource[*pos] == '\t') ||\n            (resource[*pos] == ' ') ||\n            (resource[*pos] == '\n') ||\n    @@ -659,7 +662,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n        gsize resource_length;\n        const char *resource = g_bytes_get_data (buffer, &resource_length);\n        resource_length = MIN (512, resource_length);\n    -\tint pos = 0;\n    +\tgsize pos = 0;\n    \n        if (resource_length < 3)\n            goto text_html;\n    @@ -669,9 +672,6 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n            pos = 3;\n    \n    look_for_tag:\n    -\tif (pos >= resource_length)\n    -\t\tgoto text_html;\n    -\n        if (skip_insignificant_space (resource, &pos, resource_length))\n            goto text_html;\n    \n    diff --git a/tests/resources/whitespace.html b/tests/resources/whitespace.html\n    deleted file mode 100644\n    index 7f07a0e639a102284d6f7c0c5d5560170f994553..0000000000000000000000000000000000000000\n    GIT binary patch\n    literal 0\n    HcmV?d00001\n\n    literal 512\n    TcmcCf)YWAe1tT*Abam|ja4Z2(\n\n    diff --git a/tests/sniffing-test.c b/tests/sniffing-test.c\n    index b5428177f..7857732da 100644\n    --- a/tests/sniffing-test.c\n    +++ b/tests/sniffing-test.c\n    @@ -342,6 +342,52 @@ test_disabled (gconstpointer data)\n        g_uri_unref (uri);\n    }\n    \n    +static const gsize MARKUP_LENGTH = strlen (\"<!--\") + strlen (\"-->\");\n    +\n    +static void\n    +do_skip_whitespace_test (void)\n    +{\n    +        SoupContentSniffer *sniffer = soup_content_sniffer_new ();\n    +        SoupMessage *msg = soup_message_new (SOUP_METHOD_GET, \"http://example.org\");\n    +        const char *test_cases[] = {\n    +                \"\",\n    +                \"<rdf:RDF\",\n    +                \"<rdf:RDFxmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\",\n    +                \"<rdf:RDFxmlns=\"http://purl.org/rss/1.0/\"\",\n    +        };\n    +\n    +        soup_message_headers_set_content_type (soup_message_get_response_headers (msg), \"text/html\", NULL);\n    +\n    +        for (guint i = 0; i < G_N_ELEMENTS (test_cases); i++) {\n    +                const char *trailing_data = test_cases[i];\n    +                gsize leading_zeros = 512 - MARKUP_LENGTH - strlen (trailing_data);\n    +                gsize testsize = MARKUP_LENGTH + leading_zeros + strlen (trailing_data);\n    +                guint8 *data = g_malloc0 (testsize);\n    +                guint8 *p = data;\n    +                char *content_type;\n    +                GBytes *buffer;\n    +\n    +                // Format of <!--[0x00 * $leading_zeros]-->$trailing_data\n    +                memcpy (p, \"<!--\", strlen (\"<!--\"));\n    +                p += strlen (\"<!--\");\n    +                p += leading_zeros;\n    +                memcpy (p, \"-->\", strlen (\"-->\"));\n    +                p += strlen (\"-->\");\n    +                if (strlen (trailing_data))\n    +                        memcpy (p, trailing_data, strlen (trailing_data));\n    +                // Purposefully not NUL terminated.                \n    +\n    +                buffer = g_bytes_new_take (g_steal_pointer (&data), testsize);\n    +                content_type = soup_content_sniffer_sniff (sniffer, msg, buffer, NULL);\n    +\n    +                g_free (content_type);\n    +                g_bytes_unref (buffer);\n    +        }\n    +\n    +        g_object_unref (msg);\n    +        g_object_unref (sniffer);\n    +}\n    +\n    int\n    main (int argc, char **argv)\n    {\n    @@ -512,16 +558,13 @@ main (int argc, char **argv)\n                    \"type/text_html; charset=UTF-8/test.html => text/html; charset=UTF-8\",\n                    do_sniffing_test);\n    \n    -        /* Test hitting skip_insignificant_space() with number of bytes equaling resource_length. */\n    -\tg_test_add_data_func (\"/sniffing/whitespace\",\n    -\t\t\t      \"type/text_html/whitespace.html => text/html\",\n    -\t\t\t      do_sniffing_test);\n    -\n        /* Test that disabling the sniffer works correctly */\n        g_test_add_data_func (\"/sniffing/disabled\",\n                    \"/text_or_binary/home.gif\",\n                    test_disabled);\n    \n    +\tg_test_add_func (\"/sniffing/whitespace\", do_skip_whitespace_test);\n    +\n        ret = g_test_run ();\n    \n        g_uri_unref (base_uri);\n    diff --git a/tests/soup-tests.gresource.xml b/tests/soup-tests.gresource.xml\n    index cbef1d402..9c08d170e 100644\n    --- a/tests/soup-tests.gresource.xml\n    +++ b/tests/soup-tests.gresource.xml\n    @@ -25,6 +25,5 @@\n        <file>resources/text.txt</file>\n        <file>resources/text_binary.txt</file>\n        <file>resources/tux.webp</file>\n    -    <file>resources/whitespace.html</file>\n    </gresource>\n    </gresources>\n    -- \n    GitLab\n    "
    },
    "CVE-2025-32050": {
        "pr_number": [
            "13681",
            "13667"
        ],
        "cve_description": "\n    A flaw was found in libsoup. The libsoup append_param_quoted() function may contain an overflow bug resulting in a buffer under-read.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/9bb0a55de55c6940ced811a64fbca82fe93a9323"
        ],
        "upstream_patch": "\n    From 9bb0a55de55c6940ced811a64fbca82fe93a9323 Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Mon, 28 Oct 2024 12:29:48 -0500\n    Subject: [PATCH] Fix using int instead of size_t for strcspn return\n\n    ---\n    libsoup/soup-headers.c | 2 +-\n    1 file changed, 1 insertion(+), 1 deletion(-)\n\n    diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n    index 613e1905..a5f7a7f6 100644\n    --- a/libsoup/soup-headers.c\n    +++ b/libsoup/soup-headers.c\n    @@ -907,7 +907,7 @@ append_param_quoted (GString    *string,\n                const char *name,\n                const char *value)\n    {\n    -\tint len;\n    +\tgsize len;\n    \n        g_string_append (string, name);\n        g_string_append (string, \"=\"\");\n    -- \n    GitLab\n    "
    },
    "CVE-2025-32051": {
        "pr_number": [
            "13681",
            "13667"
        ],
        "cve_description": "\n    A flaw was found in libsoup. The libsoup soup_uri_decode_data_uri() function may crash when processing malformed data URI. This flaw allows an attacker to cause a denial of service (DoS).\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/79cfd65c9bd8024cd45dd725c284766329873709",
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/0713ba4a719da938dc8facc89fca99cd0aa3069f"
        ],
        "upstream_patch": "\n    From 79cfd65c9bd8024cd45dd725c284766329873709 Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Fri, 22 Nov 2024 13:39:51 -0600\n    Subject: [PATCH] soup_uri_decode_data_uri(): Handle URIs with a path starting\n    with //\n\n    ---\n    libsoup/soup-uri-utils.c | 8 ++++++++\n    tests/uri-parsing-test.c | 2 ++\n    2 files changed, 10 insertions(+)\n\n    diff --git a/libsoup/soup-uri-utils.c b/libsoup/soup-uri-utils.c\n    index 9dab5d65f..f61e76566 100644\n    --- a/libsoup/soup-uri-utils.c\n    +++ b/libsoup/soup-uri-utils.c\n    @@ -286,6 +286,7 @@ soup_uri_decode_data_uri (const char *uri,\n            gboolean base64 = FALSE;\n            char *uri_string;\n            GBytes *bytes;\n    +        const char *path;\n    \n            g_return_val_if_fail (uri != NULL, NULL);\n    \n    @@ -301,6 +302,13 @@ soup_uri_decode_data_uri (const char *uri,\n            if (content_type)\n                    *content_type = NULL;\n    \n    +        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n    +        path = g_uri_get_path (soup_uri);\n    +        if (path[0] == '/' && path[1] == '/') {\n    +                g_uri_unref (soup_uri);\n    +                return NULL;\n    +        }\n    +\n            uri_string = g_uri_to_string (soup_uri);\n            g_uri_unref (soup_uri);\n            if (!uri_string)\n    diff --git a/tests/uri-parsing-test.c b/tests/uri-parsing-test.c\n    index 1f16273d1..418391eb7 100644\n    --- a/tests/uri-parsing-test.c\n    +++ b/tests/uri-parsing-test.c\n    @@ -141,6 +141,8 @@ static struct {\n            { \"data:text/plain;base64,aGVsbG8=\", \"hello\", \"text/plain\" },\n            { \"data:text/plain;base64,invalid=\", \"\", \"text/plain\" },\n            { \"data:,\", \"\", CONTENT_TYPE_DEFAULT },\n    +        { \"data:.///\", NULL, NULL },\n    +        { \"data:/.//\", NULL, NULL },\n    };\n    \n    static void\n    -- \n    GitLab\n\n    \n    From 0713ba4a719da938dc8facc89fca99cd0aa3069f Mon Sep 17 00:00:00 2001\n    From: Ar Jun <pkillarjun@protonmail.com>\n    Date: Sat, 16 Nov 2024 11:50:09 -0600\n    Subject: [PATCH] Fix possible NULL deref in soup_uri_decode_data_uri\n\n    ---\n    libsoup/soup-uri-utils.c | 2 ++\n    1 file changed, 2 insertions(+)\n\n    diff --git a/libsoup/soup-uri-utils.c b/libsoup/soup-uri-utils.c\n    index 4e76b74d..9dab5d65 100644\n    --- a/libsoup/soup-uri-utils.c\n    +++ b/libsoup/soup-uri-utils.c\n    @@ -303,6 +303,8 @@ soup_uri_decode_data_uri (const char *uri,\n    \n            uri_string = g_uri_to_string (soup_uri);\n            g_uri_unref (soup_uri);\n    +        if (!uri_string)\n    +                return NULL;\n    \n            start = uri_string + 5;\n            comma = strchr (start, ',');\n    -- \n    GitLab\n    "
    },
    "CVE-2025-32052": {
        "pr_number": [
            "13681",
            "13667"
        ],
        "cve_description": "\n    A flaw was found in libsoup. A vulnerability in the sniff_unknown() function may lead to heap buffer over-read.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/f182429e5b1fc034050510da20c93256c4fa9652"
        ],
        "upstream_patch": "\n    From f182429e5b1fc034050510da20c93256c4fa9652 Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Sat, 16 Nov 2024 12:07:30 -0600\n    Subject: [PATCH] Fix heap buffer overflow in soup_content_sniffer_sniff\n\n    Co-Author: Ar Jun <pkillarjun@protonmail.com>\n    ---\n    libsoup/content-sniffer/soup-content-sniffer.c | 2 +-\n    1 file changed, 1 insertion(+), 1 deletion(-)\n\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n    index de0985eac..b62e48889 100644\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\n    @@ -524,7 +524,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,\n                guint index_pattern = 0;\n                gboolean skip_row = FALSE;\n    \n    -\t\t\twhile ((index_stream < resource_length) &&\n    +\t\t\twhile ((index_stream < resource_length - 1) &&\n                    (index_pattern <= type_row->pattern_length)) {\n                    /* Skip insignificant white space (\"WS\" in the spec) */\n                    if (type_row->pattern[index_pattern] == ' ') {\n    -- \n    GitLab\n    "
    },
    "CVE-2025-46420": {
        "pr_number": [
            "13681",
            "13667"
        ],
        "cve_description": "\n    A flaw was found in libsoup. It is vulnerable to memory leaks in the soup_header_parse_quality_list() function when parsing a quality list that contains elements with all zeroes.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/c9083869ec2a3037e6df4bd86b45c419ba295f8e"
        ],
        "upstream_patch": "\n    From c9083869ec2a3037e6df4bd86b45c419ba295f8e Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Thu, 26 Dec 2024 18:31:42 -0600\n    Subject: [PATCH] soup_header_parse_quality_list: Fix leak\n\n    When iterating over the parsed list we now steal the allocated strings that we want and then free_full the list which may contain remaining strings.\n    ---\n    libsoup/soup-headers.c | 11 +++++------\n    1 file changed, 5 insertions(+), 6 deletions(-)\n\n    diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n    index a5f7a7f6..85385cea 100644\n    --- a/libsoup/soup-headers.c\n    +++ b/libsoup/soup-headers.c\n    @@ -530,7 +530,7 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n        GSList *unsorted;\n        QualityItem *array;\n        GSList *sorted, *iter;\n    -\tchar *item, *semi;\n    +\tchar *semi;\n        const char *param, *equal, *value;\n        double qval;\n        int n;\n    @@ -543,9 +543,8 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n        unsorted = soup_header_parse_list (header);\n        array = g_new0 (QualityItem, g_slist_length (unsorted));\n        for (iter = unsorted, n = 0; iter; iter = iter->next) {\n    -\t\titem = iter->data;\n            qval = 1.0;\n    -\t\tfor (semi = strchr (item, ';'); semi; semi = strchr (semi + 1, ';')) {\n    +\t\tfor (semi = strchr (iter->data, ';'); semi; semi = strchr (semi + 1, ';')) {\n                param = skip_lws (semi + 1);\n                if (*param != 'q')\n                    continue;\n    @@ -577,15 +576,15 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n            if (qval == 0.0) {\n                if (unacceptable) {\n                    *unacceptable = g_slist_prepend (*unacceptable,\n    -\t\t\t\t\t\t\t\t item);\n    +\t\t\t\t\t\t\t\t g_steal_pointer (&iter->data));\n                }\n            } else {\n    -\t\t\tarray[n].item = item;\n    +\t\t\tarray[n].item = g_steal_pointer (&iter->data);\n                array[n].qval = qval;\n                n++;\n            }\n        }\n    -\tg_slist_free (unsorted);\n    +\tg_slist_free_full (unsorted, g_free);\n    \n        qsort (array, n, sizeof (QualityItem), sort_by_qval);\n        sorted = NULL;\n    -- \n    GitLab\n    "
    },
    "CVE-2025-46421": {
        "pr_number": [
            "13681",
            "13667"
        ],
        "cve_description": "\n    A flaw was found in libsoup. When libsoup clients encounter an HTTP redirect, they mistakenly send the HTTP Authorization header to the new host that the redirection points to. This allows the new host to impersonate the user to the original host that issued the redirect.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/3e5c26415811f19e7737238bb23305ffaf96f66b"
        ],
        "upstream_patch": "\n    From 3e5c26415811f19e7737238bb23305ffaf96f66b Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Wed, 5 Feb 2025 16:18:10 -0600\n    Subject: [PATCH] session: Strip authentication credentails on cross-origin\n    redirect\n\n    This should match the behavior of Firefox and Safari but not of Chromium.\n    ---\n    libsoup/soup-session.c |  6 ++++\n    tests/auth-test.c      | 77 ++++++++++++++++++++++++++++++++++++++++++\n    2 files changed, 83 insertions(+)\n\n    diff --git a/libsoup/soup-session.c b/libsoup/soup-session.c\n    index 38435fd1..cbe4c46f 100644\n    --- a/libsoup/soup-session.c\n    +++ b/libsoup/soup-session.c\n    @@ -1230,6 +1230,12 @@ soup_session_redirect_message (SoupSession *session,\n                            SOUP_ENCODING_NONE);\n        }\n    \n    +        /* Strip all credentials on cross-origin redirect. */\n    +        if (!soup_uri_host_equal (soup_message_get_uri (msg), new_uri)) {\n    +                soup_message_headers_remove_common (soup_message_get_request_headers (msg), SOUP_HEADER_AUTHORIZATION);\n    +                soup_message_set_auth (msg, NULL);\n    +        }\n    +\n            soup_message_set_request_host_from_uri (msg, new_uri);\n        soup_message_set_uri (msg, new_uri);\n        g_uri_unref (new_uri);\n    diff --git a/tests/auth-test.c b/tests/auth-test.c\n    index 484097f1..7c3b5510 100644\n    --- a/tests/auth-test.c\n    +++ b/tests/auth-test.c\n    @@ -1,6 +1,7 @@\n    /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n    \n    #include \"test-utils.h\"\n    +#include \"soup-uri-utils-private.h\"\n    \n    static const char *base_uri;\n    static GMainLoop *loop;\n    @@ -1916,6 +1917,81 @@ do_missing_params_test (gconstpointer auth_header)\n        soup_test_server_quit_unref (server);\n    }\n    \n    +static void\n    +redirect_server_callback (SoupServer        *server,\n    +                          SoupServerMessage *msg,\n    +                          const char        *path,\n    +                          GHashTable        *query,\n    +                          gpointer           user_data)\n    +{\n    +    static gboolean redirected = FALSE;\n    +\n    +    if (!redirected) {\n    +        char *redirect_uri = g_uri_to_string (user_data);\n    +        soup_server_message_set_redirect (msg, SOUP_STATUS_MOVED_PERMANENTLY, redirect_uri);\n    +        g_free (redirect_uri);\n    +        redirected = TRUE;\n    +        return;\n    +    }\n    +\n    +    g_assert_not_reached ();\n    +}\n    +\n    +static gboolean\n    +auth_for_redirect_callback (SoupMessage *msg, SoupAuth *auth, gboolean retrying, gpointer user_data)\n    +{\n    +    GUri *known_server_uri = user_data;\n    +\n    +    if (!soup_uri_host_equal (known_server_uri, soup_message_get_uri (msg)))\n    +        return FALSE;\n    +\n    +    soup_auth_authenticate (auth, \"user\", \"good-basic\");\n    +\n    +    return TRUE;\n    +}\n    +\n    +static void\n    +do_strip_on_crossorigin_redirect (void)\n    +{\n    +    SoupSession *session;\n    +    SoupMessage *msg;\n    +    SoupServer *server1, *server2;\n    +    SoupAuthDomain *auth_domain;\n    +    GUri *uri;\n    +    gint status;\n    +\n    +    server1 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n    +    server2 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n    +\n    +    /* Both servers have the same credentials. */\n    +    auth_domain = soup_auth_domain_basic_new (\"realm\", \"auth-test\", \"auth-callback\", server_basic_auth_callback, NULL);\n    +    soup_auth_domain_add_path (auth_domain, \"/\");\n    +    soup_server_add_auth_domain (server1, auth_domain);\n    +    soup_server_add_auth_domain (server2, auth_domain);\n    +    g_object_unref (auth_domain);\n    +\n    +    /* Server 1 asks for auth, then redirects to Server 2. */\n    +    soup_server_add_handler (server1, NULL,\n    +                    redirect_server_callback,\n    +                   soup_test_server_get_uri (server2, \"http\", NULL), (GDestroyNotify)g_uri_unref);\n    +    /* Server 2 requires auth. */\n    +    soup_server_add_handler (server2, NULL, server_callback, NULL, NULL);\n    +\n    +    session = soup_test_session_new (NULL);\n    +    uri = soup_test_server_get_uri (server1, \"http\", NULL);\n    +    msg = soup_message_new_from_uri (\"GET\", uri);\n    +    /* The client only sends credentials for the host it knows. */\n    +    g_signal_connect (msg, \"authenticate\", G_CALLBACK (auth_for_redirect_callback), uri);\n    +\n    +    status = soup_test_session_send_message (session, msg);\n    +\n    +    g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n    +\n    +    g_uri_unref (uri);\n    +    soup_test_server_quit_unref (server1);\n    +    soup_test_server_quit_unref (server2);\n    +}\n    +\n    int\n    main (int argc, char **argv)\n    {\n    @@ -1949,6 +2025,7 @@ main (int argc, char **argv)\n        g_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n            g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n            g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n    +        g_test_add_func (\"/auth/strip-on-crossorigin-redirect\", do_strip_on_crossorigin_redirect);\n            g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\"auth\"\", do_missing_params_test);\n            g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\"auth-test\", qop=\"auth,auth-int\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\", do_missing_params_test);\n            g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\"auth-test\", qop=\"auth,auth-int\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\" algorithm=\"MD5-sess\"\", do_missing_params_test);\n    -- \n    GitLab\n    "
    },
    "CVE-2025-32914": {
        "pr_number": [
            "13594",
            "13582"
        ],
        "cve_description": "\n    A flaw was found in libsoup, where the soup_multipart_new_from_message() function is vulnerable to an out-of-bounds read. This flaw allows a malicious HTTP client to induce the libsoup server to read out of bounds.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/450"
        ],
        "upstream_patch": "\n    From 5bfcf8157597f2d327050114fb37ff600004dbcf Mon Sep 17 00:00:00 2001\n    From: Milan Crha <mcrha@redhat.com>\n    Date: Tue, 15 Apr 2025 09:03:00 +0200\n    Subject: [PATCH] multipart: Fix read out of buffer bounds under\n    soup_multipart_new_from_message()\n\n    This is CVE-2025-32914, special crafted input can cause read out of buffer bounds\n    of the body argument.\n\n    Closes #436\n    ---\n    libsoup/soup-multipart.c |  2 +-\n    tests/multipart-test.c   | 58 ++++++++++++++++++++++++++++++++++++++++\n    2 files changed, 59 insertions(+), 1 deletion(-)\n\n    diff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\n    index 2421c91f8..102ce3722 100644\n    --- a/libsoup/soup-multipart.c\n    +++ b/libsoup/soup-multipart.c\n    @@ -173,7 +173,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\n                return NULL;\n            }\n    \n    -\t\tsplit = strstr (start, \"\r\n\r\n\");\n    +\t\tsplit = g_strstr_len (start, body_end - start, \"\r\n\r\n\");\n            if (!split || split > end) {\n                soup_multipart_free (multipart);\n                return NULL;\n    diff --git a/tests/multipart-test.c b/tests/multipart-test.c\n    index 2c0e7e969..f5b986889 100644\n    --- a/tests/multipart-test.c\n    +++ b/tests/multipart-test.c\n    @@ -471,6 +471,62 @@ test_multipart (gconstpointer data)\n        loop = NULL;\n    }\n    \n    +static void\n    +test_multipart_bounds_good (void)\n    +{\n    +\t#define TEXT \"line1\r\nline2\"\n    +\tSoupMultipart *multipart;\n    +\tSoupMessageHeaders *headers, *set_headers = NULL;\n    +\tGBytes *bytes, *set_bytes = NULL;\n    +\tconst char *raw_data = \"--123\r\nContent-Type: text/plain;\r\n\r\n\" TEXT \"\r\n--123--\r\n\";\n    +\tgboolean success;\n    +\n    +\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n    +\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\"123\"\");\n    +\n    +\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n    +\n    +\tmultipart = soup_multipart_new_from_message (headers, bytes);\n    +\n    +\tg_assert_nonnull (multipart);\n    +\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\n    +\tsuccess = soup_multipart_get_part (multipart, 0, &set_headers, &set_bytes);\n    +\tg_assert_true (success);\n    +\tg_assert_nonnull (set_headers);\n    +\tg_assert_nonnull (set_bytes);\n    +\tg_assert_cmpint (strlen (TEXT), ==, g_bytes_get_size (set_bytes));\n    +\tg_assert_cmpstr (\"text/plain\", ==, soup_message_headers_get_content_type (set_headers, NULL));\n    +\tg_assert_cmpmem (TEXT, strlen (TEXT), g_bytes_get_data (set_bytes, NULL), g_bytes_get_size (set_bytes));\n    +\n    +\tsoup_message_headers_unref (headers);\n    +\tg_bytes_unref (bytes);\n    +\n    +\tsoup_multipart_free (multipart);\n    +\n    +\t#undef TEXT\n    +}\n    +\n    +static void\n    +test_multipart_bounds_bad (void)\n    +{\n    +\tSoupMultipart *multipart;\n    +\tSoupMessageHeaders *headers;\n    +\tGBytes *bytes;\n    +\tconst char *raw_data = \"--123\r\nContent-Type: text/plain;\r\nline1\r\nline2\r\n--123--\r\n\";\n    +\n    +\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n    +\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\"123\"\");\n    +\n    +\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n    +\n    +\t/* it did read out of raw_data/bytes bounds */\n    +\tmultipart = soup_multipart_new_from_message (headers, bytes);\n    +\tg_assert_null (multipart);\n    +\n    +\tsoup_message_headers_unref (headers);\n    +\tg_bytes_unref (bytes);\n    +}\n    +\n    int\n    main (int argc, char **argv)\n    {\n    @@ -498,6 +554,8 @@ main (int argc, char **argv)\n        g_test_add_data_func (\"/multipart/sync\", GINT_TO_POINTER (SYNC_MULTIPART), test_multipart);\n        g_test_add_data_func (\"/multipart/async\", GINT_TO_POINTER (ASYNC_MULTIPART), test_multipart);\n        g_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\n    +\tg_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);\n    +\tg_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);\n    \n        ret = g_test_run ();\n    \n    -- \n    GitLab\n    "
    },
    "CVE-2025-32908": {
        "pr_number": [
            "13594",
            "13582"
        ],
        "cve_description": "\n    A flaw was found in libsoup. The HTTP/2 server in libsoup may not fully validate the values of pseudo-headers :scheme, :authority, and :path, which may allow a user to cause a denial of service (DoS).\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/451"
        ],
        "upstream_patch": "\n    From a792b23ab87cacbf4dd9462bf7b675fa678efbae Mon Sep 17 00:00:00 2001\n    From: Milan Crha <mcrha@redhat.com>\n    Date: Tue, 15 Apr 2025 09:59:05 +0200\n    Subject: [PATCH] soup-server-http2: Check validity of the constructed\n    connection URI\n\n    The HTTP/2 pseudo-headers can contain invalid values, which the GUri rejects\n    and returns NULL, but the soup-server did not check the validity and could\n    abort the server itself later in the code.\n\n    Closes #429\n    ---\n    .../http2/soup-server-message-io-http2.c      |  4 +++\n    tests/http2-test.c                            | 28 +++++++++++++++++++\n    2 files changed, 32 insertions(+)\n\n    diff --git a/libsoup/server/http2/soup-server-message-io-http2.c b/libsoup/server/http2/soup-server-message-io-http2.c\n    index 943ecfd3..f1fe2d5c 100644\n    --- a/libsoup/server/http2/soup-server-message-io-http2.c\n    +++ b/libsoup/server/http2/soup-server-message-io-http2.c\n    @@ -771,9 +771,13 @@ on_frame_recv_callback (nghttp2_session     *session,\n                    char *uri_string;\n                    GUri *uri;\n    \n    +\t\tif (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n    +\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n                    uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n                    uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n                    g_free (uri_string);\n    +\t\tif (uri == NULL)\n    +\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n                    soup_server_message_set_uri (msg_io->msg, uri);\n                    g_uri_unref (uri);\n    \n    diff --git a/tests/http2-test.c b/tests/http2-test.c\n    index 5b6da5e4..ec7972fe 100644\n    --- a/tests/http2-test.c\n    +++ b/tests/http2-test.c\n    @@ -1341,6 +1341,30 @@ do_connection_closed_test (Test *test, gconstpointer data)\n            g_uri_unref (uri);\n    }\n    \n    +static void\n    +do_broken_pseudo_header_test (Test *test, gconstpointer data)\n    +{\n    +\tchar *path;\n    +\tSoupMessage *msg;\n    +\tGUri *uri;\n    +\tGBytes *body = NULL;\n    +\tGError *error = NULL;\n    +\n    +\turi = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n    +\n    +\t/* an ugly cheat to construct a broken URI, which can be sent from other libs */\n    +\tpath = (char *) g_uri_get_path (uri);\n    +\tpath[1] = '%';\n    +\n    +\tmsg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n    +\tbody = soup_test_session_async_send (test->session, msg, NULL, &error);\n    +\tg_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n    +\tg_assert_null (body);\n    +\tg_clear_error (&error);\n    +\tg_object_unref (msg);\n    +\tg_uri_unref (uri);\n    +}\n    +\n    static gboolean\n    unpause_message (SoupServerMessage *msg)\n    {\n    @@ -1662,6 +1686,10 @@ main (int argc, char **argv)\n                        setup_session,\n                        do_connection_closed_test,\n                        teardown_session);\n    +        g_test_add (\"/http2/broken-pseudo-header\", Test, NULL,\n    +                    setup_session,\n    +                    do_broken_pseudo_header_test,\n    +                    teardown_session);\n    \n        ret = g_test_run ();\n    \n    -- \n    GitLab\n    "
    },
    "CVE-2025-32053": {
        "pr_number": [
            "13406"
        ],
        "cve_description": "\n    A flaw was found in libsoup. A vulnerability in sniff_feed_or_html() and skip_insignificant_space() functions may lead to a heap buffer over-read.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/eaed42ca8d40cd9ab63764e3d63641180505f40a"
        ],
        "upstream_patch": "\n    From eaed42ca8d40cd9ab63764e3d63641180505f40a Mon Sep 17 00:00:00 2001\n    From: Ar Jun <pkillarjun@protonmail.com>\n    Date: Mon, 18 Nov 2024 14:59:51 -0600\n    Subject: [PATCH] Fix heap buffer overflow in\n    soup-content-sniffer.c:sniff_feed_or_html()\n\n    ---\n    libsoup/content-sniffer/soup-content-sniffer.c | 4 ++--\n    1 file changed, 2 insertions(+), 2 deletions(-)\n\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n    index b62e4888..5a181ff1 100644\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\n    @@ -641,7 +641,7 @@ skip_insignificant_space (const char *resource, int *pos, int resource_length)\n            (resource[*pos] == '\r')) {\n            *pos = *pos + 1;\n    \n    -\t\tif (*pos > resource_length)\n    +\t\tif (*pos >= resource_length)\n                return TRUE;\n        }\n    \n    @@ -704,7 +704,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n            do {\n                pos++;\n    \n    -\t\t\tif (pos > resource_length)\n    +\t\t\tif ((pos + 1) > resource_length)\n                    goto text_html;\n            } while (resource[pos] != '>');\n    \n    -- \n    GitLab\n    "
    },
    "CVE-2025-32913": {
        "pr_number": [
            "13543",
            "13446"
        ],
        "cve_description": "\n    A flaw was found in libsoup, where the soup_message_headers_get_content_disposition() function is vulnerable to a NULL pointer dereference. This flaw allows a malicious HTTP peer to crash a libsoup client or server that uses this function.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/f4a761fb66512fff59798765e8ac5b9e57dceef0.patch"
        ],
        "upstream_patch": "\n    From f4a761fb66512fff59798765e8ac5b9e57dceef0 Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Fri, 27 Dec 2024 18:00:39 -0600\n    Subject: [PATCH] soup_message_headers_get_content_disposition: strdup\n    truncated filenames\n\n    This table frees the strings it contains.\n    ---\n    libsoup/soup-message-headers.c | 2 +-\n    tests/header-parsing-test.c    | 1 +\n    2 files changed, 2 insertions(+), 1 deletion(-)\n\n    diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\n    index 04f4c302..ee7a3cb1 100644\n    --- a/libsoup/soup-message-headers.c\n    +++ b/libsoup/soup-message-headers.c\n    @@ -1664,7 +1664,7 @@ soup_message_headers_get_content_disposition (SoupMessageHeaders  *hdrs,\n                            char *filename = strrchr (orig_value, '/');\n    \n                            if (filename)\n    -                                g_hash_table_insert (*params, g_strdup (orig_key), filename + 1);\n    +                                g_hash_table_insert (*params, g_strdup (orig_key), g_strdup (filename + 1));\n                    } else {\n                            /* filename with no value isn't valid. */\n                            g_hash_table_remove (*params, \"filename\");\n    diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\n    index d0b360c8..07ea2866 100644\n    --- a/tests/header-parsing-test.c\n    +++ b/tests/header-parsing-test.c\n    @@ -1150,6 +1150,7 @@ do_content_disposition_tests (void)\n            soup_test_assert (FALSE, \"empty filename decoding FAILED\");\n            return;\n        }\n    +        g_free (disposition);\n            g_assert_false (g_hash_table_contains (params, \"filename\"));\n        g_hash_table_destroy (params);\n    \n    -- \n    GitLab\n    "
    },
    "CVE-2025-32906": {
        "pr_number": [
            "13543",
            "13446"
        ],
        "cve_description": "\n    A flaw was found in libsoup, where the soup_headers_parse_request() function may be vulnerable to an out-of-bound read. This flaw allows a malicious user to use a specially crafted HTTP request to crash the HTTP server.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/af5b9a4a3945c52b940d5ac181ef51bb12011f1f.patch"
        ],
        "upstream_patch": "\n    From af5b9a4a3945c52b940d5ac181ef51bb12011f1f Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Wed, 12 Feb 2025 11:30:02 -0600\n    Subject: [PATCH] headers: Handle parsing only newlines\n\n    Closes #404\n    Closes #407\n    ---\n    libsoup/soup-headers.c      |  4 ++--\n    tests/header-parsing-test.c | 13 ++++++++++++-\n    2 files changed, 14 insertions(+), 3 deletions(-)\n\n    diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n    index 9d6d00a3..52ef2ece 100644\n    --- a/libsoup/soup-headers.c\n    +++ b/libsoup/soup-headers.c\n    @@ -186,7 +186,7 @@ soup_headers_parse_request (const char          *str,\n        /* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n        * received where a Request-Line is expected.\"\n        */\n    -\twhile ((*str == '\r' || *str == '\n') && len > 0) {\n    +\twhile (len > 0 && (*str == '\r' || *str == '\n')) {\n            str++;\n            len--;\n        }\n    @@ -371,7 +371,7 @@ soup_headers_parse_response (const char          *str,\n        * after a response, which we then see prepended to the next\n        * response on that connection.\n        */\n    -\twhile ((*str == '\r' || *str == '\n') && len > 0) {\n    +\twhile (len > 0 && (*str == '\r' || *str == '\n')) {\n            str++;\n            len--;\n        }\n    diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\n    index 10ddb684..4faafbd6 100644\n    --- a/tests/header-parsing-test.c\n    +++ b/tests/header-parsing-test.c\n    @@ -6,10 +6,15 @@ typedef struct {\n        const char *name, *value;\n    } Header;\n    \n    +/* These are not C strings to ensure going one byte over is not safe. */\n    static char unterminated_http_version[] = {\n            'G','E','T',' ','/',' ','H','T','T','P','/','1', '0', '0', '.'\n    };\n    \n    +static char only_newlines[] = {\n    +        '\n', '\n', '\n', '\n'\n    +};\n    +\n    static struct RequestTest {\n        const char *description;\n        const char *bugref;\n    @@ -387,7 +392,6 @@ static struct RequestTest {\n        { { NULL } }\n        },\n    \n    -        /* This couldn't be a C string as going one byte over would have been safe. */\n        { \"Long HTTP version terminating at missing minor version\", \"https://gitlab.gnome.org/GNOME/libsoup/-/issues/404\",\n        unterminated_http_version, sizeof (unterminated_http_version),\n        SOUP_STATUS_BAD_REQUEST,\n    @@ -457,6 +461,13 @@ static struct RequestTest {\n        SOUP_STATUS_BAD_REQUEST,\n                NULL, NULL, -1,\n        { { NULL } }\n    +\t},\n    +\n    +\t{ \"Only newlines\", NULL,\n    +\t  only_newlines, sizeof (only_newlines),\n    +\t  SOUP_STATUS_BAD_REQUEST,\n    +           NULL, NULL, -1,\n    +\t  { { NULL } }\n        }\n    };\n    static const int num_reqtests = G_N_ELEMENTS (reqtests);\n    -- \n    GitLab\n    "
    },
    "CVE-2025-32909": {
        "pr_number": [
            "13543",
            "13446"
        ],
        "cve_description": "\n    A flaw was found in libsoup. SoupContentSniffer may be vulnerable to a NULL pointer dereference in the sniff_mp4 function. The HTTP server may cause the libsoup client to crash.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/commit/ba4c3a6f988beff59e45801ab36067293d24ce92.patch"
        ],
        "upstream_patch": "\n    From ba4c3a6f988beff59e45801ab36067293d24ce92 Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Wed, 8 Jan 2025 16:30:17 -0600\n    Subject: [PATCH] content-sniffer: Handle sniffing resource shorter than 4\n    bytes\n\n    ---\n    libsoup/content-sniffer/soup-content-sniffer.c | 7 ++++++-\n    1 file changed, 6 insertions(+), 1 deletion(-)\n\n    diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n    index 5a181ff1..aeee2e25 100644\n    --- a/libsoup/content-sniffer/soup-content-sniffer.c\n    +++ b/libsoup/content-sniffer/soup-content-sniffer.c\n    @@ -243,9 +243,14 @@ sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)\n        gsize resource_length;\n        const char *resource = g_bytes_get_data (buffer, &resource_length);\n        resource_length = MIN (512, resource_length);\n    -\tguint32 box_size = *((guint32*)resource);\n    +\tguint32 box_size;\n        guint i;\n    \n    +        if (resource_length < sizeof (guint32))\n    +                return FALSE;\n    +\n    +\tbox_size = *((guint32*)resource);\n    +\n    #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n        box_size = ((box_size >> 24) |\n                ((box_size << 8) & 0x00FF0000) |\n    -- \n    GitLab\n    "
    },
    "CVE-2025-32910": {
        "pr_number": [
            "13543",
            "13446"
        ],
        "cve_description": "\n    A flaw was found in libsoup, where soup_auth_digest_authenticate() is vulnerable to a NULL pointer dereference. This issue may cause the libsoup client to crash.\n    ",
        "patch_link": [
            "https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/417.patch"
        ],
        "upstream_patch": "\n    From e40df6d48a1cbab56f5d15016cc861a503423cfe Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Sun, 8 Dec 2024 20:00:35 -0600\n    Subject: [PATCH 1/3] auth-digest: Handle missing realm in authenticate header\n\n    ---\n    libsoup/auth/soup-auth-digest.c |  3 ++\n    tests/auth-test.c               | 50 +++++++++++++++++++++++++++++++++\n    2 files changed, 53 insertions(+)\n\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n    index 2e81849af..4f12e87a5 100644\n    --- a/libsoup/auth/soup-auth-digest.c\n    +++ b/libsoup/auth/soup-auth-digest.c\n    @@ -148,6 +148,9 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n        guint qop_options;\n        gboolean ok = TRUE;\n    \n    +        if (!soup_auth_get_realm (auth))\n    +                return FALSE;\n    +\n        g_free (priv->domain);\n        g_free (priv->nonce);\n        g_free (priv->opaque);\n    diff --git a/tests/auth-test.c b/tests/auth-test.c\n    index 158fdac10..3066e904a 100644\n    --- a/tests/auth-test.c\n    +++ b/tests/auth-test.c\n    @@ -1866,6 +1866,55 @@ do_multiple_digest_algorithms (void)\n        soup_test_server_quit_unref (server);\n    }\n    \n    +static void\n    +on_request_read_for_missing_realm (SoupServer        *server,\n    +                                   SoupServerMessage *msg,\n    +                                   gpointer           user_data)\n    +{\n    +        SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n    +        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\"auth\"\");\n    +}\n    +\n    +static void\n    +do_missing_realm_test (void)\n    +{\n    +        SoupSession *session;\n    +        SoupMessage *msg;\n    +        SoupServer *server;\n    +        SoupAuthDomain *digest_auth_domain;\n    +        gint status;\n    +        GUri *uri;\n    +\n    +        server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n    +\tsoup_server_add_handler (server, NULL,\n    +\t\t\t\t server_callback, NULL, NULL);\n    +\turi = soup_test_server_get_uri (server, \"http\", NULL);\n    +\n    +\tdigest_auth_domain = soup_auth_domain_digest_new (\n    +\t\t\"realm\", \"auth-test\",\n    +\t\t\"auth-callback\", server_digest_auth_callback,\n    +\t\tNULL);\n    +        soup_auth_domain_add_path (digest_auth_domain, \"/\");\n    +\tsoup_server_add_auth_domain (server, digest_auth_domain);\n    +        g_object_unref (digest_auth_domain);\n    +\n    +        g_signal_connect (server, \"request-read\",\n    +                          G_CALLBACK (on_request_read_for_missing_realm),\n    +                          NULL);\n    +\n    +        session = soup_test_session_new (NULL);\n    +        msg = soup_message_new_from_uri (\"GET\", uri);\n    +        g_signal_connect (msg, \"authenticate\",\n    +                          G_CALLBACK (on_digest_authenticate),\n    +                          NULL);\n    +\n    +        status = soup_test_session_send_message (session, msg);\n    +\n    +        g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n    +\tg_uri_unref (uri);\n    +\tsoup_test_server_quit_unref (server);\n    +}\n    +\n    int\n    main (int argc, char **argv)\n    {\n    @@ -1899,6 +1948,7 @@ main (int argc, char **argv)\n        g_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n            g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n            g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n    +        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n    \n        ret = g_test_run ();\n    \n    -- \n    GitLab\n\n\n    From 405a8a34597a44bd58c4759e7d5e23f02c3b556a Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Thu, 26 Dec 2024 18:18:35 -0600\n    Subject: [PATCH 2/3] auth-digest: Handle missing nonce\n\n    ---\n    libsoup/auth/soup-auth-digest.c | 45 +++++++++++++++++++++++++--------\n    tests/auth-test.c               | 19 ++++++++------\n    2 files changed, 46 insertions(+), 18 deletions(-)\n\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n    index 4f12e87a5..350bfde69 100644\n    --- a/libsoup/auth/soup-auth-digest.c\n    +++ b/libsoup/auth/soup-auth-digest.c\n    @@ -138,6 +138,19 @@ soup_auth_digest_get_qop (SoupAuthDigestQop qop)\n        return g_string_free (out, FALSE);\n    }\n    \n    +static gboolean\n    +validate_params (SoupAuthDigest *auth_digest)\n    +{\n    +        SoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);\n    +\n    +        if (priv->qop || priv->algorithm == SOUP_AUTH_DIGEST_ALGORITHM_MD5_SESS) {\n    +                if (!priv->nonce)\n    +                        return FALSE;\n    +        }\n    +\n    +        return TRUE;\n    +}\n    +\n    static gboolean\n    soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n                GHashTable *auth_params)\n    @@ -175,16 +188,21 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n        if (priv->algorithm == -1)\n            ok = FALSE;\n    \n    -\tstale = g_hash_table_lookup (auth_params, \"stale\");\n    -\tif (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n    -\t\trecompute_hex_a1 (priv);\n    -\telse {\n    -\t\tg_free (priv->user);\n    -\t\tpriv->user = NULL;\n    -\t\tg_free (priv->cnonce);\n    -\t\tpriv->cnonce = NULL;\n    -\t\tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n    -\t\tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n    +        if (!validate_params (auth_digest))\n    +                ok = FALSE;\n    +\n    +        if (ok) {\n    +                stale = g_hash_table_lookup (auth_params, \"stale\");\n    +                if (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n    +                        recompute_hex_a1 (priv);\n    +                else {\n    +                        g_free (priv->user);\n    +                        priv->user = NULL;\n    +                        g_free (priv->cnonce);\n    +                        priv->cnonce = NULL;\n    +                        memset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n    +                        memset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n    +                }\n            }\n    \n        return ok;\n    @@ -276,6 +294,8 @@ soup_auth_digest_compute_hex_a1 (const char              *hex_urp,\n    \n            /* In MD5-sess, A1 is hex_urp:nonce:cnonce */\n    \n    +                g_assert (nonce && cnonce);\n    +\n            checksum = g_checksum_new (G_CHECKSUM_MD5);\n            g_checksum_update (checksum, (guchar *)hex_urp, strlen (hex_urp));\n            g_checksum_update (checksum, (guchar *)\":\", 1);\n    @@ -366,6 +386,8 @@ soup_auth_digest_compute_response (const char        *method,\n        if (qop) {\n            char tmp[9];\n    \n    +                g_assert (cnonce);\n    +\n            g_snprintf (tmp, 9, \"%.8x\", nc);\n            g_checksum_update (checksum, (guchar *)tmp, strlen (tmp));\n            g_checksum_update (checksum, (guchar *)\":\", 1);\n    @@ -429,6 +451,9 @@ soup_auth_digest_get_authorization (SoupAuth *auth, SoupMessage *msg)\n        g_return_val_if_fail (uri != NULL, NULL);\n        url = soup_uri_get_path_and_query (uri);\n    \n    +        g_assert (priv->nonce);\n    +        g_assert (!priv->qop || priv->cnonce);\n    +\n        soup_auth_digest_compute_response (soup_message_get_method (msg), url, priv->hex_a1,\n                        priv->qop, priv->nonce,\n                        priv->cnonce, priv->nc,\n    diff --git a/tests/auth-test.c b/tests/auth-test.c\n    index 3066e904a..c651c7cd9 100644\n    --- a/tests/auth-test.c\n    +++ b/tests/auth-test.c\n    @@ -1867,16 +1867,17 @@ do_multiple_digest_algorithms (void)\n    }\n    \n    static void\n    -on_request_read_for_missing_realm (SoupServer        *server,\n    -                                   SoupServerMessage *msg,\n    -                                   gpointer           user_data)\n    +on_request_read_for_missing_params (SoupServer        *server,\n    +                                      SoupServerMessage *msg,\n    +                                      gpointer           user_data)\n    {\n    +        const char *auth_header = user_data;\n            SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n    -        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\"auth\"\");\n    +        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", auth_header);\n    }\n    \n    static void\n    -do_missing_realm_test (void)\n    +do_missing_params_test (gconstpointer auth_header)\n    {\n            SoupSession *session;\n            SoupMessage *msg;\n    @@ -1899,8 +1900,8 @@ do_missing_realm_test (void)\n            g_object_unref (digest_auth_domain);\n    \n            g_signal_connect (server, \"request-read\",\n    -                          G_CALLBACK (on_request_read_for_missing_realm),\n    -                          NULL);\n    +                          G_CALLBACK (on_request_read_for_missing_params),\n    +                          (gpointer)auth_header);\n    \n            session = soup_test_session_new (NULL);\n            msg = soup_message_new_from_uri (\"GET\", uri);\n    @@ -1948,7 +1949,9 @@ main (int argc, char **argv)\n        g_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n            g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n            g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n    -        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n    +        g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\"auth\"\", do_missing_params_test);\n    +        g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\"auth-test\", qop=\"auth,auth-int\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\", do_missing_params_test);\n    +        g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\"auth-test\", qop=\"auth,auth-int\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\" algorithm=\"MD5-sess\"\", do_missing_params_test);\n    \n        ret = g_test_run ();\n    \n    -- \n    GitLab\n\n\n    From ea16eeacb052e423eb5c3b0b705e5eab34b13832 Mon Sep 17 00:00:00 2001\n    From: Patrick Griffis <pgriffis@igalia.com>\n    Date: Fri, 27 Dec 2024 13:52:52 -0600\n    Subject: [PATCH 3/3] auth-digest: Fix leak\n\n    ---\n    libsoup/auth/soup-auth-digest.c | 1 +\n    1 file changed, 1 insertion(+)\n\n    diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n    index 350bfde69..9eb7fa0e2 100644\n    --- a/libsoup/auth/soup-auth-digest.c\n    +++ b/libsoup/auth/soup-auth-digest.c\n    @@ -72,6 +72,7 @@ soup_auth_digest_finalize (GObject *object)\n        g_free (priv->nonce);\n        g_free (priv->domain);\n        g_free (priv->cnonce);\n    +        g_free (priv->opaque);\n    \n        memset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n        memset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n    -- \n    GitLab\n    "
    }
}