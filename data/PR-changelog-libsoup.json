{
    "14412": {
        "pr_name": "[AutoPR- Security] Patch libsoup for CVE-2025-4948 [HIGH]",
        "pr_date": "2025-07-29T16:47:31Z",
        "user": "azurelinux-security",
        "url": "https://github.com/microsoft/azurelinux/pull/14412",
        "merged": false,
        "state": "open",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-4948.patch",
                "status": "added",
                "additions": 91,
                "deletions": 0,
                "changes": 91,
                "patch": "@@ -0,0 +1,91 @@\n+From 9045f1ae252a5bbda8b51335c81aca009c753838 Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Thu, 15 May 2025 17:49:11 +0200\n+Subject: [PATCH] soup-multipart: Verify boundary limits for multipart body\n+\n+It could happen that the boundary started at a place which resulted into\n+a negative number, which in an unsigned integer is a very large value.\n+Check the body size is not a negative value before setting it.\n+\n+Closes https://gitlab.gnome.org/GNOME/libsoup/-/issues/449\n+\n+Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/463>\n+---\n+ libsoup/soup-multipart.c |  2 +-\n+ tests/multipart-test.c   | 40 ++++++++++++++++++++++++++++++++++++++++\n+ 2 files changed, 41 insertions(+), 1 deletion(-)\n+\n+diff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\n+index 102ce37..a587fe7 100644\n+--- a/libsoup/soup-multipart.c\n++++ b/libsoup/soup-multipart.c\n+@@ -204,7 +204,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\n+ \t\t */\n+ \t\tpart_body = g_bytes_new_from_bytes (body, // FIXME\n+ \t\t\t\t\t\t    split - body_data,\n+-\t\t\t\t\t\t    end - 2 - split);\n++\t\t\t\t\t\t    end - 2 >= split ? end - 2 - split : 0);\n+ \t\tg_ptr_array_add (multipart->bodies, part_body);\n+ \n+ \t\tstart = end;\n+diff --git a/tests/multipart-test.c b/tests/multipart-test.c\n+index ab5f41c..a3a0b36 100644\n+--- a/tests/multipart-test.c\n++++ b/tests/multipart-test.c\n+@@ -527,6 +527,45 @@ test_multipart_bounds_bad (void)\n+ \tg_bytes_unref (bytes);\n+ }\n+ \n++static void\n++test_multipart_too_large (void)\n++{\n++\tconst char *raw_body =\n++\t\t\"-------------------\\r\\n\"\n++\t\t\"-\\n\"\n++\t\t\"Cont\\\"\\r\\n\"\n++\t\t\"Content-Tynt----e:n\\x8erQK\\r\\n\"\n++\t\t\"Content-Disposition:   name=  form-; name=\\\"file\\\"; filename=\\\"ype:i/  -d; ----\\xae\\r\\n\"\n++\t\t\"Content-Typimag\\x01/png--\\\\\\n\"\n++\t\t\"\\r\\n\"\n++\t\t\"---:\\n\\r\\n\"\n++\t\t\"\\r\\n\"\n++\t\t\"-------------------------------------\\r\\n\"\n++\t\t\"---------\\r\\n\"\n++\t\t\"----------------------\";\n++\tGBytes *body;\n++\tGHashTable *params;\n++\tSoupMessageHeaders *headers;\n++\tSoupMultipart *multipart;\n++\n++\tparams = g_hash_table_new (g_str_hash, g_str_equal);\n++\tg_hash_table_insert (params, (gpointer) \"boundary\", (gpointer) \"-----------------\");\n++\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n++\tsoup_message_headers_set_content_type (headers, \"multipart/form-data\", params);\n++\tg_hash_table_unref (params);\n++\n++\tbody = g_bytes_new_static (raw_body, strlen (raw_body));\n++\tmultipart = soup_multipart_new_from_message (headers, body);\n++\tsoup_message_headers_unref (headers);\n++\tg_bytes_unref (body);\n++\n++\tg_assert_nonnull (multipart);\n++\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\n++\tg_assert_true (soup_multipart_get_part (multipart, 0, &headers, &body));\n++\tg_assert_cmpint (g_bytes_get_size (body), ==, 0);\n++\tsoup_multipart_free (multipart);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -556,6 +595,7 @@ main (int argc, char **argv)\n+ \tg_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\n+ \tg_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);\n+ \tg_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);\n++\tg_test_add_func (\"/multipart/too-large\", test_multipart_too_large);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+2.45.4\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        7%{?dist}\n+Release:        8%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -65,6 +65,7 @@ Patch15:         CVE-2025-46421.patch\n Patch16:         CVE-2025-32053.patch\n Patch17:         CVE-2025-4476.patch\n Patch18:         CVE-2025-32907.patch\n+Patch19:         CVE-2025-4948.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -132,6 +133,9 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Tue Jul 29 2025 Azure Linux Security Servicing Account <azurelinux-security@microsoft.com> - 3.4.4-8\n+- Patch for CVE-2025-4948\n+\n * Fri Jun 13 2025 Kevin Lockwood <v-klockwood@microsoft.com> - 3.4.4-7\n - Add patch for CVE-2025-4476\n - Add patch for CVE-2025-32907"
            }
        ],
        "cves": [
            "CVE-2025-4948"
        ],
        "base_branch": "fasttrack/3.0"
    },
    "14012": {
        "pr_name": "[AUTO-CHERRYPICK] [High] Patch libsoup for CVE-2025-4476, CVE-2025-32907 - branch 3.0-dev",
        "pr_date": "2025-06-16T20:51:06Z",
        "user": "CBL-Mariner-Bot",
        "url": "https://github.com/microsoft/azurelinux/pull/14012",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-32907.patch",
                "status": "added",
                "additions": 259,
                "deletions": 0,
                "changes": 259,
                "patch": "@@ -0,0 +1,259 @@\n+From 9bb92f7a685e31e10e9e8221d0342280432ce836 Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 15 Apr 2025 12:17:39 +0200\n+Subject: [PATCH 1/2] soup-message-headers: Correct merge of ranges\n+\n+It had been skipping every second range, which generated an array\n+of a lot of insane ranges, causing large memory usage by the server.\n+\n+Closes #428\n+\n+Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/452>\n+---\n+ libsoup/soup-message-headers.c |   1 +\n+ tests/meson.build              |   1 +\n+ tests/server-mem-limit-test.c  | 144 +++++++++++++++++++++++++++++++++\n+ 3 files changed, 146 insertions(+)\n+ create mode 100644 tests/server-mem-limit-test.c\n+\n+diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\n+index 8eec4200..e799082b 100644\n+--- a/libsoup/soup-message-headers.c\n++++ b/libsoup/soup-message-headers.c\n+@@ -1244,6 +1244,7 @@ soup_message_headers_get_ranges_internal (SoupMessageHeaders  *hdrs,\n+ \t\t\tif (cur->start <= prev->end) {\n+ \t\t\t\tprev->end = MAX (prev->end, cur->end);\n+ \t\t\t\tg_array_remove_index (array, i);\n++\t\t\t\ti--;\n+ \t\t\t}\n+ \t\t}\n+ \t}\n+diff --git a/tests/meson.build b/tests/meson.build\n+index 02924c03..ac892359 100644\n+--- a/tests/meson.build\n++++ b/tests/meson.build\n+@@ -103,6 +103,7 @@ tests = [\n+   {'name': 'samesite'},\n+   {'name': 'session'},\n+   {'name': 'server-auth'},\n++  {'name': 'server-mem-limit'},\n+   {'name': 'server'},\n+   {'name': 'sniffing',\n+     'depends': [test_resources],\n+diff --git a/tests/server-mem-limit-test.c b/tests/server-mem-limit-test.c\n+new file mode 100644\n+index 00000000..98f1c40f\n+--- /dev/null\n++++ b/tests/server-mem-limit-test.c\n+@@ -0,0 +1,144 @@\n++/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n++/*\n++ * Copyright (C) 2025 Red Hat <www.redhat.com>\n++ */\n++\n++#include \"test-utils.h\"\n++\n++#include <sys/resource.h>\n++\n++/*\n++ This test limits memory usage to trigger too large buffer allocation crash.\n++ As restoring the limits back to what it was does not always work, it's split\n++ out of the server-test.c test with copied minimal server code.\n++ */\n++\n++typedef struct {\n++\tSoupServer *server;\n++\tGUri *base_uri, *ssl_base_uri;\n++\tGSList *handlers;\n++} ServerData;\n++\n++static void\n++server_setup_nohandler (ServerData *sd, gconstpointer test_data)\n++{\n++\tsd->server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++\tsd->base_uri = soup_test_server_get_uri (sd->server, \"http\", NULL);\n++\tif (tls_available)\n++\t\tsd->ssl_base_uri = soup_test_server_get_uri (sd->server, \"https\", NULL);\n++}\n++\n++static void\n++server_add_handler (ServerData         *sd,\n++\t\t    const char         *path,\n++\t\t    SoupServerCallback  callback,\n++\t\t    gpointer            user_data,\n++\t\t    GDestroyNotify      destroy)\n++{\n++\tsoup_server_add_handler (sd->server, path, callback, user_data, destroy);\n++\tsd->handlers = g_slist_prepend (sd->handlers, g_strdup (path));\n++}\n++\n++static void\n++server_setup (ServerData *sd, gconstpointer test_data)\n++{\n++\tserver_setup_nohandler (sd, test_data);\n++}\n++\n++static void\n++server_teardown (ServerData *sd, gconstpointer test_data)\n++{\n++\tGSList *iter;\n++\n++\tfor (iter = sd->handlers; iter; iter = iter->next)\n++\t\tsoup_server_remove_handler (sd->server, iter->data);\n++\tg_slist_free_full (sd->handlers, g_free);\n++\n++\tg_clear_pointer (&sd->server, soup_test_server_quit_unref);\n++\tg_clear_pointer (&sd->base_uri, g_uri_unref);\n++\tg_clear_pointer (&sd->ssl_base_uri, g_uri_unref);\n++}\n++\n++static void\n++server_file_callback (SoupServer        *server,\n++\t\t      SoupServerMessage *msg,\n++\t\t      const char        *path,\n++\t\t      GHashTable        *query,\n++\t\t      gpointer           data)\n++{\n++\tvoid *mem;\n++\n++\tg_assert_cmpstr (path, ==, \"/file\");\n++\tg_assert_cmpstr (soup_server_message_get_method (msg), ==, SOUP_METHOD_GET);\n++\n++\tmem = g_malloc0 (sizeof (char) * 1024 * 1024);\n++\t/* fedora-scan CI claims a warning about possibly leaked `mem` variable, thus use\n++\t   the copy and free it explicitly, to workaround the false positive; the g_steal_pointer()\n++\t   did not help for the malloc-ed memory */\n++\tsoup_server_message_set_response (msg, \"application/octet-stream\", SOUP_MEMORY_COPY, mem, sizeof (char) * 1024 *1024);\n++\tsoup_server_message_set_status (msg, SOUP_STATUS_OK, NULL);\n++\tg_free (mem);\n++}\n++\n++static void\n++do_ranges_overlaps_test (ServerData *sd, gconstpointer test_data)\n++{\n++\tSoupSession *session;\n++\tSoupMessage *msg;\n++\tGString *range;\n++\tGUri *uri;\n++\tconst char *chunk = \",0,0,0,0,0,0,0,0,0,0,0\";\n++\n++\tg_test_bug (\"428\");\n++\n++\t#ifdef G_OS_WIN32\n++\tg_test_skip (\"Cannot run under windows\");\n++\treturn;\n++\t#endif\n++\n++\trange = g_string_sized_new (99 * 1024);\n++\tg_string_append (range, \"bytes=1024\");\n++\twhile (range->len < 99 * 1024)\n++\t\tg_string_append (range, chunk);\n++\n++\tsession = soup_test_session_new (NULL);\n++\tserver_add_handler (sd, \"/file\", server_file_callback, NULL, NULL);\n++\n++\turi = g_uri_parse_relative (sd->base_uri, \"/file\", SOUP_HTTP_URI_FLAGS, NULL);\n++\n++\tmsg = soup_message_new_from_uri (\"GET\", uri);\n++\tsoup_message_headers_append (soup_message_get_request_headers (msg), \"Range\", range->str);\n++\n++\tsoup_test_session_send_message (session, msg);\n++\n++\tsoup_test_assert_message_status (msg, SOUP_STATUS_PARTIAL_CONTENT);\n++\n++\tg_object_unref (msg);\n++\n++\tg_string_free (range, TRUE);\n++\tg_uri_unref (uri);\n++\n++\tsoup_test_session_abort_unref (session);\n++}\n++\n++int\n++main (int argc, char **argv)\n++{\n++\tint ret;\n++\n++\ttest_init (argc, argv, NULL);\n++\n++\t#ifndef G_OS_WIN32\n++\tstruct rlimit new_rlimit = { 1024 * 1024 * 64, 1024 * 1024 * 64 };\n++\t/* limit memory usage, to trigger too large memory allocation abort */\n++\tg_assert_cmpint (setrlimit (RLIMIT_DATA, &new_rlimit), ==, 0);\n++\t#endif\n++\n++\tg_test_add (\"/server-mem/range-overlaps\", ServerData, NULL,\n++\t\t    server_setup, do_ranges_overlaps_test, server_teardown);\n++\n++\tret = g_test_run ();\n++\n++\ttest_cleanup ();\n++\treturn ret;\n++}\n+-- \n+GitLab\n+\n+\n+From eeace39ec686094ff6a05a43e5fce06e9c37f376 Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 13 May 2025 14:20:46 +0200\n+Subject: [PATCH 2/2] server-mem-limit-test: Limit memory usage only when not\n+ built witha sanitizer\n+\n+A build with -Db_sanitize=address crashes with failed mmap(), which is done\n+inside libasan. The test requires 20.0TB of virtual memory when running with\n+the sanitizer, which is beyond unsigned integer limits and may not trigger\n+the bug anyway.\n+\n+Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/452>\n+---\n+ meson.build                   |  4 ++++\n+ tests/server-mem-limit-test.c | 13 +++++++++----\n+ 2 files changed, 13 insertions(+), 4 deletions(-)\n+\n+diff --git a/meson.build b/meson.build\n+index 8772a0ea..b31a8791 100644\n+--- a/meson.build\n++++ b/meson.build\n+@@ -357,6 +357,10 @@ configinc = include_directories('.')\n+ \n+ prefix = get_option('prefix')\n+ \n++if get_option('b_sanitize') != 'none'\n++  cdata.set_quoted('B_SANITIZE_OPTION', get_option('b_sanitize'))\n++endif\n++\n+ cdata.set_quoted('PACKAGE_VERSION', soup_version)\n+ cdata.set_quoted('LOCALEDIR', join_paths(prefix, get_option('localedir')))\n+ cdata.set_quoted('GETTEXT_PACKAGE', libsoup_api_name)\n+diff --git a/tests/server-mem-limit-test.c b/tests/server-mem-limit-test.c\n+index 98f1c40f..65dc875e 100644\n+--- a/tests/server-mem-limit-test.c\n++++ b/tests/server-mem-limit-test.c\n+@@ -126,14 +126,19 @@ main (int argc, char **argv)\n+ {\n+ \tint ret;\n+ \n+-\ttest_init (argc, argv, NULL);\n+-\n+-\t#ifndef G_OS_WIN32\n+-\tstruct rlimit new_rlimit = { 1024 * 1024 * 64, 1024 * 1024 * 64 };\n++\t/* a build with an address sanitizer may crash on mmap() with the limit,\n++\t   thus skip the limit set in such case, even it may not necessarily\n++\t   trigger the bug if it regresses */\n++\t#if !defined(G_OS_WIN32) && !defined(B_SANITIZE_OPTION)\n++\tstruct rlimit new_rlimit = { 1024UL * 1024UL * 1024UL * 2UL, 1024UL * 1024UL * 1024UL * 2UL };\n+ \t/* limit memory usage, to trigger too large memory allocation abort */\n+ \tg_assert_cmpint (setrlimit (RLIMIT_DATA, &new_rlimit), ==, 0);\n++\t#else\n++\tg_message (\"server-mem-limit-test: Running without memory limit\");\n+ \t#endif\n+ \n++\ttest_init (argc, argv, NULL);\n++\n+ \tg_test_add (\"/server-mem/range-overlaps\", ServerData, NULL,\n+ \t\t    server_setup, do_ranges_overlaps_test, server_teardown);\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-4476.patch",
                "status": "added",
                "additions": 34,
                "deletions": 0,
                "changes": 34,
                "patch": "@@ -0,0 +1,34 @@\n+From e64c221f9c7d09b48b610c5626b3b8c400f0907c Mon Sep 17 00:00:00 2001\n+From: Michael Catanzaro <mcatanzaro@redhat.com>\n+Date: Thu, 8 May 2025 09:27:01 -0500\n+Subject: [PATCH] auth-digest: fix crash in\n+ soup_auth_digest_get_protection_space()\n+\n+We need to validate the Domain parameter in the WWW-Authenticate header.\n+\n+Unfortunately this crash only occurs when listening on default ports 80\n+and 443, so there's no good way to test for this. The test would require\n+running as root.\n+\n+Fixes #440\n+Upstream Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/e64c221f9c7d09b48b610c5626b3b8c400f0907\n+---\n+ libsoup/auth/soup-auth-digest.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index d8bb2910..292f2045 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -220,7 +220,7 @@ soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)\n+ \t\t\tif (uri &&\n+                             g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&\n+ \t\t\t    g_uri_get_port (uri) == g_uri_get_port (source_uri) &&\n+-\t\t\t    !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n++\t\t\t    !g_strcmp0 (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n+ \t\t\t\tdir = g_strdup (g_uri_get_path (uri));\n+ \t\t\telse\n+ \t\t\t\tdir = NULL;\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        6%{?dist}\n+Release:        7%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -63,6 +63,8 @@ Patch13:         CVE-2025-32051.patch\n Patch14:         CVE-2025-46420.patch\n Patch15:         CVE-2025-46421.patch\n Patch16:         CVE-2025-32053.patch\n+Patch17:         CVE-2025-4476.patch\n+Patch18:         CVE-2025-32907.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -130,6 +132,10 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri Jun 13 2025 Kevin Lockwood <v-klockwood@microsoft.com> - 3.4.4-7\n+- Add patch for CVE-2025-4476\n+- Add patch for CVE-2025-32907\n+\n * Wed May 7 2025 Bhagyashri Pathak <Bhapathak@microsoft.com> - 3.4.4-6\n - Patch for CVE-2025-32053\n "
            }
        ],
        "cves": [
            "CVE-2025-4476",
            "CVE-2025-32907"
        ],
        "base_branch": "3.0-dev"
    },
    "13853": {
        "pr_name": "[High] Patch libsoup for CVE-2025-4476, CVE-2025-32907",
        "pr_date": "2025-05-21T23:00:39Z",
        "user": "kevin-b-lockwood",
        "url": "https://github.com/microsoft/azurelinux/pull/13853",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-32907.patch",
                "status": "added",
                "additions": 259,
                "deletions": 0,
                "changes": 259,
                "patch": "@@ -0,0 +1,259 @@\n+From 9bb92f7a685e31e10e9e8221d0342280432ce836 Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 15 Apr 2025 12:17:39 +0200\n+Subject: [PATCH 1/2] soup-message-headers: Correct merge of ranges\n+\n+It had been skipping every second range, which generated an array\n+of a lot of insane ranges, causing large memory usage by the server.\n+\n+Closes #428\n+\n+Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/452>\n+---\n+ libsoup/soup-message-headers.c |   1 +\n+ tests/meson.build              |   1 +\n+ tests/server-mem-limit-test.c  | 144 +++++++++++++++++++++++++++++++++\n+ 3 files changed, 146 insertions(+)\n+ create mode 100644 tests/server-mem-limit-test.c\n+\n+diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\n+index 8eec4200..e799082b 100644\n+--- a/libsoup/soup-message-headers.c\n++++ b/libsoup/soup-message-headers.c\n+@@ -1244,6 +1244,7 @@ soup_message_headers_get_ranges_internal (SoupMessageHeaders  *hdrs,\n+ \t\t\tif (cur->start <= prev->end) {\n+ \t\t\t\tprev->end = MAX (prev->end, cur->end);\n+ \t\t\t\tg_array_remove_index (array, i);\n++\t\t\t\ti--;\n+ \t\t\t}\n+ \t\t}\n+ \t}\n+diff --git a/tests/meson.build b/tests/meson.build\n+index 02924c03..ac892359 100644\n+--- a/tests/meson.build\n++++ b/tests/meson.build\n+@@ -103,6 +103,7 @@ tests = [\n+   {'name': 'samesite'},\n+   {'name': 'session'},\n+   {'name': 'server-auth'},\n++  {'name': 'server-mem-limit'},\n+   {'name': 'server'},\n+   {'name': 'sniffing',\n+     'depends': [test_resources],\n+diff --git a/tests/server-mem-limit-test.c b/tests/server-mem-limit-test.c\n+new file mode 100644\n+index 00000000..98f1c40f\n+--- /dev/null\n++++ b/tests/server-mem-limit-test.c\n+@@ -0,0 +1,144 @@\n++/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n++/*\n++ * Copyright (C) 2025 Red Hat <www.redhat.com>\n++ */\n++\n++#include \"test-utils.h\"\n++\n++#include <sys/resource.h>\n++\n++/*\n++ This test limits memory usage to trigger too large buffer allocation crash.\n++ As restoring the limits back to what it was does not always work, it's split\n++ out of the server-test.c test with copied minimal server code.\n++ */\n++\n++typedef struct {\n++\tSoupServer *server;\n++\tGUri *base_uri, *ssl_base_uri;\n++\tGSList *handlers;\n++} ServerData;\n++\n++static void\n++server_setup_nohandler (ServerData *sd, gconstpointer test_data)\n++{\n++\tsd->server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++\tsd->base_uri = soup_test_server_get_uri (sd->server, \"http\", NULL);\n++\tif (tls_available)\n++\t\tsd->ssl_base_uri = soup_test_server_get_uri (sd->server, \"https\", NULL);\n++}\n++\n++static void\n++server_add_handler (ServerData         *sd,\n++\t\t    const char         *path,\n++\t\t    SoupServerCallback  callback,\n++\t\t    gpointer            user_data,\n++\t\t    GDestroyNotify      destroy)\n++{\n++\tsoup_server_add_handler (sd->server, path, callback, user_data, destroy);\n++\tsd->handlers = g_slist_prepend (sd->handlers, g_strdup (path));\n++}\n++\n++static void\n++server_setup (ServerData *sd, gconstpointer test_data)\n++{\n++\tserver_setup_nohandler (sd, test_data);\n++}\n++\n++static void\n++server_teardown (ServerData *sd, gconstpointer test_data)\n++{\n++\tGSList *iter;\n++\n++\tfor (iter = sd->handlers; iter; iter = iter->next)\n++\t\tsoup_server_remove_handler (sd->server, iter->data);\n++\tg_slist_free_full (sd->handlers, g_free);\n++\n++\tg_clear_pointer (&sd->server, soup_test_server_quit_unref);\n++\tg_clear_pointer (&sd->base_uri, g_uri_unref);\n++\tg_clear_pointer (&sd->ssl_base_uri, g_uri_unref);\n++}\n++\n++static void\n++server_file_callback (SoupServer        *server,\n++\t\t      SoupServerMessage *msg,\n++\t\t      const char        *path,\n++\t\t      GHashTable        *query,\n++\t\t      gpointer           data)\n++{\n++\tvoid *mem;\n++\n++\tg_assert_cmpstr (path, ==, \"/file\");\n++\tg_assert_cmpstr (soup_server_message_get_method (msg), ==, SOUP_METHOD_GET);\n++\n++\tmem = g_malloc0 (sizeof (char) * 1024 * 1024);\n++\t/* fedora-scan CI claims a warning about possibly leaked `mem` variable, thus use\n++\t   the copy and free it explicitly, to workaround the false positive; the g_steal_pointer()\n++\t   did not help for the malloc-ed memory */\n++\tsoup_server_message_set_response (msg, \"application/octet-stream\", SOUP_MEMORY_COPY, mem, sizeof (char) * 1024 *1024);\n++\tsoup_server_message_set_status (msg, SOUP_STATUS_OK, NULL);\n++\tg_free (mem);\n++}\n++\n++static void\n++do_ranges_overlaps_test (ServerData *sd, gconstpointer test_data)\n++{\n++\tSoupSession *session;\n++\tSoupMessage *msg;\n++\tGString *range;\n++\tGUri *uri;\n++\tconst char *chunk = \",0,0,0,0,0,0,0,0,0,0,0\";\n++\n++\tg_test_bug (\"428\");\n++\n++\t#ifdef G_OS_WIN32\n++\tg_test_skip (\"Cannot run under windows\");\n++\treturn;\n++\t#endif\n++\n++\trange = g_string_sized_new (99 * 1024);\n++\tg_string_append (range, \"bytes=1024\");\n++\twhile (range->len < 99 * 1024)\n++\t\tg_string_append (range, chunk);\n++\n++\tsession = soup_test_session_new (NULL);\n++\tserver_add_handler (sd, \"/file\", server_file_callback, NULL, NULL);\n++\n++\turi = g_uri_parse_relative (sd->base_uri, \"/file\", SOUP_HTTP_URI_FLAGS, NULL);\n++\n++\tmsg = soup_message_new_from_uri (\"GET\", uri);\n++\tsoup_message_headers_append (soup_message_get_request_headers (msg), \"Range\", range->str);\n++\n++\tsoup_test_session_send_message (session, msg);\n++\n++\tsoup_test_assert_message_status (msg, SOUP_STATUS_PARTIAL_CONTENT);\n++\n++\tg_object_unref (msg);\n++\n++\tg_string_free (range, TRUE);\n++\tg_uri_unref (uri);\n++\n++\tsoup_test_session_abort_unref (session);\n++}\n++\n++int\n++main (int argc, char **argv)\n++{\n++\tint ret;\n++\n++\ttest_init (argc, argv, NULL);\n++\n++\t#ifndef G_OS_WIN32\n++\tstruct rlimit new_rlimit = { 1024 * 1024 * 64, 1024 * 1024 * 64 };\n++\t/* limit memory usage, to trigger too large memory allocation abort */\n++\tg_assert_cmpint (setrlimit (RLIMIT_DATA, &new_rlimit), ==, 0);\n++\t#endif\n++\n++\tg_test_add (\"/server-mem/range-overlaps\", ServerData, NULL,\n++\t\t    server_setup, do_ranges_overlaps_test, server_teardown);\n++\n++\tret = g_test_run ();\n++\n++\ttest_cleanup ();\n++\treturn ret;\n++}\n+-- \n+GitLab\n+\n+\n+From eeace39ec686094ff6a05a43e5fce06e9c37f376 Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 13 May 2025 14:20:46 +0200\n+Subject: [PATCH 2/2] server-mem-limit-test: Limit memory usage only when not\n+ built witha sanitizer\n+\n+A build with -Db_sanitize=address crashes with failed mmap(), which is done\n+inside libasan. The test requires 20.0TB of virtual memory when running with\n+the sanitizer, which is beyond unsigned integer limits and may not trigger\n+the bug anyway.\n+\n+Part-of: <https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/452>\n+---\n+ meson.build                   |  4 ++++\n+ tests/server-mem-limit-test.c | 13 +++++++++----\n+ 2 files changed, 13 insertions(+), 4 deletions(-)\n+\n+diff --git a/meson.build b/meson.build\n+index 8772a0ea..b31a8791 100644\n+--- a/meson.build\n++++ b/meson.build\n+@@ -357,6 +357,10 @@ configinc = include_directories('.')\n+ \n+ prefix = get_option('prefix')\n+ \n++if get_option('b_sanitize') != 'none'\n++  cdata.set_quoted('B_SANITIZE_OPTION', get_option('b_sanitize'))\n++endif\n++\n+ cdata.set_quoted('PACKAGE_VERSION', soup_version)\n+ cdata.set_quoted('LOCALEDIR', join_paths(prefix, get_option('localedir')))\n+ cdata.set_quoted('GETTEXT_PACKAGE', libsoup_api_name)\n+diff --git a/tests/server-mem-limit-test.c b/tests/server-mem-limit-test.c\n+index 98f1c40f..65dc875e 100644\n+--- a/tests/server-mem-limit-test.c\n++++ b/tests/server-mem-limit-test.c\n+@@ -126,14 +126,19 @@ main (int argc, char **argv)\n+ {\n+ \tint ret;\n+ \n+-\ttest_init (argc, argv, NULL);\n+-\n+-\t#ifndef G_OS_WIN32\n+-\tstruct rlimit new_rlimit = { 1024 * 1024 * 64, 1024 * 1024 * 64 };\n++\t/* a build with an address sanitizer may crash on mmap() with the limit,\n++\t   thus skip the limit set in such case, even it may not necessarily\n++\t   trigger the bug if it regresses */\n++\t#if !defined(G_OS_WIN32) && !defined(B_SANITIZE_OPTION)\n++\tstruct rlimit new_rlimit = { 1024UL * 1024UL * 1024UL * 2UL, 1024UL * 1024UL * 1024UL * 2UL };\n+ \t/* limit memory usage, to trigger too large memory allocation abort */\n+ \tg_assert_cmpint (setrlimit (RLIMIT_DATA, &new_rlimit), ==, 0);\n++\t#else\n++\tg_message (\"server-mem-limit-test: Running without memory limit\");\n+ \t#endif\n+ \n++\ttest_init (argc, argv, NULL);\n++\n+ \tg_test_add (\"/server-mem/range-overlaps\", ServerData, NULL,\n+ \t\t    server_setup, do_ranges_overlaps_test, server_teardown);\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-4476.patch",
                "status": "added",
                "additions": 34,
                "deletions": 0,
                "changes": 34,
                "patch": "@@ -0,0 +1,34 @@\n+From e64c221f9c7d09b48b610c5626b3b8c400f0907c Mon Sep 17 00:00:00 2001\n+From: Michael Catanzaro <mcatanzaro@redhat.com>\n+Date: Thu, 8 May 2025 09:27:01 -0500\n+Subject: [PATCH] auth-digest: fix crash in\n+ soup_auth_digest_get_protection_space()\n+\n+We need to validate the Domain parameter in the WWW-Authenticate header.\n+\n+Unfortunately this crash only occurs when listening on default ports 80\n+and 443, so there's no good way to test for this. The test would require\n+running as root.\n+\n+Fixes #440\n+Upstream Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/e64c221f9c7d09b48b610c5626b3b8c400f0907\n+---\n+ libsoup/auth/soup-auth-digest.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index d8bb2910..292f2045 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -220,7 +220,7 @@ soup_auth_digest_get_protection_space (SoupAuth *auth, GUri *source_uri)\n+ \t\t\tif (uri &&\n+                             g_strcmp0 (g_uri_get_scheme (uri), g_uri_get_scheme (source_uri)) == 0 &&\n+ \t\t\t    g_uri_get_port (uri) == g_uri_get_port (source_uri) &&\n+-\t\t\t    !strcmp (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n++\t\t\t    !g_strcmp0 (g_uri_get_host (uri), g_uri_get_host (source_uri)))\n+ \t\t\t\tdir = g_strdup (g_uri_get_path (uri));\n+ \t\t\telse\n+ \t\t\t\tdir = NULL;\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        6%{?dist}\n+Release:        7%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -63,6 +63,8 @@ Patch13:         CVE-2025-32051.patch\n Patch14:         CVE-2025-46420.patch\n Patch15:         CVE-2025-46421.patch\n Patch16:         CVE-2025-32053.patch\n+Patch17:         CVE-2025-4476.patch\n+Patch18:         CVE-2025-32907.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -130,6 +132,10 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri Jun 13 2025 Kevin Lockwood <v-klockwood@microsoft.com> - 3.4.4-7\n+- Add patch for CVE-2025-4476\n+- Add patch for CVE-2025-32907\n+\n * Wed May 7 2025 Bhagyashri Pathak <Bhapathak@microsoft.com> - 3.4.4-6\n - Patch for CVE-2025-32053\n "
            }
        ],
        "cves": [
            "CVE-2025-4476",
            "CVE-2025-32907"
        ],
        "base_branch": "fasttrack/3.0"
    },
    "13681": {
        "pr_name": "[AUTO-CHERRYPICK] Patch libsoup for CVE-2025-2784 [HIGH], CVE-2025-32050, CVE-2025-32051, CVE-2025-32052, CVE-2025-46420, CVE-2025-46421 [MEDIUM] - branch 3.0-dev",
        "pr_date": "2025-05-05T21:44:47Z",
        "user": "CBL-Mariner-Bot",
        "url": "https://github.com/microsoft/azurelinux/pull/13681",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-2784.patch",
                "status": "added",
                "additions": 134,
                "deletions": 0,
                "changes": 134,
                "patch": "@@ -0,0 +1,134 @@\n+From 0cd5cb7d61ec22b60ce21f84f91a1d8da930eff6 Mon Sep 17 00:00:00 2001\n+From: Kshitiz Godara <kgodara@microsoft.com>\n+Date: Sun, 4 May 2025 12:46:20 +0000\n+Subject: [PATCH 1/6] Combined two patches to address CVE-2025-2784\n+\n+Upstream references:\n+https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/435/diffs\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/c415ad0b6771992e66c70edf373566c6e247089d\n+---\n+ .../content-sniffer/soup-content-sniffer.c    | 10 ++--\n+ tests/meson.build                             |  4 +-\n+ tests/sniffing-test.c                         | 48 +++++++++++++++++++\n+ 3 files changed, 56 insertions(+), 6 deletions(-)\n+\n+diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n+index 2351c3f..150d285 100644\n+--- a/libsoup/content-sniffer/soup-content-sniffer.c\n++++ b/libsoup/content-sniffer/soup-content-sniffer.c\n+@@ -638,8 +638,11 @@ sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)\n+ }\n+ \n+ static gboolean\n+-skip_insignificant_space (const char *resource, int *pos, int resource_length)\n++skip_insignificant_space (const char *resource, gsize *pos, gsize resource_length)\n+ {\n++        if (*pos >= resource_length)\n++\t        return TRUE;\n++\n+ \twhile ((resource[*pos] == '\\x09') ||\n+ \t       (resource[*pos] == '\\x20') ||\n+ \t       (resource[*pos] == '\\x0A') ||\n+@@ -659,7 +662,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n+ \tgsize resource_length;\n+ \tconst char *resource = g_bytes_get_data (buffer, &resource_length);\n+ \tresource_length = MIN (512, resource_length);\n+-\tint pos = 0;\n++\tgsize pos = 0;\n+ \n+ \tif (resource_length < 3)\n+ \t\tgoto text_html;\n+@@ -669,9 +672,6 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n+ \t\tpos = 3;\n+ \n+  look_for_tag:\n+-\tif (pos > resource_length)\n+-\t\tgoto text_html;\n+-\n+ \tif (skip_insignificant_space (resource, &pos, resource_length))\n+ \t\tgoto text_html;\n+ \n+diff --git a/tests/meson.build b/tests/meson.build\n+index 9bf88be..b4112ec 100644\n+--- a/tests/meson.build\n++++ b/tests/meson.build\n+@@ -94,7 +94,9 @@ tests = [\n+   {'name': 'session'},\n+   {'name': 'server-auth'},\n+   {'name': 'server'},\n+-  {'name': 'sniffing'},\n++  {'name': 'sniffing',\n++    'depends': [test_resources],\n++  },\n+   {'name': 'ssl',\n+    'dependencies': [gnutls_dep],\n+    'depends': mock_pkcs11_module,\n+diff --git a/tests/sniffing-test.c b/tests/sniffing-test.c\n+index 6116719..7857732 100644\n+--- a/tests/sniffing-test.c\n++++ b/tests/sniffing-test.c\n+@@ -342,6 +342,52 @@ test_disabled (gconstpointer data)\n+ \tg_uri_unref (uri);\n+ }\n+ \n++static const gsize MARKUP_LENGTH = strlen (\"<!--\") + strlen (\"-->\");\n++\n++static void\n++do_skip_whitespace_test (void)\n++{\n++        SoupContentSniffer *sniffer = soup_content_sniffer_new ();\n++        SoupMessage *msg = soup_message_new (SOUP_METHOD_GET, \"http://example.org\");\n++        const char *test_cases[] = {\n++                \"\",\n++                \"<rdf:RDF\",\n++                \"<rdf:RDFxmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\",\n++                \"<rdf:RDFxmlns=\\\"http://purl.org/rss/1.0/\\\"\",\n++        };\n++\n++        soup_message_headers_set_content_type (soup_message_get_response_headers (msg), \"text/html\", NULL);\n++\n++        for (guint i = 0; i < G_N_ELEMENTS (test_cases); i++) {\n++                const char *trailing_data = test_cases[i];\n++                gsize leading_zeros = 512 - MARKUP_LENGTH - strlen (trailing_data);\n++                gsize testsize = MARKUP_LENGTH + leading_zeros + strlen (trailing_data);\n++                guint8 *data = g_malloc0 (testsize);\n++                guint8 *p = data;\n++                char *content_type;\n++                GBytes *buffer;\n++\n++                // Format of <!--[0x00 * $leading_zeros]-->$trailing_data\n++                memcpy (p, \"<!--\", strlen (\"<!--\"));\n++                p += strlen (\"<!--\");\n++                p += leading_zeros;\n++                memcpy (p, \"-->\", strlen (\"-->\"));\n++                p += strlen (\"-->\");\n++                if (strlen (trailing_data))\n++                        memcpy (p, trailing_data, strlen (trailing_data));\n++                // Purposefully not NUL terminated.                \n++\n++                buffer = g_bytes_new_take (g_steal_pointer (&data), testsize);\n++                content_type = soup_content_sniffer_sniff (sniffer, msg, buffer, NULL);\n++\n++                g_free (content_type);\n++                g_bytes_unref (buffer);\n++        }\n++\n++        g_object_unref (msg);\n++        g_object_unref (sniffer);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -517,6 +563,8 @@ main (int argc, char **argv)\n+ \t\t\t      \"/text_or_binary/home.gif\",\n+ \t\t\t      test_disabled);\n+ \n++\tg_test_add_func (\"/sniffing/whitespace\", do_skip_whitespace_test);\n++\n+ \tret = g_test_run ();\n+ \n+ \tg_uri_unref (base_uri);\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32050.patch",
                "status": "added",
                "additions": 27,
                "deletions": 0,
                "changes": 27,
                "patch": "@@ -0,0 +1,27 @@\n+From 2825634dd081a3af1800d6967ba0991f3def3347 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Mon, 28 Oct 2024 12:29:48 -0500\n+Subject: [PATCH 3/6] Fix using int instead of size_t for strcspn return\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/9bb0a55de55c6940ced811a64fbca82fe93a9323\n+---\n+ libsoup/soup-headers.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index 8382b8f..4468415 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -907,7 +907,7 @@ append_param_quoted (GString    *string,\n+ \t\t     const char *name,\n+ \t\t     const char *value)\n+ {\n+-\tint len;\n++\tgsize len;\n+ \n+ \tg_string_append (string, name);\n+ \tg_string_append (string, \"=\\\"\");\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32051.patch",
                "status": "added",
                "additions": 48,
                "deletions": 0,
                "changes": 48,
                "patch": "@@ -0,0 +1,48 @@\n+From 206e54eb90bdc53faed29e04d26373433b6605f6 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Fri, 22 Nov 2024 13:39:51 -0600\n+Subject: [PATCH 4/6] soup_uri_decode_data_uri(): Handle URIs with a path\n+ starting with //\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/79cfd65c9bd8024cd45dd725c284766329873709\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/0713ba4a719da938dc8facc89fca99cd0aa3069f\n+---\n+ libsoup/soup-uri-utils.c | 11 +++++++++++\n+ 1 file changed, 11 insertions(+)\n+\n+diff --git a/libsoup/soup-uri-utils.c b/libsoup/soup-uri-utils.c\n+index be2b79b..ad70fe6 100644\n+--- a/libsoup/soup-uri-utils.c\n++++ b/libsoup/soup-uri-utils.c\n+@@ -286,6 +286,7 @@ soup_uri_decode_data_uri (const char *uri,\n+         gboolean base64 = FALSE;\n+         char *uri_string;\n+         GBytes *bytes;\n++        const char *path;\n+ \n+         g_return_val_if_fail (uri != NULL, NULL);\n+ \n+@@ -300,9 +301,19 @@ soup_uri_decode_data_uri (const char *uri,\n+ \n+         if (content_type)\n+                 *content_type = NULL;\n++        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n++        path = g_uri_get_path (soup_uri);\n++        if (path[0] == '/' && path[1] == '/') {\n++                g_uri_unref (soup_uri);\n++                return NULL;\n++        }\n++\n+ \n+         uri_string = g_uri_to_string (soup_uri);\n+         g_uri_unref (soup_uri);\n++        if (!uri_string)\n++                return NULL;\n++\n+ \n+         start = uri_string + 5;\n+         comma = strchr (start, ',');\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32052.patch",
                "status": "added",
                "additions": 29,
                "deletions": 0,
                "changes": 29,
                "patch": "@@ -0,0 +1,29 @@\n+From 81ae25238849867f6197e22ec42f5bb4dcb7b8ad Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Sat, 16 Nov 2024 12:07:30 -0600\n+Subject: [PATCH 2/6] Fix heap buffer overflow in soup_content_sniffer_sniff\n+\n+Co-Author: Ar Jun <pkillarjun@protonmail.com>\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/f182429e5b1fc034050510da20c93256c4fa9652\n+---\n+ libsoup/content-sniffer/soup-content-sniffer.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n+index 150d285..a772c7c 100644\n+--- a/libsoup/content-sniffer/soup-content-sniffer.c\n++++ b/libsoup/content-sniffer/soup-content-sniffer.c\n+@@ -529,7 +529,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,\n+ \t\t\tguint index_pattern = 0;\n+ \t\t\tgboolean skip_row = FALSE;\n+ \n+-\t\t\twhile ((index_stream < resource_length) &&\n++\t\t\twhile ((index_stream < resource_length - 1) &&\n+ \t\t\t       (index_pattern <= type_row->pattern_length)) {\n+ \t\t\t\t/* Skip insignificant white space (\"WS\" in the spec) */\n+ \t\t\t\tif (type_row->pattern[index_pattern] == ' ') {\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-46420.patch",
                "status": "added",
                "additions": 59,
                "deletions": 0,
                "changes": 59,
                "patch": "@@ -0,0 +1,59 @@\n+From 909a9c40197d53bb331830d959ec86b97721d64f Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Thu, 26 Dec 2024 18:31:42 -0600\n+Subject: [PATCH 5/6] soup_header_parse_quality_list: Fix leak\n+\n+When iterating over the parsed list we now steal the allocated strings that we want and then free_full the list which may contain remaining strings.\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/c9083869ec2a3037e6df4bd86b45c419ba295f8e\n+---\n+ libsoup/soup-headers.c | 11 +++++------\n+ 1 file changed, 5 insertions(+), 6 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index 4468415..d28ddff 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -530,7 +530,7 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n+ \tGSList *unsorted;\n+ \tQualityItem *array;\n+ \tGSList *sorted, *iter;\n+-\tchar *item, *semi;\n++\tchar *semi;\n+ \tconst char *param, *equal, *value;\n+ \tdouble qval;\n+ \tint n;\n+@@ -543,9 +543,8 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n+ \tunsorted = soup_header_parse_list (header);\n+ \tarray = g_new0 (QualityItem, g_slist_length (unsorted));\n+ \tfor (iter = unsorted, n = 0; iter; iter = iter->next) {\n+-\t\titem = iter->data;\n+ \t\tqval = 1.0;\n+-\t\tfor (semi = strchr (item, ';'); semi; semi = strchr (semi + 1, ';')) {\n++\t\tfor (semi = strchr (iter->data, ';'); semi; semi = strchr (semi + 1, ';')) {\n+ \t\t\tparam = skip_lws (semi + 1);\n+ \t\t\tif (*param != 'q')\n+ \t\t\t\tcontinue;\n+@@ -577,15 +576,15 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n+ \t\tif (qval == 0.0) {\n+ \t\t\tif (unacceptable) {\n+ \t\t\t\t*unacceptable = g_slist_prepend (*unacceptable,\n+-\t\t\t\t\t\t\t\t item);\n++\t\t\t\t\t\t\t\t g_steal_pointer (&iter->data));\n+ \t\t\t}\n+ \t\t} else {\n+-\t\t\tarray[n].item = item;\n++\t\t\tarray[n].item = g_steal_pointer (&iter->data);\n+ \t\t\tarray[n].qval = qval;\n+ \t\t\tn++;\n+ \t\t}\n+ \t}\n+-\tg_slist_free (unsorted);\n++\tg_slist_free_full (unsorted, g_free);\n+ \n+ \tqsort (array, n, sizeof (QualityItem), sort_by_qval);\n+ \tsorted = NULL;\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-46421.patch",
                "status": "added",
                "additions": 137,
                "deletions": 0,
                "changes": 137,
                "patch": "@@ -0,0 +1,137 @@\n+From 09568d47d796f526820d3a6ff85cd2797eb65843 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 5 Feb 2025 16:18:10 -0600\n+Subject: [PATCH 6/6] session: Strip authentication credentails on cross-origin\n+ redirect\n+\n+This should match the behavior of Firefox and Safari but not of Chromium.\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/3e5c26415811f19e7737238bb23305ffaf96f66b\n+---\n+ libsoup/soup-session.c |  6 ++++\n+ tests/auth-test.c      | 77 ++++++++++++++++++++++++++++++++++++++++++\n+ 2 files changed, 83 insertions(+)\n+\n+diff --git a/libsoup/soup-session.c b/libsoup/soup-session.c\n+index 631bec0..9f00b05 100644\n+--- a/libsoup/soup-session.c\n++++ b/libsoup/soup-session.c\n+@@ -1230,6 +1230,12 @@ soup_session_redirect_message (SoupSession *session,\n+ \t\t\t\t\t\t   SOUP_ENCODING_NONE);\n+ \t}\n+ \n++        /* Strip all credentials on cross-origin redirect. */\n++        if (!soup_uri_host_equal (soup_message_get_uri (msg), new_uri)) {\n++                soup_message_headers_remove_common (soup_message_get_request_headers (msg), SOUP_HEADER_AUTHORIZATION);\n++                soup_message_set_auth (msg, NULL);\n++        }\n++\n+         soup_message_set_request_host_from_uri (msg, new_uri);\n+ \tsoup_message_set_uri (msg, new_uri);\n+ \tg_uri_unref (new_uri);\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index 484097f..7c3b551 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1,6 +1,7 @@\n+ /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n+ \n+ #include \"test-utils.h\"\n++#include \"soup-uri-utils-private.h\"\n+ \n+ static const char *base_uri;\n+ static GMainLoop *loop;\n+@@ -1916,6 +1917,81 @@ do_missing_params_test (gconstpointer auth_header)\n+ \tsoup_test_server_quit_unref (server);\n+ }\n+ \n++static void\n++redirect_server_callback (SoupServer        *server,\n++                          SoupServerMessage *msg,\n++                          const char        *path,\n++                          GHashTable        *query,\n++                          gpointer           user_data)\n++{\n++    static gboolean redirected = FALSE;\n++\n++    if (!redirected) {\n++        char *redirect_uri = g_uri_to_string (user_data);\n++        soup_server_message_set_redirect (msg, SOUP_STATUS_MOVED_PERMANENTLY, redirect_uri);\n++        g_free (redirect_uri);\n++        redirected = TRUE;\n++        return;\n++    }\n++\n++    g_assert_not_reached ();\n++}\n++\n++static gboolean\n++auth_for_redirect_callback (SoupMessage *msg, SoupAuth *auth, gboolean retrying, gpointer user_data)\n++{\n++    GUri *known_server_uri = user_data;\n++\n++    if (!soup_uri_host_equal (known_server_uri, soup_message_get_uri (msg)))\n++        return FALSE;\n++\n++    soup_auth_authenticate (auth, \"user\", \"good-basic\");\n++\n++    return TRUE;\n++}\n++\n++static void\n++do_strip_on_crossorigin_redirect (void)\n++{\n++    SoupSession *session;\n++    SoupMessage *msg;\n++    SoupServer *server1, *server2;\n++    SoupAuthDomain *auth_domain;\n++    GUri *uri;\n++    gint status;\n++\n++    server1 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++    server2 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++\n++    /* Both servers have the same credentials. */\n++    auth_domain = soup_auth_domain_basic_new (\"realm\", \"auth-test\", \"auth-callback\", server_basic_auth_callback, NULL);\n++    soup_auth_domain_add_path (auth_domain, \"/\");\n++    soup_server_add_auth_domain (server1, auth_domain);\n++    soup_server_add_auth_domain (server2, auth_domain);\n++    g_object_unref (auth_domain);\n++\n++    /* Server 1 asks for auth, then redirects to Server 2. */\n++    soup_server_add_handler (server1, NULL,\n++                    redirect_server_callback,\n++                   soup_test_server_get_uri (server2, \"http\", NULL), (GDestroyNotify)g_uri_unref);\n++    /* Server 2 requires auth. */\n++    soup_server_add_handler (server2, NULL, server_callback, NULL, NULL);\n++\n++    session = soup_test_session_new (NULL);\n++    uri = soup_test_server_get_uri (server1, \"http\", NULL);\n++    msg = soup_message_new_from_uri (\"GET\", uri);\n++    /* The client only sends credentials for the host it knows. */\n++    g_signal_connect (msg, \"authenticate\", G_CALLBACK (auth_for_redirect_callback), uri);\n++\n++    status = soup_test_session_send_message (session, msg);\n++\n++    g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n++\n++    g_uri_unref (uri);\n++    soup_test_server_quit_unref (server1);\n++    soup_test_server_quit_unref (server2);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -1949,6 +2025,7 @@ main (int argc, char **argv)\n+ \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n+         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n+         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n++        g_test_add_func (\"/auth/strip-on-crossorigin-redirect\", do_strip_on_crossorigin_redirect);\n+         g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 10,
                "deletions": 1,
                "changes": 11,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        4%{?dist}\n+Release:        5%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -56,6 +56,12 @@ Patch6:          CVE-2025-32910.patch\n Patch7:          CVE-2025-32912.patch\n Patch8:          CVE-2025-32908.patch\n Patch9:          CVE-2025-32914.patch\n+Patch10:         CVE-2025-2784.patch\n+Patch11:         CVE-2025-32052.patch\n+Patch12:         CVE-2025-32050.patch\n+Patch13:         CVE-2025-32051.patch\n+Patch14:         CVE-2025-46420.patch\n+Patch15:         CVE-2025-46421.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -123,6 +129,9 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri May 02 2025 Kshitiz Godara <kgodara@microsoft.com> - 3.4.4-5\n+- Added patch for CVE-2025-2784 CVE-2025-32052 CVE-2025-32050 CVE-2025-32051 CVE-2025-46420 CVE-2025-46421\n+\n * Fri Apr 25 2025 Kshitiz Godara <kgodara@microsoft.com> - 3.4.4-4\n - Add patch for CVE-2025-32908\n - Add patch for CVE-2025-32914"
            }
        ],
        "cves": [
            "CVE-2025-2784",
            "CVE-2025-32050",
            "CVE-2025-32051",
            "CVE-2025-32052",
            "CVE-2025-46420",
            "CVE-2025-46421"
        ],
        "base_branch": "3.0-dev"
    },
    "13667": {
        "pr_name": "Patch libsoup for CVE-2025-2784 [HIGH], CVE-2025-32050, CVE-2025-32051, CVE-2025-32052, CVE-2025-46420, CVE-2025-46421 [MEDIUM]",
        "pr_date": "2025-05-04T14:12:25Z",
        "user": "kgodara912",
        "url": "https://github.com/microsoft/azurelinux/pull/13667",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-2784.patch",
                "status": "added",
                "additions": 134,
                "deletions": 0,
                "changes": 134,
                "patch": "@@ -0,0 +1,134 @@\n+From 0cd5cb7d61ec22b60ce21f84f91a1d8da930eff6 Mon Sep 17 00:00:00 2001\n+From: Kshitiz Godara <kgodara@microsoft.com>\n+Date: Sun, 4 May 2025 12:46:20 +0000\n+Subject: [PATCH 1/6] Combined two patches to address CVE-2025-2784\n+\n+Upstream references:\n+https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/435/diffs\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/c415ad0b6771992e66c70edf373566c6e247089d\n+---\n+ .../content-sniffer/soup-content-sniffer.c    | 10 ++--\n+ tests/meson.build                             |  4 +-\n+ tests/sniffing-test.c                         | 48 +++++++++++++++++++\n+ 3 files changed, 56 insertions(+), 6 deletions(-)\n+\n+diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n+index 2351c3f..150d285 100644\n+--- a/libsoup/content-sniffer/soup-content-sniffer.c\n++++ b/libsoup/content-sniffer/soup-content-sniffer.c\n+@@ -638,8 +638,11 @@ sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)\n+ }\n+ \n+ static gboolean\n+-skip_insignificant_space (const char *resource, int *pos, int resource_length)\n++skip_insignificant_space (const char *resource, gsize *pos, gsize resource_length)\n+ {\n++        if (*pos >= resource_length)\n++\t        return TRUE;\n++\n+ \twhile ((resource[*pos] == '\\x09') ||\n+ \t       (resource[*pos] == '\\x20') ||\n+ \t       (resource[*pos] == '\\x0A') ||\n+@@ -659,7 +662,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n+ \tgsize resource_length;\n+ \tconst char *resource = g_bytes_get_data (buffer, &resource_length);\n+ \tresource_length = MIN (512, resource_length);\n+-\tint pos = 0;\n++\tgsize pos = 0;\n+ \n+ \tif (resource_length < 3)\n+ \t\tgoto text_html;\n+@@ -669,9 +672,6 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n+ \t\tpos = 3;\n+ \n+  look_for_tag:\n+-\tif (pos > resource_length)\n+-\t\tgoto text_html;\n+-\n+ \tif (skip_insignificant_space (resource, &pos, resource_length))\n+ \t\tgoto text_html;\n+ \n+diff --git a/tests/meson.build b/tests/meson.build\n+index 9bf88be..b4112ec 100644\n+--- a/tests/meson.build\n++++ b/tests/meson.build\n+@@ -94,7 +94,9 @@ tests = [\n+   {'name': 'session'},\n+   {'name': 'server-auth'},\n+   {'name': 'server'},\n+-  {'name': 'sniffing'},\n++  {'name': 'sniffing',\n++    'depends': [test_resources],\n++  },\n+   {'name': 'ssl',\n+    'dependencies': [gnutls_dep],\n+    'depends': mock_pkcs11_module,\n+diff --git a/tests/sniffing-test.c b/tests/sniffing-test.c\n+index 6116719..7857732 100644\n+--- a/tests/sniffing-test.c\n++++ b/tests/sniffing-test.c\n+@@ -342,6 +342,52 @@ test_disabled (gconstpointer data)\n+ \tg_uri_unref (uri);\n+ }\n+ \n++static const gsize MARKUP_LENGTH = strlen (\"<!--\") + strlen (\"-->\");\n++\n++static void\n++do_skip_whitespace_test (void)\n++{\n++        SoupContentSniffer *sniffer = soup_content_sniffer_new ();\n++        SoupMessage *msg = soup_message_new (SOUP_METHOD_GET, \"http://example.org\");\n++        const char *test_cases[] = {\n++                \"\",\n++                \"<rdf:RDF\",\n++                \"<rdf:RDFxmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\",\n++                \"<rdf:RDFxmlns=\\\"http://purl.org/rss/1.0/\\\"\",\n++        };\n++\n++        soup_message_headers_set_content_type (soup_message_get_response_headers (msg), \"text/html\", NULL);\n++\n++        for (guint i = 0; i < G_N_ELEMENTS (test_cases); i++) {\n++                const char *trailing_data = test_cases[i];\n++                gsize leading_zeros = 512 - MARKUP_LENGTH - strlen (trailing_data);\n++                gsize testsize = MARKUP_LENGTH + leading_zeros + strlen (trailing_data);\n++                guint8 *data = g_malloc0 (testsize);\n++                guint8 *p = data;\n++                char *content_type;\n++                GBytes *buffer;\n++\n++                // Format of <!--[0x00 * $leading_zeros]-->$trailing_data\n++                memcpy (p, \"<!--\", strlen (\"<!--\"));\n++                p += strlen (\"<!--\");\n++                p += leading_zeros;\n++                memcpy (p, \"-->\", strlen (\"-->\"));\n++                p += strlen (\"-->\");\n++                if (strlen (trailing_data))\n++                        memcpy (p, trailing_data, strlen (trailing_data));\n++                // Purposefully not NUL terminated.                \n++\n++                buffer = g_bytes_new_take (g_steal_pointer (&data), testsize);\n++                content_type = soup_content_sniffer_sniff (sniffer, msg, buffer, NULL);\n++\n++                g_free (content_type);\n++                g_bytes_unref (buffer);\n++        }\n++\n++        g_object_unref (msg);\n++        g_object_unref (sniffer);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -517,6 +563,8 @@ main (int argc, char **argv)\n+ \t\t\t      \"/text_or_binary/home.gif\",\n+ \t\t\t      test_disabled);\n+ \n++\tg_test_add_func (\"/sniffing/whitespace\", do_skip_whitespace_test);\n++\n+ \tret = g_test_run ();\n+ \n+ \tg_uri_unref (base_uri);\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32050.patch",
                "status": "added",
                "additions": 27,
                "deletions": 0,
                "changes": 27,
                "patch": "@@ -0,0 +1,27 @@\n+From 2825634dd081a3af1800d6967ba0991f3def3347 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Mon, 28 Oct 2024 12:29:48 -0500\n+Subject: [PATCH 3/6] Fix using int instead of size_t for strcspn return\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/9bb0a55de55c6940ced811a64fbca82fe93a9323\n+---\n+ libsoup/soup-headers.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index 8382b8f..4468415 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -907,7 +907,7 @@ append_param_quoted (GString    *string,\n+ \t\t     const char *name,\n+ \t\t     const char *value)\n+ {\n+-\tint len;\n++\tgsize len;\n+ \n+ \tg_string_append (string, name);\n+ \tg_string_append (string, \"=\\\"\");\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32051.patch",
                "status": "added",
                "additions": 48,
                "deletions": 0,
                "changes": 48,
                "patch": "@@ -0,0 +1,48 @@\n+From 206e54eb90bdc53faed29e04d26373433b6605f6 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Fri, 22 Nov 2024 13:39:51 -0600\n+Subject: [PATCH 4/6] soup_uri_decode_data_uri(): Handle URIs with a path\n+ starting with //\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/79cfd65c9bd8024cd45dd725c284766329873709\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/0713ba4a719da938dc8facc89fca99cd0aa3069f\n+---\n+ libsoup/soup-uri-utils.c | 11 +++++++++++\n+ 1 file changed, 11 insertions(+)\n+\n+diff --git a/libsoup/soup-uri-utils.c b/libsoup/soup-uri-utils.c\n+index be2b79b..ad70fe6 100644\n+--- a/libsoup/soup-uri-utils.c\n++++ b/libsoup/soup-uri-utils.c\n+@@ -286,6 +286,7 @@ soup_uri_decode_data_uri (const char *uri,\n+         gboolean base64 = FALSE;\n+         char *uri_string;\n+         GBytes *bytes;\n++        const char *path;\n+ \n+         g_return_val_if_fail (uri != NULL, NULL);\n+ \n+@@ -300,9 +301,19 @@ soup_uri_decode_data_uri (const char *uri,\n+ \n+         if (content_type)\n+                 *content_type = NULL;\n++        /* g_uri_to_string() is picky about paths that start with `//` and will assert. */\n++        path = g_uri_get_path (soup_uri);\n++        if (path[0] == '/' && path[1] == '/') {\n++                g_uri_unref (soup_uri);\n++                return NULL;\n++        }\n++\n+ \n+         uri_string = g_uri_to_string (soup_uri);\n+         g_uri_unref (soup_uri);\n++        if (!uri_string)\n++                return NULL;\n++\n+ \n+         start = uri_string + 5;\n+         comma = strchr (start, ',');\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32052.patch",
                "status": "added",
                "additions": 29,
                "deletions": 0,
                "changes": 29,
                "patch": "@@ -0,0 +1,29 @@\n+From 81ae25238849867f6197e22ec42f5bb4dcb7b8ad Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Sat, 16 Nov 2024 12:07:30 -0600\n+Subject: [PATCH 2/6] Fix heap buffer overflow in soup_content_sniffer_sniff\n+\n+Co-Author: Ar Jun <pkillarjun@protonmail.com>\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/f182429e5b1fc034050510da20c93256c4fa9652\n+---\n+ libsoup/content-sniffer/soup-content-sniffer.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n+index 150d285..a772c7c 100644\n+--- a/libsoup/content-sniffer/soup-content-sniffer.c\n++++ b/libsoup/content-sniffer/soup-content-sniffer.c\n+@@ -529,7 +529,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,\n+ \t\t\tguint index_pattern = 0;\n+ \t\t\tgboolean skip_row = FALSE;\n+ \n+-\t\t\twhile ((index_stream < resource_length) &&\n++\t\t\twhile ((index_stream < resource_length - 1) &&\n+ \t\t\t       (index_pattern <= type_row->pattern_length)) {\n+ \t\t\t\t/* Skip insignificant white space (\"WS\" in the spec) */\n+ \t\t\t\tif (type_row->pattern[index_pattern] == ' ') {\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-46420.patch",
                "status": "added",
                "additions": 59,
                "deletions": 0,
                "changes": 59,
                "patch": "@@ -0,0 +1,59 @@\n+From 909a9c40197d53bb331830d959ec86b97721d64f Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Thu, 26 Dec 2024 18:31:42 -0600\n+Subject: [PATCH 5/6] soup_header_parse_quality_list: Fix leak\n+\n+When iterating over the parsed list we now steal the allocated strings that we want and then free_full the list which may contain remaining strings.\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/c9083869ec2a3037e6df4bd86b45c419ba295f8e\n+---\n+ libsoup/soup-headers.c | 11 +++++------\n+ 1 file changed, 5 insertions(+), 6 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index 4468415..d28ddff 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -530,7 +530,7 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n+ \tGSList *unsorted;\n+ \tQualityItem *array;\n+ \tGSList *sorted, *iter;\n+-\tchar *item, *semi;\n++\tchar *semi;\n+ \tconst char *param, *equal, *value;\n+ \tdouble qval;\n+ \tint n;\n+@@ -543,9 +543,8 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n+ \tunsorted = soup_header_parse_list (header);\n+ \tarray = g_new0 (QualityItem, g_slist_length (unsorted));\n+ \tfor (iter = unsorted, n = 0; iter; iter = iter->next) {\n+-\t\titem = iter->data;\n+ \t\tqval = 1.0;\n+-\t\tfor (semi = strchr (item, ';'); semi; semi = strchr (semi + 1, ';')) {\n++\t\tfor (semi = strchr (iter->data, ';'); semi; semi = strchr (semi + 1, ';')) {\n+ \t\t\tparam = skip_lws (semi + 1);\n+ \t\t\tif (*param != 'q')\n+ \t\t\t\tcontinue;\n+@@ -577,15 +576,15 @@ soup_header_parse_quality_list (const char *header, GSList **unacceptable)\n+ \t\tif (qval == 0.0) {\n+ \t\t\tif (unacceptable) {\n+ \t\t\t\t*unacceptable = g_slist_prepend (*unacceptable,\n+-\t\t\t\t\t\t\t\t item);\n++\t\t\t\t\t\t\t\t g_steal_pointer (&iter->data));\n+ \t\t\t}\n+ \t\t} else {\n+-\t\t\tarray[n].item = item;\n++\t\t\tarray[n].item = g_steal_pointer (&iter->data);\n+ \t\t\tarray[n].qval = qval;\n+ \t\t\tn++;\n+ \t\t}\n+ \t}\n+-\tg_slist_free (unsorted);\n++\tg_slist_free_full (unsorted, g_free);\n+ \n+ \tqsort (array, n, sizeof (QualityItem), sort_by_qval);\n+ \tsorted = NULL;\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-46421.patch",
                "status": "added",
                "additions": 137,
                "deletions": 0,
                "changes": 137,
                "patch": "@@ -0,0 +1,137 @@\n+From 09568d47d796f526820d3a6ff85cd2797eb65843 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 5 Feb 2025 16:18:10 -0600\n+Subject: [PATCH 6/6] session: Strip authentication credentails on cross-origin\n+ redirect\n+\n+This should match the behavior of Firefox and Safari but not of Chromium.\n+\n+Upstream reference:\n+https://gitlab.gnome.org/GNOME/libsoup/-/commit/3e5c26415811f19e7737238bb23305ffaf96f66b\n+---\n+ libsoup/soup-session.c |  6 ++++\n+ tests/auth-test.c      | 77 ++++++++++++++++++++++++++++++++++++++++++\n+ 2 files changed, 83 insertions(+)\n+\n+diff --git a/libsoup/soup-session.c b/libsoup/soup-session.c\n+index 631bec0..9f00b05 100644\n+--- a/libsoup/soup-session.c\n++++ b/libsoup/soup-session.c\n+@@ -1230,6 +1230,12 @@ soup_session_redirect_message (SoupSession *session,\n+ \t\t\t\t\t\t   SOUP_ENCODING_NONE);\n+ \t}\n+ \n++        /* Strip all credentials on cross-origin redirect. */\n++        if (!soup_uri_host_equal (soup_message_get_uri (msg), new_uri)) {\n++                soup_message_headers_remove_common (soup_message_get_request_headers (msg), SOUP_HEADER_AUTHORIZATION);\n++                soup_message_set_auth (msg, NULL);\n++        }\n++\n+         soup_message_set_request_host_from_uri (msg, new_uri);\n+ \tsoup_message_set_uri (msg, new_uri);\n+ \tg_uri_unref (new_uri);\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index 484097f..7c3b551 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1,6 +1,7 @@\n+ /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n+ \n+ #include \"test-utils.h\"\n++#include \"soup-uri-utils-private.h\"\n+ \n+ static const char *base_uri;\n+ static GMainLoop *loop;\n+@@ -1916,6 +1917,81 @@ do_missing_params_test (gconstpointer auth_header)\n+ \tsoup_test_server_quit_unref (server);\n+ }\n+ \n++static void\n++redirect_server_callback (SoupServer        *server,\n++                          SoupServerMessage *msg,\n++                          const char        *path,\n++                          GHashTable        *query,\n++                          gpointer           user_data)\n++{\n++    static gboolean redirected = FALSE;\n++\n++    if (!redirected) {\n++        char *redirect_uri = g_uri_to_string (user_data);\n++        soup_server_message_set_redirect (msg, SOUP_STATUS_MOVED_PERMANENTLY, redirect_uri);\n++        g_free (redirect_uri);\n++        redirected = TRUE;\n++        return;\n++    }\n++\n++    g_assert_not_reached ();\n++}\n++\n++static gboolean\n++auth_for_redirect_callback (SoupMessage *msg, SoupAuth *auth, gboolean retrying, gpointer user_data)\n++{\n++    GUri *known_server_uri = user_data;\n++\n++    if (!soup_uri_host_equal (known_server_uri, soup_message_get_uri (msg)))\n++        return FALSE;\n++\n++    soup_auth_authenticate (auth, \"user\", \"good-basic\");\n++\n++    return TRUE;\n++}\n++\n++static void\n++do_strip_on_crossorigin_redirect (void)\n++{\n++    SoupSession *session;\n++    SoupMessage *msg;\n++    SoupServer *server1, *server2;\n++    SoupAuthDomain *auth_domain;\n++    GUri *uri;\n++    gint status;\n++\n++    server1 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++    server2 = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++\n++    /* Both servers have the same credentials. */\n++    auth_domain = soup_auth_domain_basic_new (\"realm\", \"auth-test\", \"auth-callback\", server_basic_auth_callback, NULL);\n++    soup_auth_domain_add_path (auth_domain, \"/\");\n++    soup_server_add_auth_domain (server1, auth_domain);\n++    soup_server_add_auth_domain (server2, auth_domain);\n++    g_object_unref (auth_domain);\n++\n++    /* Server 1 asks for auth, then redirects to Server 2. */\n++    soup_server_add_handler (server1, NULL,\n++                    redirect_server_callback,\n++                   soup_test_server_get_uri (server2, \"http\", NULL), (GDestroyNotify)g_uri_unref);\n++    /* Server 2 requires auth. */\n++    soup_server_add_handler (server2, NULL, server_callback, NULL, NULL);\n++\n++    session = soup_test_session_new (NULL);\n++    uri = soup_test_server_get_uri (server1, \"http\", NULL);\n++    msg = soup_message_new_from_uri (\"GET\", uri);\n++    /* The client only sends credentials for the host it knows. */\n++    g_signal_connect (msg, \"authenticate\", G_CALLBACK (auth_for_redirect_callback), uri);\n++\n++    status = soup_test_session_send_message (session, msg);\n++\n++    g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n++\n++    g_uri_unref (uri);\n++    soup_test_server_quit_unref (server1);\n++    soup_test_server_quit_unref (server2);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -1949,6 +2025,7 @@ main (int argc, char **argv)\n+ \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n+         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n+         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n++        g_test_add_func (\"/auth/strip-on-crossorigin-redirect\", do_strip_on_crossorigin_redirect);\n+         g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n+-- \n+2.45.3\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 10,
                "deletions": 1,
                "changes": 11,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        4%{?dist}\n+Release:        5%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -56,6 +56,12 @@ Patch6:          CVE-2025-32910.patch\n Patch7:          CVE-2025-32912.patch\n Patch8:          CVE-2025-32908.patch\n Patch9:          CVE-2025-32914.patch\n+Patch10:         CVE-2025-2784.patch\n+Patch11:         CVE-2025-32052.patch\n+Patch12:         CVE-2025-32050.patch\n+Patch13:         CVE-2025-32051.patch\n+Patch14:         CVE-2025-46420.patch\n+Patch15:         CVE-2025-46421.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -123,6 +129,9 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri May 02 2025 Kshitiz Godara <kgodara@microsoft.com> - 3.4.4-5\n+- Added patch for CVE-2025-2784 CVE-2025-32052 CVE-2025-32050 CVE-2025-32051 CVE-2025-46420 CVE-2025-46421\n+\n * Fri Apr 25 2025 Kshitiz Godara <kgodara@microsoft.com> - 3.4.4-4\n - Add patch for CVE-2025-32908\n - Add patch for CVE-2025-32914"
            }
        ],
        "cves": [
            "CVE-2025-2784",
            "CVE-2025-32050",
            "CVE-2025-32051",
            "CVE-2025-32052",
            "CVE-2025-46420",
            "CVE-2025-46421"
        ],
        "base_branch": "fasttrack/3.0"
    },
    "13594": {
        "pr_name": "[AUTO-CHERRYPICK] Patch libsoup for CVE-2025-32908, CVE-2025-32914 [HIGH] - branch 3.0-dev",
        "pr_date": "2025-04-25T21:37:00Z",
        "user": "CBL-Mariner-Bot",
        "url": "https://github.com/microsoft/azurelinux/pull/13594",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-32908.patch",
                "status": "added",
                "additions": 83,
                "deletions": 0,
                "changes": 83,
                "patch": "@@ -0,0 +1,83 @@\n+From a792b23ab87cacbf4dd9462bf7b675fa678efbae Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 15 Apr 2025 09:59:05 +0200\n+Subject: [PATCH] soup-server-http2: Check validity of the constructed\n+ connection URI\n+\n+The HTTP/2 pseudo-headers can contain invalid values, which the GUri rejects\n+and returns NULL, but the soup-server did not check the validity and could\n+abort the server itself later in the code.\n+\n+Closes #429\n+---\n+ .../http2/soup-server-message-io-http2.c      |  4 +++\n+ tests/http2-test.c                            | 28 +++++++++++++++++++\n+ 2 files changed, 32 insertions(+)\n+\n+diff --git a/libsoup/server/http2/soup-server-message-io-http2.c b/libsoup/server/http2/soup-server-message-io-http2.c\n+index 943ecfd3..f1fe2d5c 100644\n+--- a/libsoup/server/http2/soup-server-message-io-http2.c\n++++ b/libsoup/server/http2/soup-server-message-io-http2.c\n+@@ -771,9 +771,13 @@ on_frame_recv_callback (nghttp2_session     *session,\n+                 char *uri_string;\n+                 GUri *uri;\n+ \n++\t\tif (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n++\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n+                 uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n+                 uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n+                 g_free (uri_string);\n++\t\tif (uri == NULL)\n++\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n+                 soup_server_message_set_uri (msg_io->msg, uri);\n+                 g_uri_unref (uri);\n+ \n+diff --git a/tests/http2-test.c b/tests/http2-test.c\n+index 5b6da5e4..ec7972fe 100644\n+--- a/tests/http2-test.c\n++++ b/tests/http2-test.c\n+@@ -1341,6 +1341,30 @@ do_connection_closed_test (Test *test, gconstpointer data)\n+         g_uri_unref (uri);\n+ }\n+ \n++static void\n++do_broken_pseudo_header_test (Test *test, gconstpointer data)\n++{\n++\tchar *path;\n++\tSoupMessage *msg;\n++\tGUri *uri;\n++\tGBytes *body = NULL;\n++\tGError *error = NULL;\n++\n++\turi = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n++\n++\t/* an ugly cheat to construct a broken URI, which can be sent from other libs */\n++\tpath = (char *) g_uri_get_path (uri);\n++\tpath[1] = '%';\n++\n++\tmsg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n++\tbody = soup_test_session_async_send (test->session, msg, NULL, &error);\n++\tg_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n++\tg_assert_null (body);\n++\tg_clear_error (&error);\n++\tg_object_unref (msg);\n++\tg_uri_unref (uri);\n++}\n++\n+ static gboolean\n+ unpause_message (SoupServerMessage *msg)\n+ {\n+@@ -1662,6 +1686,10 @@ main (int argc, char **argv)\n+                     setup_session,\n+                     do_connection_closed_test,\n+                     teardown_session);\n++        g_test_add (\"/http2/broken-pseudo-header\", Test, NULL,\n++                    setup_session,\n++                    do_broken_pseudo_header_test,\n++                    teardown_session);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32914.patch",
                "status": "added",
                "additions": 107,
                "deletions": 0,
                "changes": 107,
                "patch": "@@ -0,0 +1,107 @@\n+From 5bfcf8157597f2d327050114fb37ff600004dbcf Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 15 Apr 2025 09:03:00 +0200\n+Subject: [PATCH] multipart: Fix read out of buffer bounds under\n+ soup_multipart_new_from_message()\n+\n+This is CVE-2025-32914, special crafted input can cause read out of buffer bounds\n+of the body argument.\n+\n+Closes #436\n+---\n+ libsoup/soup-multipart.c |  2 +-\n+ tests/multipart-test.c   | 58 ++++++++++++++++++++++++++++++++++++++++\n+ 2 files changed, 59 insertions(+), 1 deletion(-)\n+\n+diff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\n+index 2421c91f8..102ce3722 100644\n+--- a/libsoup/soup-multipart.c\n++++ b/libsoup/soup-multipart.c\n+@@ -173,7 +173,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\n+ \t\t\treturn NULL;\n+ \t\t}\n+ \n+-\t\tsplit = strstr (start, \"\\r\\n\\r\\n\");\n++\t\tsplit = g_strstr_len (start, body_end - start, \"\\r\\n\\r\\n\");\n+ \t\tif (!split || split > end) {\n+ \t\t\tsoup_multipart_free (multipart);\n+ \t\t\treturn NULL;\n+diff --git a/tests/multipart-test.c b/tests/multipart-test.c\n+index 2c0e7e969..f5b986889 100644\n+--- a/tests/multipart-test.c\n++++ b/tests/multipart-test.c\n+@@ -471,6 +471,62 @@ test_multipart (gconstpointer data)\n+ \tloop = NULL;\n+ }\n+ \n++static void\n++test_multipart_bounds_good (void)\n++{\n++\t#define TEXT \"line1\\r\\nline2\"\n++\tSoupMultipart *multipart;\n++\tSoupMessageHeaders *headers, *set_headers = NULL;\n++\tGBytes *bytes, *set_bytes = NULL;\n++\tconst char *raw_data = \"--123\\r\\nContent-Type: text/plain;\\r\\n\\r\\n\" TEXT \"\\r\\n--123--\\r\\n\";\n++\tgboolean success;\n++\n++\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n++\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\\\"123\\\"\");\n++\n++\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n++\n++\tmultipart = soup_multipart_new_from_message (headers, bytes);\n++\n++\tg_assert_nonnull (multipart);\n++\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\n++\tsuccess = soup_multipart_get_part (multipart, 0, &set_headers, &set_bytes);\n++\tg_assert_true (success);\n++\tg_assert_nonnull (set_headers);\n++\tg_assert_nonnull (set_bytes);\n++\tg_assert_cmpint (strlen (TEXT), ==, g_bytes_get_size (set_bytes));\n++\tg_assert_cmpstr (\"text/plain\", ==, soup_message_headers_get_content_type (set_headers, NULL));\n++\tg_assert_cmpmem (TEXT, strlen (TEXT), g_bytes_get_data (set_bytes, NULL), g_bytes_get_size (set_bytes));\n++\n++\tsoup_message_headers_unref (headers);\n++\tg_bytes_unref (bytes);\n++\n++\tsoup_multipart_free (multipart);\n++\n++\t#undef TEXT\n++}\n++\n++static void\n++test_multipart_bounds_bad (void)\n++{\n++\tSoupMultipart *multipart;\n++\tSoupMessageHeaders *headers;\n++\tGBytes *bytes;\n++\tconst char *raw_data = \"--123\\r\\nContent-Type: text/plain;\\r\\nline1\\r\\nline2\\r\\n--123--\\r\\n\";\n++\n++\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n++\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\\\"123\\\"\");\n++\n++\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n++\n++\t/* it did read out of raw_data/bytes bounds */\n++\tmultipart = soup_multipart_new_from_message (headers, bytes);\n++\tg_assert_null (multipart);\n++\n++\tsoup_message_headers_unref (headers);\n++\tg_bytes_unref (bytes);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -498,6 +554,8 @@ main (int argc, char **argv)\n+ \tg_test_add_data_func (\"/multipart/sync\", GINT_TO_POINTER (SYNC_MULTIPART), test_multipart);\n+ \tg_test_add_data_func (\"/multipart/async\", GINT_TO_POINTER (ASYNC_MULTIPART), test_multipart);\n+ \tg_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\n++\tg_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);\n++\tg_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        3%{?dist}\n+Release:        4%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -54,6 +54,8 @@ Patch5:          CVE-2025-32909.patch\n Patch6:          CVE-2025-32910.patch\n # CVE-2025-32912 will be fixed in 3.6.5 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/cd077513f267e43ce4b659eb18a1734d8a369992\n Patch7:          CVE-2025-32912.patch\n+Patch8:          CVE-2025-32908.patch\n+Patch9:          CVE-2025-32914.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -121,6 +123,10 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri Apr 25 2025 Kshitiz Godara <kgodara@microsoft.com> - 3.4.4-4\n+- Add patch for CVE-2025-32908\n+- Add patch for CVE-2025-32914\n+\n * Wed Apr 16 2025 Kevin Lockwood <v-klockwood@microsoft.com> - 3.4.4-3\n - Add patch for CVE-2025-32913\n - Add patch for CVE-2025-32906"
            }
        ],
        "cves": [
            "CVE-2025-32908",
            "CVE-2025-32914"
        ],
        "base_branch": "3.0-dev"
    },
    "13582": {
        "pr_name": "Patch libsoup for CVE-2025-32908, CVE-2025-32914 [HIGH]",
        "pr_date": "2025-04-25T04:59:04Z",
        "user": "kgodara912",
        "url": "https://github.com/microsoft/azurelinux/pull/13582",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-32908.patch",
                "status": "added",
                "additions": 83,
                "deletions": 0,
                "changes": 83,
                "patch": "@@ -0,0 +1,83 @@\n+From a792b23ab87cacbf4dd9462bf7b675fa678efbae Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 15 Apr 2025 09:59:05 +0200\n+Subject: [PATCH] soup-server-http2: Check validity of the constructed\n+ connection URI\n+\n+The HTTP/2 pseudo-headers can contain invalid values, which the GUri rejects\n+and returns NULL, but the soup-server did not check the validity and could\n+abort the server itself later in the code.\n+\n+Closes #429\n+---\n+ .../http2/soup-server-message-io-http2.c      |  4 +++\n+ tests/http2-test.c                            | 28 +++++++++++++++++++\n+ 2 files changed, 32 insertions(+)\n+\n+diff --git a/libsoup/server/http2/soup-server-message-io-http2.c b/libsoup/server/http2/soup-server-message-io-http2.c\n+index 943ecfd3..f1fe2d5c 100644\n+--- a/libsoup/server/http2/soup-server-message-io-http2.c\n++++ b/libsoup/server/http2/soup-server-message-io-http2.c\n+@@ -771,9 +771,13 @@ on_frame_recv_callback (nghttp2_session     *session,\n+                 char *uri_string;\n+                 GUri *uri;\n+ \n++\t\tif (msg_io->scheme == NULL || msg_io->authority == NULL || msg_io->path == NULL)\n++\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n+                 uri_string = g_strdup_printf (\"%s://%s%s\", msg_io->scheme, msg_io->authority, msg_io->path);\n+                 uri = g_uri_parse (uri_string, SOUP_HTTP_URI_FLAGS, NULL);\n+                 g_free (uri_string);\n++\t\tif (uri == NULL)\n++\t\t\treturn NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;\n+                 soup_server_message_set_uri (msg_io->msg, uri);\n+                 g_uri_unref (uri);\n+ \n+diff --git a/tests/http2-test.c b/tests/http2-test.c\n+index 5b6da5e4..ec7972fe 100644\n+--- a/tests/http2-test.c\n++++ b/tests/http2-test.c\n+@@ -1341,6 +1341,30 @@ do_connection_closed_test (Test *test, gconstpointer data)\n+         g_uri_unref (uri);\n+ }\n+ \n++static void\n++do_broken_pseudo_header_test (Test *test, gconstpointer data)\n++{\n++\tchar *path;\n++\tSoupMessage *msg;\n++\tGUri *uri;\n++\tGBytes *body = NULL;\n++\tGError *error = NULL;\n++\n++\turi = g_uri_parse_relative (base_uri, \"/ag\", SOUP_HTTP_URI_FLAGS, NULL);\n++\n++\t/* an ugly cheat to construct a broken URI, which can be sent from other libs */\n++\tpath = (char *) g_uri_get_path (uri);\n++\tpath[1] = '%';\n++\n++\tmsg = soup_message_new_from_uri (SOUP_METHOD_GET, uri);\n++\tbody = soup_test_session_async_send (test->session, msg, NULL, &error);\n++\tg_assert_error (error, G_IO_ERROR, G_IO_ERROR_PARTIAL_INPUT);\n++\tg_assert_null (body);\n++\tg_clear_error (&error);\n++\tg_object_unref (msg);\n++\tg_uri_unref (uri);\n++}\n++\n+ static gboolean\n+ unpause_message (SoupServerMessage *msg)\n+ {\n+@@ -1662,6 +1686,10 @@ main (int argc, char **argv)\n+                     setup_session,\n+                     do_connection_closed_test,\n+                     teardown_session);\n++        g_test_add (\"/http2/broken-pseudo-header\", Test, NULL,\n++                    setup_session,\n++                    do_broken_pseudo_header_test,\n++                    teardown_session);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32914.patch",
                "status": "added",
                "additions": 107,
                "deletions": 0,
                "changes": 107,
                "patch": "@@ -0,0 +1,107 @@\n+From 5bfcf8157597f2d327050114fb37ff600004dbcf Mon Sep 17 00:00:00 2001\n+From: Milan Crha <mcrha@redhat.com>\n+Date: Tue, 15 Apr 2025 09:03:00 +0200\n+Subject: [PATCH] multipart: Fix read out of buffer bounds under\n+ soup_multipart_new_from_message()\n+\n+This is CVE-2025-32914, special crafted input can cause read out of buffer bounds\n+of the body argument.\n+\n+Closes #436\n+---\n+ libsoup/soup-multipart.c |  2 +-\n+ tests/multipart-test.c   | 58 ++++++++++++++++++++++++++++++++++++++++\n+ 2 files changed, 59 insertions(+), 1 deletion(-)\n+\n+diff --git a/libsoup/soup-multipart.c b/libsoup/soup-multipart.c\n+index 2421c91f8..102ce3722 100644\n+--- a/libsoup/soup-multipart.c\n++++ b/libsoup/soup-multipart.c\n+@@ -173,7 +173,7 @@ soup_multipart_new_from_message (SoupMessageHeaders *headers,\n+ \t\t\treturn NULL;\n+ \t\t}\n+ \n+-\t\tsplit = strstr (start, \"\\r\\n\\r\\n\");\n++\t\tsplit = g_strstr_len (start, body_end - start, \"\\r\\n\\r\\n\");\n+ \t\tif (!split || split > end) {\n+ \t\t\tsoup_multipart_free (multipart);\n+ \t\t\treturn NULL;\n+diff --git a/tests/multipart-test.c b/tests/multipart-test.c\n+index 2c0e7e969..f5b986889 100644\n+--- a/tests/multipart-test.c\n++++ b/tests/multipart-test.c\n+@@ -471,6 +471,62 @@ test_multipart (gconstpointer data)\n+ \tloop = NULL;\n+ }\n+ \n++static void\n++test_multipart_bounds_good (void)\n++{\n++\t#define TEXT \"line1\\r\\nline2\"\n++\tSoupMultipart *multipart;\n++\tSoupMessageHeaders *headers, *set_headers = NULL;\n++\tGBytes *bytes, *set_bytes = NULL;\n++\tconst char *raw_data = \"--123\\r\\nContent-Type: text/plain;\\r\\n\\r\\n\" TEXT \"\\r\\n--123--\\r\\n\";\n++\tgboolean success;\n++\n++\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n++\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\\\"123\\\"\");\n++\n++\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n++\n++\tmultipart = soup_multipart_new_from_message (headers, bytes);\n++\n++\tg_assert_nonnull (multipart);\n++\tg_assert_cmpint (soup_multipart_get_length (multipart), ==, 1);\n++\tsuccess = soup_multipart_get_part (multipart, 0, &set_headers, &set_bytes);\n++\tg_assert_true (success);\n++\tg_assert_nonnull (set_headers);\n++\tg_assert_nonnull (set_bytes);\n++\tg_assert_cmpint (strlen (TEXT), ==, g_bytes_get_size (set_bytes));\n++\tg_assert_cmpstr (\"text/plain\", ==, soup_message_headers_get_content_type (set_headers, NULL));\n++\tg_assert_cmpmem (TEXT, strlen (TEXT), g_bytes_get_data (set_bytes, NULL), g_bytes_get_size (set_bytes));\n++\n++\tsoup_message_headers_unref (headers);\n++\tg_bytes_unref (bytes);\n++\n++\tsoup_multipart_free (multipart);\n++\n++\t#undef TEXT\n++}\n++\n++static void\n++test_multipart_bounds_bad (void)\n++{\n++\tSoupMultipart *multipart;\n++\tSoupMessageHeaders *headers;\n++\tGBytes *bytes;\n++\tconst char *raw_data = \"--123\\r\\nContent-Type: text/plain;\\r\\nline1\\r\\nline2\\r\\n--123--\\r\\n\";\n++\n++\theaders = soup_message_headers_new (SOUP_MESSAGE_HEADERS_MULTIPART);\n++\tsoup_message_headers_append (headers, \"Content-Type\", \"multipart/mixed; boundary=\\\"123\\\"\");\n++\n++\tbytes = g_bytes_new (raw_data, strlen (raw_data));\n++\n++\t/* it did read out of raw_data/bytes bounds */\n++\tmultipart = soup_multipart_new_from_message (headers, bytes);\n++\tg_assert_null (multipart);\n++\n++\tsoup_message_headers_unref (headers);\n++\tg_bytes_unref (bytes);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -498,6 +554,8 @@ main (int argc, char **argv)\n+ \tg_test_add_data_func (\"/multipart/sync\", GINT_TO_POINTER (SYNC_MULTIPART), test_multipart);\n+ \tg_test_add_data_func (\"/multipart/async\", GINT_TO_POINTER (ASYNC_MULTIPART), test_multipart);\n+ \tg_test_add_data_func (\"/multipart/async-small-reads\", GINT_TO_POINTER (ASYNC_MULTIPART_SMALL_READS), test_multipart);\n++\tg_test_add_func (\"/multipart/bounds-good\", test_multipart_bounds_good);\n++\tg_test_add_func (\"/multipart/bounds-bad\", test_multipart_bounds_bad);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 7,
                "deletions": 1,
                "changes": 8,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        3%{?dist}\n+Release:        4%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -54,6 +54,8 @@ Patch5:          CVE-2025-32909.patch\n Patch6:          CVE-2025-32910.patch\n # CVE-2025-32912 will be fixed in 3.6.5 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/cd077513f267e43ce4b659eb18a1734d8a369992\n Patch7:          CVE-2025-32912.patch\n+Patch8:          CVE-2025-32908.patch\n+Patch9:          CVE-2025-32914.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -121,6 +123,10 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri Apr 25 2025 Kshitiz Godara <kgodara@microsoft.com> - 3.4.4-4\n+- Add patch for CVE-2025-32908\n+- Add patch for CVE-2025-32914\n+\n * Wed Apr 16 2025 Kevin Lockwood <v-klockwood@microsoft.com> - 3.4.4-3\n - Add patch for CVE-2025-32913\n - Add patch for CVE-2025-32906"
            }
        ],
        "cves": [
            "CVE-2025-32908",
            "CVE-2025-32914"
        ],
        "base_branch": "fasttrack/3.0"
    },
    "13543": {
        "pr_name": "[AUTO-CHERRYPICK] [High] Patch libsoup for CVE-2025-32913, CVE-2025-32906, CVE-2025-32909, CVE-2025-32910, CVE-2025-32912 - branch 3.0-dev",
        "pr_date": "2025-04-22T19:37:42Z",
        "user": "CBL-Mariner-Bot",
        "url": "https://github.com/microsoft/azurelinux/pull/13543",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-32906.patch",
                "status": "added",
                "additions": 38,
                "deletions": 0,
                "changes": 38,
                "patch": "@@ -0,0 +1,38 @@\n+From e0831346d685ee907065fa5e489e133f8ca12013 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 12 Feb 2025 11:30:02 -0600\n+Subject: [PATCH] headers: Handle parsing only newlines\n+\n+Closes #404\n+Closes #407\n+\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/af5b9a4a3945c52b940d5ac181ef51bb12011f1f.patch\n+---\n+ libsoup/soup-headers.c | 4 ++--\n+ 1 file changed, 2 insertions(+), 2 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index a0cf351..88aafc9 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -193,7 +193,7 @@ soup_headers_parse_request (const char          *str,\n+ \t/* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n+ \t * received where a Request-Line is expected.\"\n+ \t */\n+-\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\n++\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\n+ \t\tstr++;\n+ \t\tlen--;\n+ \t}\n+@@ -378,7 +378,7 @@ soup_headers_parse_response (const char          *str,\n+ \t * after a response, which we then see prepended to the next\n+ \t * response on that connection.\n+ \t */\n+-\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\n++\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\n+ \t\tstr++;\n+ \t\tlen--;\n+ \t}\n+-- \n+2.34.1\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32909.patch",
                "status": "added",
                "additions": 34,
                "deletions": 0,
                "changes": 34,
                "patch": "@@ -0,0 +1,34 @@\n+From ba4c3a6f988beff59e45801ab36067293d24ce92 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 8 Jan 2025 16:30:17 -0600\n+Subject: [PATCH] content-sniffer: Handle sniffing resource shorter than 4\n+ bytes\n+\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/ba4c3a6f988beff59e45801ab36067293d24ce92.patch\n+---\n+ libsoup/content-sniffer/soup-content-sniffer.c | 7 ++++++-\n+ 1 file changed, 6 insertions(+), 1 deletion(-)\n+\n+diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n+index 5a181ff1..aeee2e25 100644\n+--- a/libsoup/content-sniffer/soup-content-sniffer.c\n++++ b/libsoup/content-sniffer/soup-content-sniffer.c\n+@@ -243,9 +243,14 @@ sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)\n+ \tgsize resource_length;\n+ \tconst char *resource = g_bytes_get_data (buffer, &resource_length);\n+ \tresource_length = MIN (512, resource_length);\n+-\tguint32 box_size = *((guint32*)resource);\n++\tguint32 box_size;\n+ \tguint i;\n+ \n++        if (resource_length < sizeof (guint32))\n++                return FALSE;\n++\n++\tbox_size = *((guint32*)resource);\n++\n+ #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+ \tbox_size = ((box_size >> 24) |\n+ \t\t    ((box_size << 8) & 0x00FF0000) |\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32910.patch",
                "status": "added",
                "additions": 268,
                "deletions": 0,
                "changes": 268,
                "patch": "@@ -0,0 +1,268 @@\n+From e40df6d48a1cbab56f5d15016cc861a503423cfe Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Sun, 8 Dec 2024 20:00:35 -0600\n+Subject: [PATCH 1/3] auth-digest: Handle missing realm in authenticate header\n+\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/417.patch\n+---\n+ libsoup/auth/soup-auth-digest.c |  3 ++\n+ tests/auth-test.c               | 50 +++++++++++++++++++++++++++++++++\n+ 2 files changed, 53 insertions(+)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 2e81849af..4f12e87a5 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -148,6 +148,9 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \tguint qop_options;\n+ \tgboolean ok = TRUE;\n+ \n++        if (!soup_auth_get_realm (auth))\n++                return FALSE;\n++\n+ \tg_free (priv->domain);\n+ \tg_free (priv->nonce);\n+ \tg_free (priv->opaque);\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index 158fdac10..3066e904a 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1866,6 +1866,55 @@ do_multiple_digest_algorithms (void)\n+ \tsoup_test_server_quit_unref (server);\n+ }\n+ \n++static void\n++on_request_read_for_missing_realm (SoupServer        *server,\n++                                   SoupServerMessage *msg,\n++                                   gpointer           user_data)\n++{\n++        SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n++        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\\\"auth\\\"\");\n++}\n++\n++static void\n++do_missing_realm_test (void)\n++{\n++        SoupSession *session;\n++        SoupMessage *msg;\n++        SoupServer *server;\n++        SoupAuthDomain *digest_auth_domain;\n++        gint status;\n++        GUri *uri;\n++\n++        server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++\tsoup_server_add_handler (server, NULL,\n++\t\t\t\t server_callback, NULL, NULL);\n++\turi = soup_test_server_get_uri (server, \"http\", NULL);\n++\n++\tdigest_auth_domain = soup_auth_domain_digest_new (\n++\t\t\"realm\", \"auth-test\",\n++\t\t\"auth-callback\", server_digest_auth_callback,\n++\t\tNULL);\n++        soup_auth_domain_add_path (digest_auth_domain, \"/\");\n++\tsoup_server_add_auth_domain (server, digest_auth_domain);\n++        g_object_unref (digest_auth_domain);\n++\n++        g_signal_connect (server, \"request-read\",\n++                          G_CALLBACK (on_request_read_for_missing_realm),\n++                          NULL);\n++\n++        session = soup_test_session_new (NULL);\n++        msg = soup_message_new_from_uri (\"GET\", uri);\n++        g_signal_connect (msg, \"authenticate\",\n++                          G_CALLBACK (on_digest_authenticate),\n++                          NULL);\n++\n++        status = soup_test_session_send_message (session, msg);\n++\n++        g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n++\tg_uri_unref (uri);\n++\tsoup_test_server_quit_unref (server);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -1899,6 +1948,7 @@ main (int argc, char **argv)\n+ \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n+         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n+         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n++        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+\n+\n+From 405a8a34597a44bd58c4759e7d5e23f02c3b556a Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Thu, 26 Dec 2024 18:18:35 -0600\n+Subject: [PATCH 2/3] auth-digest: Handle missing nonce\n+\n+---\n+ libsoup/auth/soup-auth-digest.c | 45 +++++++++++++++++++++++++--------\n+ tests/auth-test.c               | 19 ++++++++------\n+ 2 files changed, 46 insertions(+), 18 deletions(-)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 4f12e87a5..350bfde69 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -138,6 +138,19 @@ soup_auth_digest_get_qop (SoupAuthDigestQop qop)\n+ \treturn g_string_free (out, FALSE);\n+ }\n+ \n++static gboolean\n++validate_params (SoupAuthDigest *auth_digest)\n++{\n++        SoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);\n++\n++        if (priv->qop || priv->algorithm == SOUP_AUTH_DIGEST_ALGORITHM_MD5_SESS) {\n++                if (!priv->nonce)\n++                        return FALSE;\n++        }\n++\n++        return TRUE;\n++}\n++\n+ static gboolean\n+ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \t\t\t GHashTable *auth_params)\n+@@ -175,16 +188,21 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \tif (priv->algorithm == -1)\n+ \t\tok = FALSE;\n+ \n+-\tstale = g_hash_table_lookup (auth_params, \"stale\");\n+-\tif (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n+-\t\trecompute_hex_a1 (priv);\n+-\telse {\n+-\t\tg_free (priv->user);\n+-\t\tpriv->user = NULL;\n+-\t\tg_free (priv->cnonce);\n+-\t\tpriv->cnonce = NULL;\n+-\t\tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n+-\t\tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n++        if (!validate_params (auth_digest))\n++                ok = FALSE;\n++\n++        if (ok) {\n++                stale = g_hash_table_lookup (auth_params, \"stale\");\n++                if (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n++                        recompute_hex_a1 (priv);\n++                else {\n++                        g_free (priv->user);\n++                        priv->user = NULL;\n++                        g_free (priv->cnonce);\n++                        priv->cnonce = NULL;\n++                        memset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n++                        memset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n++                }\n+         }\n+ \n+ \treturn ok;\n+@@ -276,6 +294,8 @@ soup_auth_digest_compute_hex_a1 (const char              *hex_urp,\n+ \n+ \t\t/* In MD5-sess, A1 is hex_urp:nonce:cnonce */\n+ \n++                g_assert (nonce && cnonce);\n++\n+ \t\tchecksum = g_checksum_new (G_CHECKSUM_MD5);\n+ \t\tg_checksum_update (checksum, (guchar *)hex_urp, strlen (hex_urp));\n+ \t\tg_checksum_update (checksum, (guchar *)\":\", 1);\n+@@ -366,6 +386,8 @@ soup_auth_digest_compute_response (const char        *method,\n+ \tif (qop) {\n+ \t\tchar tmp[9];\n+ \n++                g_assert (cnonce);\n++\n+ \t\tg_snprintf (tmp, 9, \"%.8x\", nc);\n+ \t\tg_checksum_update (checksum, (guchar *)tmp, strlen (tmp));\n+ \t\tg_checksum_update (checksum, (guchar *)\":\", 1);\n+@@ -429,6 +451,9 @@ soup_auth_digest_get_authorization (SoupAuth *auth, SoupMessage *msg)\n+ \tg_return_val_if_fail (uri != NULL, NULL);\n+ \turl = soup_uri_get_path_and_query (uri);\n+ \n++        g_assert (priv->nonce);\n++        g_assert (!priv->qop || priv->cnonce);\n++\n+ \tsoup_auth_digest_compute_response (soup_message_get_method (msg), url, priv->hex_a1,\n+ \t\t\t\t\t   priv->qop, priv->nonce,\n+ \t\t\t\t\t   priv->cnonce, priv->nc,\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index 3066e904a..c651c7cd9 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1867,16 +1867,17 @@ do_multiple_digest_algorithms (void)\n+ }\n+ \n+ static void\n+-on_request_read_for_missing_realm (SoupServer        *server,\n+-                                   SoupServerMessage *msg,\n+-                                   gpointer           user_data)\n++on_request_read_for_missing_params (SoupServer        *server,\n++                                      SoupServerMessage *msg,\n++                                      gpointer           user_data)\n+ {\n++        const char *auth_header = user_data;\n+         SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n+-        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\\\"auth\\\"\");\n++        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", auth_header);\n+ }\n+ \n+ static void\n+-do_missing_realm_test (void)\n++do_missing_params_test (gconstpointer auth_header)\n+ {\n+         SoupSession *session;\n+         SoupMessage *msg;\n+@@ -1899,8 +1900,8 @@ do_missing_realm_test (void)\n+         g_object_unref (digest_auth_domain);\n+ \n+         g_signal_connect (server, \"request-read\",\n+-                          G_CALLBACK (on_request_read_for_missing_realm),\n+-                          NULL);\n++                          G_CALLBACK (on_request_read_for_missing_params),\n++                          (gpointer)auth_header);\n+ \n+         session = soup_test_session_new (NULL);\n+         msg = soup_message_new_from_uri (\"GET\", uri);\n+@@ -1948,7 +1949,9 @@ main (int argc, char **argv)\n+ \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n+         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n+         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n+-        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n++        g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n++        g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n++        g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+\n+\n+From ea16eeacb052e423eb5c3b0b705e5eab34b13832 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Fri, 27 Dec 2024 13:52:52 -0600\n+Subject: [PATCH 3/3] auth-digest: Fix leak\n+\n+---\n+ libsoup/auth/soup-auth-digest.c | 1 +\n+ 1 file changed, 1 insertion(+)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 350bfde69..9eb7fa0e2 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -72,6 +72,7 @@ soup_auth_digest_finalize (GObject *object)\n+ \tg_free (priv->nonce);\n+ \tg_free (priv->domain);\n+ \tg_free (priv->cnonce);\n++        g_free (priv->opaque);\n+ \n+ \tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n+ \tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32912.patch",
                "status": "added",
                "additions": 38,
                "deletions": 0,
                "changes": 38,
                "patch": "@@ -0,0 +1,38 @@\n+From cd077513f267e43ce4b659eb18a1734d8a369992 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 5 Feb 2025 14:03:05 -0600\n+Subject: [PATCH] auth-digest: Handle missing nonce\n+\n+---\n+ libsoup/auth/soup-auth-digest.c | 2 +-\n+ tests/auth-test.c               | 1 +\n+ 2 files changed, 2 insertions(+), 1 deletion(-)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 9eb7fa0e..d69a4013 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -162,7 +162,7 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \tguint qop_options;\n+ \tgboolean ok = TRUE;\n+ \n+-        if (!soup_auth_get_realm (auth))\n++        if (!soup_auth_get_realm (auth) || !g_hash_table_contains (auth_params, \"nonce\"))\n+                 return FALSE;\n+ \n+ \tg_free (priv->domain);\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index c651c7cd..484097f1 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1952,6 +1952,7 @@ main (int argc, char **argv)\n+         g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n++        g_test_add_data_func (\"/auth/missing-params/nonce-and-qop\", \"Digest realm=\\\"auth-test\\\"\", do_missing_params_test);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32913.patch",
                "status": "added",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "patch": "@@ -0,0 +1,28 @@\n+From 260ce178f526f4b8baaa1cafc6e1e81fab225f53 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Fri, 27 Dec 2024 18:00:39 -0600\n+Subject: [PATCH] soup_message_headers_get_content_disposition: strdup\n+ truncated filenames\n+\n+This table frees the strings it contains.\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/f4a761fb66512fff59798765e8ac5b9e57dceef0.patch\n+---\n+ libsoup/soup-message-headers.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\n+index bcee5b9..18cbf98 100644\n+--- a/libsoup/soup-message-headers.c\n++++ b/libsoup/soup-message-headers.c\n+@@ -1611,7 +1611,7 @@ soup_message_headers_get_content_disposition (SoupMessageHeaders  *hdrs,\n+ \t\tchar *filename = strrchr (orig_value, '/');\n+ \n+ \t\tif (filename)\n+-\t\t\tg_hash_table_insert (*params, g_strdup (orig_key), filename + 1);\n++\t\t\tg_hash_table_insert (*params, g_strdup (orig_key), g_strdup (filename + 1));\n+ \t}\n+ \treturn TRUE;\n+ }\n+-- \n+2.34.1\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 21,
                "deletions": 4,
                "changes": 25,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        2%{?dist}\n+Release:        3%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -41,9 +41,19 @@ Requires:       glib-networking\n Requires:       libpsl\n Requires:       libxml2\n \n-Patch:          CVE-2024-52530.patch\n-Patch:          CVE-2024-52531.patch\n-Patch:          CVE-2024-52532.patch\n+Patch0:          CVE-2024-52530.patch\n+Patch1:          CVE-2024-52531.patch\n+Patch2:          CVE-2024-52532.patch\n+# CVE-2025-32913 will be fixed in 3.6.2 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/f4a761fb66512fff59798765e8ac5b9e57dceef0\n+Patch3:          CVE-2025-32913.patch\n+# CVE-2025-32906 will be fixed in 3.6.5 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/af5b9a4a3945c52b940d5ac181ef51bb12011f1f\n+Patch4:          CVE-2025-32906.patch\n+# CVE-2025-32909 will be fixed in 3.6.2 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/ba4c3a6f988beff59e45801ab36067293d24ce92\n+Patch5:          CVE-2025-32909.patch\n+# CVE-2025-32910 will be fixed in 3.6.2 by https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/417\n+Patch6:          CVE-2025-32910.patch\n+# CVE-2025-32912 will be fixed in 3.6.5 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/cd077513f267e43ce4b659eb18a1734d8a369992\n+Patch7:          CVE-2025-32912.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -111,6 +121,13 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Wed Apr 16 2025 Kevin Lockwood <v-klockwood@microsoft.com> - 3.4.4-3\n+- Add patch for CVE-2025-32913\n+- Add patch for CVE-2025-32906\n+- Add patch for CVE-2025-32909\n+- Add patch for CVE-2025-32910\n+- Add patch for CVE-2025-32912\n+\n * Fri Nov 15 2024 Thien Trung Vuong <tvuong@microsoft.com> - 3.4.4-2\n - Add patches for CVE-2024-52530, CVE-2024-52531, CVE-2024-52532\n "
            }
        ],
        "cves": [
            "CVE-2025-32913",
            "CVE-2025-32906",
            "CVE-2025-32909",
            "CVE-2025-32910",
            "CVE-2025-32912"
        ],
        "base_branch": "3.0-dev"
    },
    "13446": {
        "pr_name": "[High] Patch libsoup for CVE-2025-32913, CVE-2025-32906, CVE-2025-32909, CVE-2025-32910, CVE-2025-32912",
        "pr_date": "2025-04-16T23:07:15Z",
        "user": "kevin-b-lockwood",
        "url": "https://github.com/microsoft/azurelinux/pull/13446",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-32906.patch",
                "status": "added",
                "additions": 38,
                "deletions": 0,
                "changes": 38,
                "patch": "@@ -0,0 +1,38 @@\n+From e0831346d685ee907065fa5e489e133f8ca12013 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 12 Feb 2025 11:30:02 -0600\n+Subject: [PATCH] headers: Handle parsing only newlines\n+\n+Closes #404\n+Closes #407\n+\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/af5b9a4a3945c52b940d5ac181ef51bb12011f1f.patch\n+---\n+ libsoup/soup-headers.c | 4 ++--\n+ 1 file changed, 2 insertions(+), 2 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index a0cf351..88aafc9 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -193,7 +193,7 @@ soup_headers_parse_request (const char          *str,\n+ \t/* RFC 2616 4.1 \"servers SHOULD ignore any empty line(s)\n+ \t * received where a Request-Line is expected.\"\n+ \t */\n+-\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\n++\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\n+ \t\tstr++;\n+ \t\tlen--;\n+ \t}\n+@@ -378,7 +378,7 @@ soup_headers_parse_response (const char          *str,\n+ \t * after a response, which we then see prepended to the next\n+ \t * response on that connection.\n+ \t */\n+-\twhile ((*str == '\\r' || *str == '\\n') && len > 0) {\n++\twhile (len > 0 && (*str == '\\r' || *str == '\\n')) {\n+ \t\tstr++;\n+ \t\tlen--;\n+ \t}\n+-- \n+2.34.1\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32909.patch",
                "status": "added",
                "additions": 34,
                "deletions": 0,
                "changes": 34,
                "patch": "@@ -0,0 +1,34 @@\n+From ba4c3a6f988beff59e45801ab36067293d24ce92 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 8 Jan 2025 16:30:17 -0600\n+Subject: [PATCH] content-sniffer: Handle sniffing resource shorter than 4\n+ bytes\n+\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/ba4c3a6f988beff59e45801ab36067293d24ce92.patch\n+---\n+ libsoup/content-sniffer/soup-content-sniffer.c | 7 ++++++-\n+ 1 file changed, 6 insertions(+), 1 deletion(-)\n+\n+diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n+index 5a181ff1..aeee2e25 100644\n+--- a/libsoup/content-sniffer/soup-content-sniffer.c\n++++ b/libsoup/content-sniffer/soup-content-sniffer.c\n+@@ -243,9 +243,14 @@ sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)\n+ \tgsize resource_length;\n+ \tconst char *resource = g_bytes_get_data (buffer, &resource_length);\n+ \tresource_length = MIN (512, resource_length);\n+-\tguint32 box_size = *((guint32*)resource);\n++\tguint32 box_size;\n+ \tguint i;\n+ \n++        if (resource_length < sizeof (guint32))\n++                return FALSE;\n++\n++\tbox_size = *((guint32*)resource);\n++\n+ #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+ \tbox_size = ((box_size >> 24) |\n+ \t\t    ((box_size << 8) & 0x00FF0000) |\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32910.patch",
                "status": "added",
                "additions": 268,
                "deletions": 0,
                "changes": 268,
                "patch": "@@ -0,0 +1,268 @@\n+From e40df6d48a1cbab56f5d15016cc861a503423cfe Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Sun, 8 Dec 2024 20:00:35 -0600\n+Subject: [PATCH 1/3] auth-digest: Handle missing realm in authenticate header\n+\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/417.patch\n+---\n+ libsoup/auth/soup-auth-digest.c |  3 ++\n+ tests/auth-test.c               | 50 +++++++++++++++++++++++++++++++++\n+ 2 files changed, 53 insertions(+)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 2e81849af..4f12e87a5 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -148,6 +148,9 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \tguint qop_options;\n+ \tgboolean ok = TRUE;\n+ \n++        if (!soup_auth_get_realm (auth))\n++                return FALSE;\n++\n+ \tg_free (priv->domain);\n+ \tg_free (priv->nonce);\n+ \tg_free (priv->opaque);\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index 158fdac10..3066e904a 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1866,6 +1866,55 @@ do_multiple_digest_algorithms (void)\n+ \tsoup_test_server_quit_unref (server);\n+ }\n+ \n++static void\n++on_request_read_for_missing_realm (SoupServer        *server,\n++                                   SoupServerMessage *msg,\n++                                   gpointer           user_data)\n++{\n++        SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n++        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\\\"auth\\\"\");\n++}\n++\n++static void\n++do_missing_realm_test (void)\n++{\n++        SoupSession *session;\n++        SoupMessage *msg;\n++        SoupServer *server;\n++        SoupAuthDomain *digest_auth_domain;\n++        gint status;\n++        GUri *uri;\n++\n++        server = soup_test_server_new (SOUP_TEST_SERVER_IN_THREAD);\n++\tsoup_server_add_handler (server, NULL,\n++\t\t\t\t server_callback, NULL, NULL);\n++\turi = soup_test_server_get_uri (server, \"http\", NULL);\n++\n++\tdigest_auth_domain = soup_auth_domain_digest_new (\n++\t\t\"realm\", \"auth-test\",\n++\t\t\"auth-callback\", server_digest_auth_callback,\n++\t\tNULL);\n++        soup_auth_domain_add_path (digest_auth_domain, \"/\");\n++\tsoup_server_add_auth_domain (server, digest_auth_domain);\n++        g_object_unref (digest_auth_domain);\n++\n++        g_signal_connect (server, \"request-read\",\n++                          G_CALLBACK (on_request_read_for_missing_realm),\n++                          NULL);\n++\n++        session = soup_test_session_new (NULL);\n++        msg = soup_message_new_from_uri (\"GET\", uri);\n++        g_signal_connect (msg, \"authenticate\",\n++                          G_CALLBACK (on_digest_authenticate),\n++                          NULL);\n++\n++        status = soup_test_session_send_message (session, msg);\n++\n++        g_assert_cmpint (status, ==, SOUP_STATUS_UNAUTHORIZED);\n++\tg_uri_unref (uri);\n++\tsoup_test_server_quit_unref (server);\n++}\n++\n+ int\n+ main (int argc, char **argv)\n+ {\n+@@ -1899,6 +1948,7 @@ main (int argc, char **argv)\n+ \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n+         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n+         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n++        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+\n+\n+From 405a8a34597a44bd58c4759e7d5e23f02c3b556a Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Thu, 26 Dec 2024 18:18:35 -0600\n+Subject: [PATCH 2/3] auth-digest: Handle missing nonce\n+\n+---\n+ libsoup/auth/soup-auth-digest.c | 45 +++++++++++++++++++++++++--------\n+ tests/auth-test.c               | 19 ++++++++------\n+ 2 files changed, 46 insertions(+), 18 deletions(-)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 4f12e87a5..350bfde69 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -138,6 +138,19 @@ soup_auth_digest_get_qop (SoupAuthDigestQop qop)\n+ \treturn g_string_free (out, FALSE);\n+ }\n+ \n++static gboolean\n++validate_params (SoupAuthDigest *auth_digest)\n++{\n++        SoupAuthDigestPrivate *priv = soup_auth_digest_get_instance_private (auth_digest);\n++\n++        if (priv->qop || priv->algorithm == SOUP_AUTH_DIGEST_ALGORITHM_MD5_SESS) {\n++                if (!priv->nonce)\n++                        return FALSE;\n++        }\n++\n++        return TRUE;\n++}\n++\n+ static gboolean\n+ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \t\t\t GHashTable *auth_params)\n+@@ -175,16 +188,21 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \tif (priv->algorithm == -1)\n+ \t\tok = FALSE;\n+ \n+-\tstale = g_hash_table_lookup (auth_params, \"stale\");\n+-\tif (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n+-\t\trecompute_hex_a1 (priv);\n+-\telse {\n+-\t\tg_free (priv->user);\n+-\t\tpriv->user = NULL;\n+-\t\tg_free (priv->cnonce);\n+-\t\tpriv->cnonce = NULL;\n+-\t\tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n+-\t\tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n++        if (!validate_params (auth_digest))\n++                ok = FALSE;\n++\n++        if (ok) {\n++                stale = g_hash_table_lookup (auth_params, \"stale\");\n++                if (stale && !g_ascii_strcasecmp (stale, \"TRUE\") && *priv->hex_urp)\n++                        recompute_hex_a1 (priv);\n++                else {\n++                        g_free (priv->user);\n++                        priv->user = NULL;\n++                        g_free (priv->cnonce);\n++                        priv->cnonce = NULL;\n++                        memset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n++                        memset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n++                }\n+         }\n+ \n+ \treturn ok;\n+@@ -276,6 +294,8 @@ soup_auth_digest_compute_hex_a1 (const char              *hex_urp,\n+ \n+ \t\t/* In MD5-sess, A1 is hex_urp:nonce:cnonce */\n+ \n++                g_assert (nonce && cnonce);\n++\n+ \t\tchecksum = g_checksum_new (G_CHECKSUM_MD5);\n+ \t\tg_checksum_update (checksum, (guchar *)hex_urp, strlen (hex_urp));\n+ \t\tg_checksum_update (checksum, (guchar *)\":\", 1);\n+@@ -366,6 +386,8 @@ soup_auth_digest_compute_response (const char        *method,\n+ \tif (qop) {\n+ \t\tchar tmp[9];\n+ \n++                g_assert (cnonce);\n++\n+ \t\tg_snprintf (tmp, 9, \"%.8x\", nc);\n+ \t\tg_checksum_update (checksum, (guchar *)tmp, strlen (tmp));\n+ \t\tg_checksum_update (checksum, (guchar *)\":\", 1);\n+@@ -429,6 +451,9 @@ soup_auth_digest_get_authorization (SoupAuth *auth, SoupMessage *msg)\n+ \tg_return_val_if_fail (uri != NULL, NULL);\n+ \turl = soup_uri_get_path_and_query (uri);\n+ \n++        g_assert (priv->nonce);\n++        g_assert (!priv->qop || priv->cnonce);\n++\n+ \tsoup_auth_digest_compute_response (soup_message_get_method (msg), url, priv->hex_a1,\n+ \t\t\t\t\t   priv->qop, priv->nonce,\n+ \t\t\t\t\t   priv->cnonce, priv->nc,\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index 3066e904a..c651c7cd9 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1867,16 +1867,17 @@ do_multiple_digest_algorithms (void)\n+ }\n+ \n+ static void\n+-on_request_read_for_missing_realm (SoupServer        *server,\n+-                                   SoupServerMessage *msg,\n+-                                   gpointer           user_data)\n++on_request_read_for_missing_params (SoupServer        *server,\n++                                      SoupServerMessage *msg,\n++                                      gpointer           user_data)\n+ {\n++        const char *auth_header = user_data;\n+         SoupMessageHeaders *response_headers = soup_server_message_get_response_headers (msg);\n+-        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", \"Digest qop=\\\"auth\\\"\");\n++        soup_message_headers_replace (response_headers, \"WWW-Authenticate\", auth_header);\n+ }\n+ \n+ static void\n+-do_missing_realm_test (void)\n++do_missing_params_test (gconstpointer auth_header)\n+ {\n+         SoupSession *session;\n+         SoupMessage *msg;\n+@@ -1899,8 +1900,8 @@ do_missing_realm_test (void)\n+         g_object_unref (digest_auth_domain);\n+ \n+         g_signal_connect (server, \"request-read\",\n+-                          G_CALLBACK (on_request_read_for_missing_realm),\n+-                          NULL);\n++                          G_CALLBACK (on_request_read_for_missing_params),\n++                          (gpointer)auth_header);\n+ \n+         session = soup_test_session_new (NULL);\n+         msg = soup_message_new_from_uri (\"GET\", uri);\n+@@ -1948,7 +1949,9 @@ main (int argc, char **argv)\n+ \tg_test_add_func (\"/auth/auth-uri\", do_auth_uri_test);\n+         g_test_add_func (\"/auth/cancel-request-on-authenticate\", do_cancel_request_on_authenticate);\n+         g_test_add_func (\"/auth/multiple-algorithms\", do_multiple_digest_algorithms);\n+-        g_test_add_func (\"/auth/missing-realm\", do_missing_realm_test);\n++        g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n++        g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n++        g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+\n+\n+From ea16eeacb052e423eb5c3b0b705e5eab34b13832 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Fri, 27 Dec 2024 13:52:52 -0600\n+Subject: [PATCH 3/3] auth-digest: Fix leak\n+\n+---\n+ libsoup/auth/soup-auth-digest.c | 1 +\n+ 1 file changed, 1 insertion(+)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 350bfde69..9eb7fa0e2 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -72,6 +72,7 @@ soup_auth_digest_finalize (GObject *object)\n+ \tg_free (priv->nonce);\n+ \tg_free (priv->domain);\n+ \tg_free (priv->cnonce);\n++        g_free (priv->opaque);\n+ \n+ \tmemset (priv->hex_urp, 0, sizeof (priv->hex_urp));\n+ \tmemset (priv->hex_a1, 0, sizeof (priv->hex_a1));\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32912.patch",
                "status": "added",
                "additions": 38,
                "deletions": 0,
                "changes": 38,
                "patch": "@@ -0,0 +1,38 @@\n+From cd077513f267e43ce4b659eb18a1734d8a369992 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Wed, 5 Feb 2025 14:03:05 -0600\n+Subject: [PATCH] auth-digest: Handle missing nonce\n+\n+---\n+ libsoup/auth/soup-auth-digest.c | 2 +-\n+ tests/auth-test.c               | 1 +\n+ 2 files changed, 2 insertions(+), 1 deletion(-)\n+\n+diff --git a/libsoup/auth/soup-auth-digest.c b/libsoup/auth/soup-auth-digest.c\n+index 9eb7fa0e..d69a4013 100644\n+--- a/libsoup/auth/soup-auth-digest.c\n++++ b/libsoup/auth/soup-auth-digest.c\n+@@ -162,7 +162,7 @@ soup_auth_digest_update (SoupAuth *auth, SoupMessage *msg,\n+ \tguint qop_options;\n+ \tgboolean ok = TRUE;\n+ \n+-        if (!soup_auth_get_realm (auth))\n++        if (!soup_auth_get_realm (auth) || !g_hash_table_contains (auth_params, \"nonce\"))\n+                 return FALSE;\n+ \n+ \tg_free (priv->domain);\n+diff --git a/tests/auth-test.c b/tests/auth-test.c\n+index c651c7cd..484097f1 100644\n+--- a/tests/auth-test.c\n++++ b/tests/auth-test.c\n+@@ -1952,6 +1952,7 @@ main (int argc, char **argv)\n+         g_test_add_data_func (\"/auth/missing-params/realm\", \"Digest qop=\\\"auth\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\", do_missing_params_test);\n+         g_test_add_data_func (\"/auth/missing-params/nonce-md5-sess\", \"Digest realm=\\\"auth-test\\\", qop=\\\"auth,auth-int\\\", opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\" algorithm=\\\"MD5-sess\\\"\", do_missing_params_test);\n++        g_test_add_data_func (\"/auth/missing-params/nonce-and-qop\", \"Digest realm=\\\"auth-test\\\"\", do_missing_params_test);\n+ \n+ \tret = g_test_run ();\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2025-32913.patch",
                "status": "added",
                "additions": 28,
                "deletions": 0,
                "changes": 28,
                "patch": "@@ -0,0 +1,28 @@\n+From 260ce178f526f4b8baaa1cafc6e1e81fab225f53 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Fri, 27 Dec 2024 18:00:39 -0600\n+Subject: [PATCH] soup_message_headers_get_content_disposition: strdup\n+ truncated filenames\n+\n+This table frees the strings it contains.\n+Link: https://gitlab.gnome.org/GNOME/libsoup/-/commit/f4a761fb66512fff59798765e8ac5b9e57dceef0.patch\n+---\n+ libsoup/soup-message-headers.c | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c\n+index bcee5b9..18cbf98 100644\n+--- a/libsoup/soup-message-headers.c\n++++ b/libsoup/soup-message-headers.c\n+@@ -1611,7 +1611,7 @@ soup_message_headers_get_content_disposition (SoupMessageHeaders  *hdrs,\n+ \t\tchar *filename = strrchr (orig_value, '/');\n+ \n+ \t\tif (filename)\n+-\t\t\tg_hash_table_insert (*params, g_strdup (orig_key), filename + 1);\n++\t\t\tg_hash_table_insert (*params, g_strdup (orig_key), g_strdup (filename + 1));\n+ \t}\n+ \treturn TRUE;\n+ }\n+-- \n+2.34.1\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 21,
                "deletions": 4,
                "changes": 25,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        2%{?dist}\n+Release:        3%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -41,9 +41,19 @@ Requires:       glib-networking\n Requires:       libpsl\n Requires:       libxml2\n \n-Patch:          CVE-2024-52530.patch\n-Patch:          CVE-2024-52531.patch\n-Patch:          CVE-2024-52532.patch\n+Patch0:          CVE-2024-52530.patch\n+Patch1:          CVE-2024-52531.patch\n+Patch2:          CVE-2024-52532.patch\n+# CVE-2025-32913 will be fixed in 3.6.2 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/f4a761fb66512fff59798765e8ac5b9e57dceef0\n+Patch3:          CVE-2025-32913.patch\n+# CVE-2025-32906 will be fixed in 3.6.5 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/af5b9a4a3945c52b940d5ac181ef51bb12011f1f\n+Patch4:          CVE-2025-32906.patch\n+# CVE-2025-32909 will be fixed in 3.6.2 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/ba4c3a6f988beff59e45801ab36067293d24ce92\n+Patch5:          CVE-2025-32909.patch\n+# CVE-2025-32910 will be fixed in 3.6.2 by https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/417\n+Patch6:          CVE-2025-32910.patch\n+# CVE-2025-32912 will be fixed in 3.6.5 by https://gitlab.gnome.org/GNOME/libsoup/-/commit/cd077513f267e43ce4b659eb18a1734d8a369992\n+Patch7:          CVE-2025-32912.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -111,6 +121,13 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Wed Apr 16 2025 Kevin Lockwood <v-klockwood@microsoft.com> - 3.4.4-3\n+- Add patch for CVE-2025-32913\n+- Add patch for CVE-2025-32906\n+- Add patch for CVE-2025-32909\n+- Add patch for CVE-2025-32910\n+- Add patch for CVE-2025-32912\n+\n * Fri Nov 15 2024 Thien Trung Vuong <tvuong@microsoft.com> - 3.4.4-2\n - Add patches for CVE-2024-52530, CVE-2024-52531, CVE-2024-52532\n "
            }
        ],
        "cves": [
            "CVE-2025-32913",
            "CVE-2025-32906",
            "CVE-2025-32909",
            "CVE-2025-32910",
            "CVE-2025-32912"
        ],
        "base_branch": "fasttrack/3.0"
    },
    "13406": {
        "pr_name": "Patch libsoup for CVE-2025-32053 [Medium]",
        "pr_date": "2025-04-15T15:02:25Z",
        "user": "bhagyapathak",
        "url": "https://github.com/microsoft/azurelinux/pull/13406",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2025-32053.patch",
                "status": "added",
                "additions": 36,
                "deletions": 0,
                "changes": 36,
                "patch": "@@ -0,0 +1,36 @@\n+From eaed42ca8d40cd9ab63764e3d63641180505f40a Mon Sep 17 00:00:00 2001\n+From: Ar Jun <pkillarjun@protonmail.com>\n+Date: Mon, 18 Nov 2024 14:59:51 -0600\n+Subject: [PATCH] Fix heap buffer overflow in\n+ soup-content-sniffer.c:sniff_feed_or_html()\n+\n+Upstream patch reference: https://gitlab.gnome.org/GNOME/libsoup/-/commit/eaed42ca8d40cd9ab63764e3d63641180505f40a\n+---\n+ libsoup/content-sniffer/soup-content-sniffer.c | 4 ++--\n+ 1 file changed, 2 insertions(+), 2 deletions(-)\n+\n+diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c\n+index b62e4888..5a181ff1 100644\n+--- a/libsoup/content-sniffer/soup-content-sniffer.c\n++++ b/libsoup/content-sniffer/soup-content-sniffer.c\n+@@ -641,7 +641,7 @@ skip_insignificant_space (const char *resource, int *pos, int resource_length)\n+ \t       (resource[*pos] == '\\x0D')) {\n+ \t\t*pos = *pos + 1;\n+ \n+-\t\tif (*pos > resource_length)\n++\t\tif (*pos >= resource_length)\n+ \t\t\treturn TRUE;\n+ \t}\n+ \n+@@ -704,7 +704,7 @@ sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)\n+ \t\tdo {\n+ \t\t\tpos++;\n+ \n+-\t\t\tif (pos > resource_length)\n++\t\t\tif ((pos + 1) > resource_length)\n+ \t\t\t\tgoto text_html;\n+ \t\t} while (resource[pos] != '>');\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 5,
                "deletions": 1,
                "changes": 6,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        5%{?dist}\n+Release:        6%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -62,6 +62,7 @@ Patch12:         CVE-2025-32050.patch\n Patch13:         CVE-2025-32051.patch\n Patch14:         CVE-2025-46420.patch\n Patch15:         CVE-2025-46421.patch\n+Patch16:         CVE-2025-32053.patch\n \n %description\n libsoup is HTTP client/server library for GNOME\n@@ -129,6 +130,9 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Wed May 7 2025 Bhagyashri Pathak <Bhapathak@microsoft.com> - 3.4.4-6\n+- Patch for CVE-2025-32053\n+\n * Fri May 02 2025 Kshitiz Godara <kgodara@microsoft.com> - 3.4.4-5\n - Added patch for CVE-2025-2784 CVE-2025-32052 CVE-2025-32050 CVE-2025-32051 CVE-2025-46420 CVE-2025-46421\n "
            }
        ],
        "cves": [
            "CVE-2025-32053"
        ],
        "base_branch": "3.0-dev"
    },
    "11213": {
        "pr_name": "[AUTO-CHERRYPICK] libsoup: add patches for CVE-2024-52530, CVE-2024-52531, CVE-2024-52532 - branch 3.0-dev",
        "pr_date": "2024-11-25T19:52:09Z",
        "user": "CBL-Mariner-Bot",
        "url": "https://github.com/microsoft/azurelinux/pull/11213",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2024-52530.patch",
                "status": "added",
                "additions": 145,
                "deletions": 0,
                "changes": 145,
                "patch": "@@ -0,0 +1,145 @@\n+From 04df03bc092ac20607f3e150936624d4f536e68b Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Mon, 8 Jul 2024 12:33:15 -0500\n+Subject: [PATCH] headers: Strictly don't allow NUL bytes\n+\n+In the past (2015) this was allowed for some problematic sites. However Chromium also does not allow NUL bytes in either header names or values these days. So this should no longer be a problem.\n+---\n+ libsoup/soup-headers.c      | 15 +++------\n+ tests/header-parsing-test.c | 62 +++++++++++++++++--------------------\n+ 2 files changed, 32 insertions(+), 45 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index a0cf351ac..f30ee467a 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -51,13 +51,14 @@ soup_headers_parse (const char *str, int len, SoupMessageHeaders *dest)\n+ \t * ignorable trailing whitespace.\n+ \t */\n+ \n++\t/* No '\\0's are allowed */\n++\tif (memchr (str, '\\0', len))\n++\t\treturn FALSE;\n++\n+ \t/* Skip over the Request-Line / Status-Line */\n+ \theaders_start = memchr (str, '\\n', len);\n+ \tif (!headers_start)\n+ \t\treturn FALSE;\n+-\t/* No '\\0's in the Request-Line / Status-Line */\n+-\tif (memchr (str, '\\0', headers_start - str))\n+-\t\treturn FALSE;\n+ \n+ \t/* We work on a copy of the headers, which we can write '\\0's\n+ \t * into, so that we don't have to individually g_strndup and\n+@@ -69,14 +70,6 @@ soup_headers_parse (const char *str, int len, SoupMessageHeaders *dest)\n+ \theaders_copy[copy_len] = '\\0';\n+ \tvalue_end = headers_copy;\n+ \n+-\t/* There shouldn't be any '\\0's in the headers already, but\n+-\t * this is the web we're talking about.\n+-\t */\n+-\twhile ((p = memchr (headers_copy, '\\0', copy_len))) {\n+-\t\tmemmove (p, p + 1, copy_len - (p - headers_copy));\n+-\t\tcopy_len--;\n+-\t}\n+-\n+ \twhile (*(value_end + 1)) {\n+ \t\tname = value_end + 1;\n+ \t\tname_end = strchr (name, ':');\n+diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\n+index edf8eebb3..715c2c6f2 100644\n+--- a/tests/header-parsing-test.c\n++++ b/tests/header-parsing-test.c\n+@@ -358,24 +358,6 @@ static struct RequestTest {\n+ \t  }\n+ \t},\n+ \n+-\t{ \"NUL in header name\", \"760832\",\n+-\t  \"GET / HTTP/1.1\\r\\nHost\\x00: example.com\\r\\n\", 36,\n+-\t  SOUP_STATUS_OK,\n+-\t  \"GET\", \"/\", SOUP_HTTP_1_1,\n+-\t  { { \"Host\", \"example.com\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+-\t{ \"NUL in header value\", \"760832\",\n+-\t  \"GET / HTTP/1.1\\r\\nHost: example\\x00\" \"com\\r\\n\", 35,\n+-\t  SOUP_STATUS_OK,\n+-\t  \"GET\", \"/\", SOUP_HTTP_1_1,\n+-\t  { { \"Host\", \"examplecom\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+ \t/************************/\n+ \t/*** INVALID REQUESTS ***/\n+ \t/************************/\n+@@ -448,6 +430,21 @@ static struct RequestTest {\n+ \t  SOUP_STATUS_EXPECTATION_FAILED,\n+ \t  NULL, NULL, -1,\n+ \t  { { NULL } }\n++\t},\n++\n++\t// https://gitlab.gnome.org/GNOME/libsoup/-/issues/377\n++\t{ \"NUL in header name\", NULL,\n++\t  \"GET / HTTP/1.1\\r\\nHost\\x00: example.com\\r\\n\", 36,\n++\t  SOUP_STATUS_BAD_REQUEST,\n++\t  NULL, NULL, -1,\n++\t  { { NULL } }\n++\t},\n++\n++\t{ \"NUL in header value\", NULL,\n++\t  \"HTTP/1.1 200 OK\\r\\nFoo: b\\x00\" \"ar\\r\\n\", 28,\n++\t  SOUP_STATUS_BAD_REQUEST,\n++           NULL, NULL, -1,\n++\t  { { NULL } }\n+ \t}\n+ };\n+ static const int num_reqtests = G_N_ELEMENTS (reqtests);\n+@@ -620,22 +617,6 @@ static struct ResponseTest {\n+ \t    { NULL } }\n+ \t},\n+ \n+-\t{ \"NUL in header name\", \"760832\",\n+-\t  \"HTTP/1.1 200 OK\\r\\nF\\x00oo: bar\\r\\n\", 28,\n+-\t  SOUP_HTTP_1_1, SOUP_STATUS_OK, \"OK\",\n+-\t  { { \"Foo\", \"bar\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+-\t{ \"NUL in header value\", \"760832\",\n+-\t  \"HTTP/1.1 200 OK\\r\\nFoo: b\\x00\" \"ar\\r\\n\", 28,\n+-\t  SOUP_HTTP_1_1, SOUP_STATUS_OK, \"OK\",\n+-\t  { { \"Foo\", \"bar\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+ \t/********************************/\n+ \t/*** VALID CONTINUE RESPONSES ***/\n+ \t/********************************/\n+@@ -768,6 +749,19 @@ static struct ResponseTest {\n+ \t  { { NULL }\n+ \t  }\n+ \t},\n++\n++\t// https://gitlab.gnome.org/GNOME/libsoup/-/issues/377\n++\t{ \"NUL in header name\", NULL,\n++\t  \"HTTP/1.1 200 OK\\r\\nF\\x00oo: bar\\r\\n\", 28,\n++\t  -1, 0, NULL,\n++\t  { { NULL } }\n++\t},\n++\n++\t{ \"NUL in header value\", \"760832\",\n++\t  \"HTTP/1.1 200 OK\\r\\nFoo: b\\x00\" \"ar\\r\\n\", 28,\n++\t  -1, 0, NULL,\n++\t  { { NULL } }\n++\t},\n+ };\n+ static const int num_resptests = G_N_ELEMENTS (resptests);\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2024-52531.patch",
                "status": "added",
                "additions": 336,
                "deletions": 0,
                "changes": 336,
                "patch": "@@ -0,0 +1,336 @@\n+From 4ec9e3d286b6d3e982cb0fc3564dee0bf8d87ede Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Tue, 27 Aug 2024 12:18:58 -0500\n+Subject: [PATCH 1/4] fuzzing: Cover soup_header_parse_param_list\n+\n+---\n+ fuzzing/fuzz.h                   |  9 +++++++--\n+ fuzzing/fuzz_header_parsing.c    | 19 +++++++++++++++++++\n+ fuzzing/fuzz_header_parsing.dict |  8 ++++++++\n+ fuzzing/meson.build              |  2 ++\n+ 4 files changed, 36 insertions(+), 2 deletions(-)\n+ create mode 100644 fuzzing/fuzz_header_parsing.c\n+ create mode 100644 fuzzing/fuzz_header_parsing.dict\n+\n+diff --git a/fuzzing/fuzz.h b/fuzzing/fuzz.h\n+index 0d3802856..f3bd28eee 100644\n+--- a/fuzzing/fuzz.h\n++++ b/fuzzing/fuzz.h\n+@@ -1,13 +1,14 @@\n+ #include \"libsoup/soup.h\"\n+ \n+ int LLVMFuzzerTestOneInput (const unsigned char *data, size_t size);\n++static int set_logger = 0;\n+ \n+ #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\n+ static GLogWriterOutput\n+ empty_logging_func (GLogLevelFlags log_level, const GLogField *fields,\n+                     gsize n_fields, gpointer user_data)\n+ {\n+-  return G_LOG_WRITER_HANDLED;\n++        return G_LOG_WRITER_HANDLED;\n+ }\n+ #endif\n+ \n+@@ -16,6 +17,10 @@ static void\n+ fuzz_set_logging_func (void)\n+ {\n+ #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\n+-  g_log_set_writer_func (empty_logging_func, NULL, NULL);\n++        if (!set_logger)\n++        {\n++                set_logger = 1;\n++                g_log_set_writer_func (empty_logging_func, NULL, NULL);\n++        }\n+ #endif\n+ }\n+diff --git a/fuzzing/fuzz_header_parsing.c b/fuzzing/fuzz_header_parsing.c\n+new file mode 100644\n+index 000000000..a8e5c1f9f\n+--- /dev/null\n++++ b/fuzzing/fuzz_header_parsing.c\n+@@ -0,0 +1,19 @@\n++#include \"fuzz.h\"\n++\n++int\n++LLVMFuzzerTestOneInput (const unsigned char *data, size_t size)\n++{\n++        GHashTable *elements;\n++\n++        // We only accept NUL terminated strings\n++        if (!size || data[size - 1] != '\\0')\n++                return 0;\n++\n++        fuzz_set_logging_func ();\n++\n++        elements = soup_header_parse_param_list((char*)data);\n++\n++        g_hash_table_unref(elements);\n++\n++        return 0;\n++}\n+\\ No newline at end of file\n+diff --git a/fuzzing/fuzz_header_parsing.dict b/fuzzing/fuzz_header_parsing.dict\n+new file mode 100644\n+index 000000000..1562ca3a6\n+--- /dev/null\n++++ b/fuzzing/fuzz_header_parsing.dict\n+@@ -0,0 +1,8 @@\n++\"*=UTF-8''\"\n++\"*=iso-8859-1''\"\n++\"'\"\n++\"''\"\n++\"=\"\n++\"*=\"\n++\"\"\"\n++\";\"\n+\\ No newline at end of file\n+diff --git a/fuzzing/meson.build b/fuzzing/meson.build\n+index b14cbb509..5dd0f4173 100644\n+--- a/fuzzing/meson.build\n++++ b/fuzzing/meson.build\n+@@ -5,6 +5,7 @@ fuzz_targets = [\n+   'fuzz_cookie_parse',\n+   'fuzz_content_sniffer',\n+   'fuzz_date_time',\n++  'fuzz_header_parsing',\n+ ]\n+ \n+ fuzzing_args = '-fsanitize=fuzzer,address,undefined'\n+@@ -34,6 +35,7 @@ if have_fuzzing and (fuzzing_feature.enabled() or fuzzing_feature.auto())\n+         '-runs=200000',\n+         '-artifact_prefix=meson-logs/' + target + '-',\n+         '-print_final_stats=1',\n++        '-max_len=4096',\n+       ] + extra_args,\n+       env: [\n+         'ASAN_OPTIONS=fast_unwind_on_malloc=0',\n+-- \n+GitLab\n+\n+\n+From 825fda3425546847b42ad5270544e9388ff349fe Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Tue, 27 Aug 2024 13:52:08 -0500\n+Subject: [PATCH 2/4] tests: Add test for passing invalid UTF-8 to\n+ soup_header_parse_semi_param_list()\n+\n+---\n+ tests/header-parsing-test.c | 11 +++++++++++\n+ 1 file changed, 11 insertions(+)\n+\n+diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\n+index 715c2c6f2..5e423d2b2 100644\n+--- a/tests/header-parsing-test.c\n++++ b/tests/header-parsing-test.c\n+@@ -825,6 +825,17 @@ static struct ParamListTest {\n+ \t    { \"filename\", \"t\\xC3\\xA9st.txt\" },\n+ \t  },\n+ \t},\n++\n++        /* This tests invalid UTF-8 data which *should* never be passed here but it was designed to be robust against it. */\n++        { TRUE,\n++              \"invalid*=\\x69\\x27\\x27\\x93\\x93\\x93\\x93\\xff\\x61\\x61\\x61\\x61\\x61\\x61\\x61\\x62\\x63\\x64\\x65\\x0a; filename*=iso-8859-1''\\x69\\x27\\x27\\x93\\x93\\x93\\x93\\xff\\x61\\x61\\x61\\x61\\x61\\x61\\x61\\x62\\x63\\x64\\x65\\x0a; foo\",\n++              {\n++                    { \"filename\", \"i''\\302\\223\\302\\223\\302\\223\\302\\223\\303\\277aaaaaaabcde\" },\n++                    { \"invalid\", \"\\302\\223\\302\\223\\302\\223\\302\\223\\303\\277aaaaaaabcde\" },\n++                    { \"foo\", NULL },\n++\n++                },\n++        }\n+ };\n+ static const int num_paramlisttests = G_N_ELEMENTS (paramlisttests);\n+ \n+-- \n+GitLab\n+\n+\n+From 3c54033634ae537b52582900a7ba432c52ae8174 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Mon, 16 Sep 2024 13:56:09 -0500\n+Subject: [PATCH 3/4] Define GLIB_VERSION_MAX_ALLOWED and\n+ GLIB_VERSION_MIN_REQUIRED\n+\n+---\n+ meson.build          | 3 +++\n+ tests/hsts-db-test.c | 3 ++-\n+ tests/proxy-test.c   | 3 ++-\n+ 3 files changed, 7 insertions(+), 2 deletions(-)\n+\n+diff --git a/meson.build b/meson.build\n+index f7c633891..08b0d764d 100644\n+--- a/meson.build\n++++ b/meson.build\n+@@ -112,6 +112,9 @@ glib_deps = [glib_dep, gmodule_dep, gobject_dep, gio_dep]\n+ \n+ cdata = configuration_data()\n+ \n++cdata.set('GLIB_VERSION_MAX_ALLOWED', 'GLIB_VERSION_2_70')\n++cdata.set('GLIB_VERSION_MIN_REQUIRED', 'GLIB_VERSION_2_70')\n++\n+ libnghttp2_dep = dependency('libnghttp2')\n+ if (libnghttp2_dep.version() == 'unknown' and (libnghttp2_dep.type_name() == 'internal' or cc.has_function('nghttp2_option_set_no_rfc9113_leading_and_trailing_ws_validation', prefix : '#include <nghttp2/nghttp2.h>', dependencies : libnghttp2_dep))) or libnghttp2_dep.version().version_compare('>=1.50')\n+     cdata.set('HAVE_NGHTTP2_OPTION_SET_NO_RFC9113_LEADING_AND_TRAILING_WS_VALIDATION', '1')\n+diff --git a/tests/hsts-db-test.c b/tests/hsts-db-test.c\n+index 1149a044f..04d7c4f12 100644\n+--- a/tests/hsts-db-test.c\n++++ b/tests/hsts-db-test.c\n+@@ -1,8 +1,9 @@\n++#include \"test-utils.h\"\n++\n+ #include <glib.h>\n+ #include <glib/gstdio.h>\n+ \n+ #include <stdio.h>\n+-#include \"test-utils.h\"\n+ #include \"soup-uri-utils-private.h\"\n+ \n+ #define DB_FILE \"hsts-db.sqlite\"\n+diff --git a/tests/proxy-test.c b/tests/proxy-test.c\n+index ec0393671..d730c8a7b 100644\n+--- a/tests/proxy-test.c\n++++ b/tests/proxy-test.c\n+@@ -1,8 +1,9 @@\n+ /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n+ \n+-#include <gio/gio.h>\n+ #include \"test-utils.h\"\n+ \n++#include <gio/gio.h>\n++\n+ typedef struct {\n+ \tconst char *explanation;\n+ \tconst char *url;\n+-- \n+GitLab\n+\n+\n+From a35222dd0bfab2ac97c10e86b95f762456628283 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Tue, 27 Aug 2024 13:53:26 -0500\n+Subject: [PATCH 4/4] headers: Be more robust against invalid input when\n+ parsing params\n+\n+If you pass invalid input to a function such as soup_header_parse_param_list_strict()\n+it can cause an overflow if it decodes the input to UTF-8.\n+\n+This should never happen with valid UTF-8 input which libsoup's client API\n+ensures, however it's server API does not currently.\n+---\n+ libsoup/soup-headers.c | 46 ++++++++++++++++++++++--------------------\n+ 1 file changed, 24 insertions(+), 22 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index f30ee467a..613e1905e 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -646,8 +646,9 @@ soup_header_contains (const char *header, const char *token)\n+ }\n+ \n+ static void\n+-decode_quoted_string (char *quoted_string)\n++decode_quoted_string_inplace (GString *quoted_gstring)\n+ {\n++\tchar *quoted_string = quoted_gstring->str;\n+ \tchar *src, *dst;\n+ \n+ \tsrc = quoted_string + 1;\n+@@ -661,10 +662,11 @@ decode_quoted_string (char *quoted_string)\n+ }\n+ \n+ static gboolean\n+-decode_rfc5987 (char *encoded_string)\n++decode_rfc5987_inplace (GString *encoded_gstring)\n+ {\n+ \tchar *q, *decoded;\n+ \tgboolean iso_8859_1 = FALSE;\n++\tconst char *encoded_string = encoded_gstring->str;\n+ \n+ \tq = strchr (encoded_string, '\\'');\n+ \tif (!q)\n+@@ -696,14 +698,7 @@ decode_rfc5987 (char *encoded_string)\n+ \t\tdecoded = utf8;\n+ \t}\n+ \n+-\t/* If encoded_string was UTF-8, then each 3-character %-escape\n+-\t * will be converted to a single byte, and so decoded is\n+-\t * shorter than encoded_string. If encoded_string was\n+-\t * iso-8859-1, then each 3-character %-escape will be\n+-\t * converted into at most 2 bytes in UTF-8, and so it's still\n+-\t * shorter.\n+-\t */\n+-\tstrcpy (encoded_string, decoded);\n++\tg_string_assign (encoded_gstring, decoded);\n+ \tg_free (decoded);\n+ \treturn TRUE;\n+ }\n+@@ -713,15 +708,17 @@ parse_param_list (const char *header, char delim, gboolean strict)\n+ {\n+ \tGHashTable *params;\n+ \tGSList *list, *iter;\n+-\tchar *item, *eq, *name_end, *value;\n+-\tgboolean override, duplicated;\n+ \n+ \tparams = g_hash_table_new_full (soup_str_case_hash, \n+ \t\t\t\t\tsoup_str_case_equal,\n+-\t\t\t\t\tg_free, NULL);\n++\t\t\t\t\tg_free, g_free);\n+ \n+ \tlist = parse_list (header, delim);\n+ \tfor (iter = list; iter; iter = iter->next) {\n++\t\tchar *item, *eq, *name_end;\n++\t\tgboolean override, duplicated;\n++\t\tGString *parsed_value = NULL;\n++\n+ \t\titem = iter->data;\n+ \t\toverride = FALSE;\n+ \n+@@ -736,19 +733,19 @@ parse_param_list (const char *header, char delim, gboolean strict)\n+ \n+ \t\t\t*name_end = '\\0';\n+ \n+-\t\t\tvalue = (char *)skip_lws (eq + 1);\n++\t\t\tparsed_value = g_string_new ((char *)skip_lws (eq + 1));\n+ \n+ \t\t\tif (name_end[-1] == '*' && name_end > item + 1) {\n+ \t\t\t\tname_end[-1] = '\\0';\n+-\t\t\t\tif (!decode_rfc5987 (value)) {\n++\t\t\t\tif (!decode_rfc5987_inplace (parsed_value)) {\n++\t\t\t\t\tg_string_free (parsed_value, TRUE);\n+ \t\t\t\t\tg_free (item);\n+ \t\t\t\t\tcontinue;\n+ \t\t\t\t}\n+ \t\t\t\toverride = TRUE;\n+-\t\t\t} else if (*value == '\"')\n+-\t\t\t\tdecode_quoted_string (value);\n+-\t\t} else\n+-\t\t\tvalue = NULL;\n++\t\t\t} else if (parsed_value->str[0] == '\"')\n++\t\t\t\tdecode_quoted_string_inplace (parsed_value);\n++\t\t}\n+ \n+ \t\tduplicated = g_hash_table_lookup_extended (params, item, NULL, NULL);\n+ \n+@@ -756,11 +753,16 @@ parse_param_list (const char *header, char delim, gboolean strict)\n+ \t\t\tsoup_header_free_param_list (params);\n+ \t\t\tparams = NULL;\n+ \t\t\tg_slist_foreach (iter, (GFunc)g_free, NULL);\n++\t\t\tif (parsed_value)\n++\t\t\t\tg_string_free (parsed_value, TRUE);\n+ \t\t\tbreak;\n+-\t\t} else if (override || !duplicated)\n+-\t\t\tg_hash_table_replace (params, item, value);\n+-\t\telse\n++\t\t} else if (override || !duplicated) {\n++\t\t\tg_hash_table_replace (params, item, parsed_value ? g_string_free (parsed_value, FALSE) : NULL);\n++\t\t} else {\n++\t\t\tif (parsed_value)\n++\t\t\t\tg_string_free (parsed_value, TRUE);\n+ \t\t\tg_free (item);\n++\t\t}\n+ \t}\n+ \n+ \tg_slist_free (list);\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2024-52532.patch",
                "status": "added",
                "additions": 114,
                "deletions": 0,
                "changes": 114,
                "patch": "@@ -0,0 +1,114 @@\n+From 6adc0e3eb74c257ed4e2a23eb4b2774fdb0d67be Mon Sep 17 00:00:00 2001\n+From: Ignacio Casal Quinteiro <qignacio@amazon.com>\n+Date: Wed, 11 Sep 2024 11:52:11 +0200\n+Subject: [PATCH 1/2] websocket: process the frame as soon as we read data\n+\n+Otherwise we can enter in a read loop because we were not\n+validating the data until the all the data was read.\n+\n+Fixes #391\n+---\n+ libsoup/websocket/soup-websocket-connection.c | 4 ++--\n+ 1 file changed, 2 insertions(+), 2 deletions(-)\n+\n+diff --git a/libsoup/websocket/soup-websocket-connection.c b/libsoup/websocket/soup-websocket-connection.c\n+index a1a730473..a14481340 100644\n+--- a/libsoup/websocket/soup-websocket-connection.c\n++++ b/libsoup/websocket/soup-websocket-connection.c\n+@@ -1199,9 +1199,9 @@ soup_websocket_connection_read (SoupWebsocketConnection *self)\n+ \t\t}\n+ \n+ \t\tpriv->incoming->len = len + count;\n+-\t} while (count > 0);\n+ \n+-\tprocess_incoming (self);\n++\t\tprocess_incoming (self);\n++\t} while (count > 0 && !priv->close_sent && !priv->io_closing);\n+ \n+ \tif (end) {\n+ \t\tif (!priv->close_sent || !priv->close_received) {\n+-- \n+GitLab\n+\n+\n+From 29b96fab2512666d7241e46c98cc45b60b795c0c Mon Sep 17 00:00:00 2001\n+From: Ignacio Casal Quinteiro <qignacio@amazon.com>\n+Date: Wed, 2 Oct 2024 11:17:19 +0200\n+Subject: [PATCH 2/2] websocket-test: disconnect error copy after the test ends\n+\n+Otherwise the server will have already sent a few more wrong\n+bytes and the client will continue getting errors to copy\n+but the error is already != NULL and it will assert\n+---\n+ tests/websocket-test.c | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/tests/websocket-test.c b/tests/websocket-test.c\n+index 06c443bb5..6a48c1f9b 100644\n+--- a/tests/websocket-test.c\n++++ b/tests/websocket-test.c\n+@@ -1539,8 +1539,9 @@ test_receive_invalid_encode_length_64 (Test *test,\n+ \tGError *error = NULL;\n+ \tInvalidEncodeLengthTest context = { test, NULL };\n+ \tguint i;\n++\tguint error_id;\n+ \n+-\tg_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n++\terror_id = g_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n+ \tg_signal_connect (test->client, \"message\", G_CALLBACK (on_binary_message), &received);\n+ \n+ \t/* We use 127(\\x7f) as payload length with 65535 extended length */\n+@@ -1553,6 +1554,7 @@ test_receive_invalid_encode_length_64 (Test *test,\n+ \tWAIT_UNTIL (error != NULL || received != NULL);\n+ \tg_assert_error (error, SOUP_WEBSOCKET_ERROR, SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR);\n+ \tg_clear_error (&error);\n++        g_signal_handler_disconnect (test->client, error_id);\n+ \tg_assert_null (received);\n+ \n+         g_thread_join (thread);\n+-- \n+GitLab\n+\n+\n+From 4c9e75c6676a37b6485620c332e568e1a3f530ff Mon Sep 17 00:00:00 2001\n+From: Simon McVittie <smcv@debian.org>\n+Date: Wed, 13 Nov 2024 14:14:23 +0000\n+Subject: [PATCH] websocket-test: Disconnect error signal in another place\n+\n+This is the same change as commit 29b96fab \"websocket-test: disconnect\n+error copy after the test ends\", and is done for the same reason, but\n+replicating it into a different function.\n+\n+Fixes: 6adc0e3e \"websocket: process the frame as soon as we read data\"\n+Resolves: https://gitlab.gnome.org/GNOME/libsoup/-/issues/399\n+Signed-off-by: Simon McVittie <smcv@debian.org>\n+---\n+ tests/websocket-test.c | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/tests/websocket-test.c b/tests/websocket-test.c\n+index 6a48c1f9..723f2857 100644\n+--- a/tests/websocket-test.c\n++++ b/tests/websocket-test.c\n+@@ -1508,8 +1508,9 @@ test_receive_invalid_encode_length_16 (Test *test,\n+ \tGError *error = NULL;\n+ \tInvalidEncodeLengthTest context = { test, NULL };\n+ \tguint i;\n++\tguint error_id;\n+ \n+-\tg_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n++\terror_id = g_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n+ \tg_signal_connect (test->client, \"message\", G_CALLBACK (on_binary_message), &received);\n+ \n+ \t/* We use 126(~) as payload length with 125 extended length */\n+@@ -1522,6 +1523,7 @@ test_receive_invalid_encode_length_16 (Test *test,\n+ \tWAIT_UNTIL (error != NULL || received != NULL);\n+ \tg_assert_error (error, SOUP_WEBSOCKET_ERROR, SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR);\n+ \tg_clear_error (&error);\n++        g_signal_handler_disconnect (test->client, error_id);\n+ \tg_assert_null (received);\n+ \n+ \tg_thread_join (thread);\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 9,
                "deletions": 2,
                "changes": 11,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        1%{?dist}\n+Release:        2%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -41,6 +41,10 @@ Requires:       glib-networking\n Requires:       libpsl\n Requires:       libxml2\n \n+Patch:          CVE-2024-52530.patch\n+Patch:          CVE-2024-52531.patch\n+Patch:          CVE-2024-52532.patch\n+\n %description\n libsoup is HTTP client/server library for GNOME\n \n@@ -62,7 +66,7 @@ Requires:       %{name} = %{version}-%{release}\n These are the additional language files of libsoup.\n \n %prep\n-%autosetup\n+%autosetup -p1\n \n %build\n %meson \\\n@@ -107,6 +111,9 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri Nov 15 2024 Thien Trung Vuong <tvuong@microsoft.com> - 3.4.4-2\n+- Add patches for CVE-2024-52530, CVE-2024-52531, CVE-2024-52532\n+\n * Wed Dec 13 2023 Andrew Phelps <anphel@microsoft.com> - 3.4.4-1\n - Upgrade to version 3.4.4\n - Remove doc subpackage"
            }
        ],
        "cves": [
            "CVE-2024-52530",
            "CVE-2024-52531",
            "CVE-2024-52532"
        ],
        "base_branch": "3.0-dev"
    },
    "11108": {
        "pr_name": "libsoup: add patches for CVE-2024-52530, CVE-2024-52531, CVE-2024-52532",
        "pr_date": "2024-11-15T23:00:37Z",
        "user": "trungams",
        "url": "https://github.com/microsoft/azurelinux/pull/11108",
        "merged": true,
        "state": "closed",
        "code": [
            {
                "filename": "SPECS/libsoup/CVE-2024-52530.patch",
                "status": "added",
                "additions": 145,
                "deletions": 0,
                "changes": 145,
                "patch": "@@ -0,0 +1,145 @@\n+From 04df03bc092ac20607f3e150936624d4f536e68b Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Mon, 8 Jul 2024 12:33:15 -0500\n+Subject: [PATCH] headers: Strictly don't allow NUL bytes\n+\n+In the past (2015) this was allowed for some problematic sites. However Chromium also does not allow NUL bytes in either header names or values these days. So this should no longer be a problem.\n+---\n+ libsoup/soup-headers.c      | 15 +++------\n+ tests/header-parsing-test.c | 62 +++++++++++++++++--------------------\n+ 2 files changed, 32 insertions(+), 45 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index a0cf351ac..f30ee467a 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -51,13 +51,14 @@ soup_headers_parse (const char *str, int len, SoupMessageHeaders *dest)\n+ \t * ignorable trailing whitespace.\n+ \t */\n+ \n++\t/* No '\\0's are allowed */\n++\tif (memchr (str, '\\0', len))\n++\t\treturn FALSE;\n++\n+ \t/* Skip over the Request-Line / Status-Line */\n+ \theaders_start = memchr (str, '\\n', len);\n+ \tif (!headers_start)\n+ \t\treturn FALSE;\n+-\t/* No '\\0's in the Request-Line / Status-Line */\n+-\tif (memchr (str, '\\0', headers_start - str))\n+-\t\treturn FALSE;\n+ \n+ \t/* We work on a copy of the headers, which we can write '\\0's\n+ \t * into, so that we don't have to individually g_strndup and\n+@@ -69,14 +70,6 @@ soup_headers_parse (const char *str, int len, SoupMessageHeaders *dest)\n+ \theaders_copy[copy_len] = '\\0';\n+ \tvalue_end = headers_copy;\n+ \n+-\t/* There shouldn't be any '\\0's in the headers already, but\n+-\t * this is the web we're talking about.\n+-\t */\n+-\twhile ((p = memchr (headers_copy, '\\0', copy_len))) {\n+-\t\tmemmove (p, p + 1, copy_len - (p - headers_copy));\n+-\t\tcopy_len--;\n+-\t}\n+-\n+ \twhile (*(value_end + 1)) {\n+ \t\tname = value_end + 1;\n+ \t\tname_end = strchr (name, ':');\n+diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\n+index edf8eebb3..715c2c6f2 100644\n+--- a/tests/header-parsing-test.c\n++++ b/tests/header-parsing-test.c\n+@@ -358,24 +358,6 @@ static struct RequestTest {\n+ \t  }\n+ \t},\n+ \n+-\t{ \"NUL in header name\", \"760832\",\n+-\t  \"GET / HTTP/1.1\\r\\nHost\\x00: example.com\\r\\n\", 36,\n+-\t  SOUP_STATUS_OK,\n+-\t  \"GET\", \"/\", SOUP_HTTP_1_1,\n+-\t  { { \"Host\", \"example.com\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+-\t{ \"NUL in header value\", \"760832\",\n+-\t  \"GET / HTTP/1.1\\r\\nHost: example\\x00\" \"com\\r\\n\", 35,\n+-\t  SOUP_STATUS_OK,\n+-\t  \"GET\", \"/\", SOUP_HTTP_1_1,\n+-\t  { { \"Host\", \"examplecom\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+ \t/************************/\n+ \t/*** INVALID REQUESTS ***/\n+ \t/************************/\n+@@ -448,6 +430,21 @@ static struct RequestTest {\n+ \t  SOUP_STATUS_EXPECTATION_FAILED,\n+ \t  NULL, NULL, -1,\n+ \t  { { NULL } }\n++\t},\n++\n++\t// https://gitlab.gnome.org/GNOME/libsoup/-/issues/377\n++\t{ \"NUL in header name\", NULL,\n++\t  \"GET / HTTP/1.1\\r\\nHost\\x00: example.com\\r\\n\", 36,\n++\t  SOUP_STATUS_BAD_REQUEST,\n++\t  NULL, NULL, -1,\n++\t  { { NULL } }\n++\t},\n++\n++\t{ \"NUL in header value\", NULL,\n++\t  \"HTTP/1.1 200 OK\\r\\nFoo: b\\x00\" \"ar\\r\\n\", 28,\n++\t  SOUP_STATUS_BAD_REQUEST,\n++           NULL, NULL, -1,\n++\t  { { NULL } }\n+ \t}\n+ };\n+ static const int num_reqtests = G_N_ELEMENTS (reqtests);\n+@@ -620,22 +617,6 @@ static struct ResponseTest {\n+ \t    { NULL } }\n+ \t},\n+ \n+-\t{ \"NUL in header name\", \"760832\",\n+-\t  \"HTTP/1.1 200 OK\\r\\nF\\x00oo: bar\\r\\n\", 28,\n+-\t  SOUP_HTTP_1_1, SOUP_STATUS_OK, \"OK\",\n+-\t  { { \"Foo\", \"bar\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+-\t{ \"NUL in header value\", \"760832\",\n+-\t  \"HTTP/1.1 200 OK\\r\\nFoo: b\\x00\" \"ar\\r\\n\", 28,\n+-\t  SOUP_HTTP_1_1, SOUP_STATUS_OK, \"OK\",\n+-\t  { { \"Foo\", \"bar\" },\n+-\t    { NULL }\n+-\t  }\n+-\t},\n+-\n+ \t/********************************/\n+ \t/*** VALID CONTINUE RESPONSES ***/\n+ \t/********************************/\n+@@ -768,6 +749,19 @@ static struct ResponseTest {\n+ \t  { { NULL }\n+ \t  }\n+ \t},\n++\n++\t// https://gitlab.gnome.org/GNOME/libsoup/-/issues/377\n++\t{ \"NUL in header name\", NULL,\n++\t  \"HTTP/1.1 200 OK\\r\\nF\\x00oo: bar\\r\\n\", 28,\n++\t  -1, 0, NULL,\n++\t  { { NULL } }\n++\t},\n++\n++\t{ \"NUL in header value\", \"760832\",\n++\t  \"HTTP/1.1 200 OK\\r\\nFoo: b\\x00\" \"ar\\r\\n\", 28,\n++\t  -1, 0, NULL,\n++\t  { { NULL } }\n++\t},\n+ };\n+ static const int num_resptests = G_N_ELEMENTS (resptests);\n+ \n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2024-52531.patch",
                "status": "added",
                "additions": 336,
                "deletions": 0,
                "changes": 336,
                "patch": "@@ -0,0 +1,336 @@\n+From 4ec9e3d286b6d3e982cb0fc3564dee0bf8d87ede Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Tue, 27 Aug 2024 12:18:58 -0500\n+Subject: [PATCH 1/4] fuzzing: Cover soup_header_parse_param_list\n+\n+---\n+ fuzzing/fuzz.h                   |  9 +++++++--\n+ fuzzing/fuzz_header_parsing.c    | 19 +++++++++++++++++++\n+ fuzzing/fuzz_header_parsing.dict |  8 ++++++++\n+ fuzzing/meson.build              |  2 ++\n+ 4 files changed, 36 insertions(+), 2 deletions(-)\n+ create mode 100644 fuzzing/fuzz_header_parsing.c\n+ create mode 100644 fuzzing/fuzz_header_parsing.dict\n+\n+diff --git a/fuzzing/fuzz.h b/fuzzing/fuzz.h\n+index 0d3802856..f3bd28eee 100644\n+--- a/fuzzing/fuzz.h\n++++ b/fuzzing/fuzz.h\n+@@ -1,13 +1,14 @@\n+ #include \"libsoup/soup.h\"\n+ \n+ int LLVMFuzzerTestOneInput (const unsigned char *data, size_t size);\n++static int set_logger = 0;\n+ \n+ #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\n+ static GLogWriterOutput\n+ empty_logging_func (GLogLevelFlags log_level, const GLogField *fields,\n+                     gsize n_fields, gpointer user_data)\n+ {\n+-  return G_LOG_WRITER_HANDLED;\n++        return G_LOG_WRITER_HANDLED;\n+ }\n+ #endif\n+ \n+@@ -16,6 +17,10 @@ static void\n+ fuzz_set_logging_func (void)\n+ {\n+ #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\n+-  g_log_set_writer_func (empty_logging_func, NULL, NULL);\n++        if (!set_logger)\n++        {\n++                set_logger = 1;\n++                g_log_set_writer_func (empty_logging_func, NULL, NULL);\n++        }\n+ #endif\n+ }\n+diff --git a/fuzzing/fuzz_header_parsing.c b/fuzzing/fuzz_header_parsing.c\n+new file mode 100644\n+index 000000000..a8e5c1f9f\n+--- /dev/null\n++++ b/fuzzing/fuzz_header_parsing.c\n+@@ -0,0 +1,19 @@\n++#include \"fuzz.h\"\n++\n++int\n++LLVMFuzzerTestOneInput (const unsigned char *data, size_t size)\n++{\n++        GHashTable *elements;\n++\n++        // We only accept NUL terminated strings\n++        if (!size || data[size - 1] != '\\0')\n++                return 0;\n++\n++        fuzz_set_logging_func ();\n++\n++        elements = soup_header_parse_param_list((char*)data);\n++\n++        g_hash_table_unref(elements);\n++\n++        return 0;\n++}\n+\\ No newline at end of file\n+diff --git a/fuzzing/fuzz_header_parsing.dict b/fuzzing/fuzz_header_parsing.dict\n+new file mode 100644\n+index 000000000..1562ca3a6\n+--- /dev/null\n++++ b/fuzzing/fuzz_header_parsing.dict\n+@@ -0,0 +1,8 @@\n++\"*=UTF-8''\"\n++\"*=iso-8859-1''\"\n++\"'\"\n++\"''\"\n++\"=\"\n++\"*=\"\n++\"\"\"\n++\";\"\n+\\ No newline at end of file\n+diff --git a/fuzzing/meson.build b/fuzzing/meson.build\n+index b14cbb509..5dd0f4173 100644\n+--- a/fuzzing/meson.build\n++++ b/fuzzing/meson.build\n+@@ -5,6 +5,7 @@ fuzz_targets = [\n+   'fuzz_cookie_parse',\n+   'fuzz_content_sniffer',\n+   'fuzz_date_time',\n++  'fuzz_header_parsing',\n+ ]\n+ \n+ fuzzing_args = '-fsanitize=fuzzer,address,undefined'\n+@@ -34,6 +35,7 @@ if have_fuzzing and (fuzzing_feature.enabled() or fuzzing_feature.auto())\n+         '-runs=200000',\n+         '-artifact_prefix=meson-logs/' + target + '-',\n+         '-print_final_stats=1',\n++        '-max_len=4096',\n+       ] + extra_args,\n+       env: [\n+         'ASAN_OPTIONS=fast_unwind_on_malloc=0',\n+-- \n+GitLab\n+\n+\n+From 825fda3425546847b42ad5270544e9388ff349fe Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Tue, 27 Aug 2024 13:52:08 -0500\n+Subject: [PATCH 2/4] tests: Add test for passing invalid UTF-8 to\n+ soup_header_parse_semi_param_list()\n+\n+---\n+ tests/header-parsing-test.c | 11 +++++++++++\n+ 1 file changed, 11 insertions(+)\n+\n+diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c\n+index 715c2c6f2..5e423d2b2 100644\n+--- a/tests/header-parsing-test.c\n++++ b/tests/header-parsing-test.c\n+@@ -825,6 +825,17 @@ static struct ParamListTest {\n+ \t    { \"filename\", \"t\\xC3\\xA9st.txt\" },\n+ \t  },\n+ \t},\n++\n++        /* This tests invalid UTF-8 data which *should* never be passed here but it was designed to be robust against it. */\n++        { TRUE,\n++              \"invalid*=\\x69\\x27\\x27\\x93\\x93\\x93\\x93\\xff\\x61\\x61\\x61\\x61\\x61\\x61\\x61\\x62\\x63\\x64\\x65\\x0a; filename*=iso-8859-1''\\x69\\x27\\x27\\x93\\x93\\x93\\x93\\xff\\x61\\x61\\x61\\x61\\x61\\x61\\x61\\x62\\x63\\x64\\x65\\x0a; foo\",\n++              {\n++                    { \"filename\", \"i''\\302\\223\\302\\223\\302\\223\\302\\223\\303\\277aaaaaaabcde\" },\n++                    { \"invalid\", \"\\302\\223\\302\\223\\302\\223\\302\\223\\303\\277aaaaaaabcde\" },\n++                    { \"foo\", NULL },\n++\n++                },\n++        }\n+ };\n+ static const int num_paramlisttests = G_N_ELEMENTS (paramlisttests);\n+ \n+-- \n+GitLab\n+\n+\n+From 3c54033634ae537b52582900a7ba432c52ae8174 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Mon, 16 Sep 2024 13:56:09 -0500\n+Subject: [PATCH 3/4] Define GLIB_VERSION_MAX_ALLOWED and\n+ GLIB_VERSION_MIN_REQUIRED\n+\n+---\n+ meson.build          | 3 +++\n+ tests/hsts-db-test.c | 3 ++-\n+ tests/proxy-test.c   | 3 ++-\n+ 3 files changed, 7 insertions(+), 2 deletions(-)\n+\n+diff --git a/meson.build b/meson.build\n+index f7c633891..08b0d764d 100644\n+--- a/meson.build\n++++ b/meson.build\n+@@ -112,6 +112,9 @@ glib_deps = [glib_dep, gmodule_dep, gobject_dep, gio_dep]\n+ \n+ cdata = configuration_data()\n+ \n++cdata.set('GLIB_VERSION_MAX_ALLOWED', 'GLIB_VERSION_2_70')\n++cdata.set('GLIB_VERSION_MIN_REQUIRED', 'GLIB_VERSION_2_70')\n++\n+ libnghttp2_dep = dependency('libnghttp2')\n+ if (libnghttp2_dep.version() == 'unknown' and (libnghttp2_dep.type_name() == 'internal' or cc.has_function('nghttp2_option_set_no_rfc9113_leading_and_trailing_ws_validation', prefix : '#include <nghttp2/nghttp2.h>', dependencies : libnghttp2_dep))) or libnghttp2_dep.version().version_compare('>=1.50')\n+     cdata.set('HAVE_NGHTTP2_OPTION_SET_NO_RFC9113_LEADING_AND_TRAILING_WS_VALIDATION', '1')\n+diff --git a/tests/hsts-db-test.c b/tests/hsts-db-test.c\n+index 1149a044f..04d7c4f12 100644\n+--- a/tests/hsts-db-test.c\n++++ b/tests/hsts-db-test.c\n+@@ -1,8 +1,9 @@\n++#include \"test-utils.h\"\n++\n+ #include <glib.h>\n+ #include <glib/gstdio.h>\n+ \n+ #include <stdio.h>\n+-#include \"test-utils.h\"\n+ #include \"soup-uri-utils-private.h\"\n+ \n+ #define DB_FILE \"hsts-db.sqlite\"\n+diff --git a/tests/proxy-test.c b/tests/proxy-test.c\n+index ec0393671..d730c8a7b 100644\n+--- a/tests/proxy-test.c\n++++ b/tests/proxy-test.c\n+@@ -1,8 +1,9 @@\n+ /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */\n+ \n+-#include <gio/gio.h>\n+ #include \"test-utils.h\"\n+ \n++#include <gio/gio.h>\n++\n+ typedef struct {\n+ \tconst char *explanation;\n+ \tconst char *url;\n+-- \n+GitLab\n+\n+\n+From a35222dd0bfab2ac97c10e86b95f762456628283 Mon Sep 17 00:00:00 2001\n+From: Patrick Griffis <pgriffis@igalia.com>\n+Date: Tue, 27 Aug 2024 13:53:26 -0500\n+Subject: [PATCH 4/4] headers: Be more robust against invalid input when\n+ parsing params\n+\n+If you pass invalid input to a function such as soup_header_parse_param_list_strict()\n+it can cause an overflow if it decodes the input to UTF-8.\n+\n+This should never happen with valid UTF-8 input which libsoup's client API\n+ensures, however it's server API does not currently.\n+---\n+ libsoup/soup-headers.c | 46 ++++++++++++++++++++++--------------------\n+ 1 file changed, 24 insertions(+), 22 deletions(-)\n+\n+diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c\n+index f30ee467a..613e1905e 100644\n+--- a/libsoup/soup-headers.c\n++++ b/libsoup/soup-headers.c\n+@@ -646,8 +646,9 @@ soup_header_contains (const char *header, const char *token)\n+ }\n+ \n+ static void\n+-decode_quoted_string (char *quoted_string)\n++decode_quoted_string_inplace (GString *quoted_gstring)\n+ {\n++\tchar *quoted_string = quoted_gstring->str;\n+ \tchar *src, *dst;\n+ \n+ \tsrc = quoted_string + 1;\n+@@ -661,10 +662,11 @@ decode_quoted_string (char *quoted_string)\n+ }\n+ \n+ static gboolean\n+-decode_rfc5987 (char *encoded_string)\n++decode_rfc5987_inplace (GString *encoded_gstring)\n+ {\n+ \tchar *q, *decoded;\n+ \tgboolean iso_8859_1 = FALSE;\n++\tconst char *encoded_string = encoded_gstring->str;\n+ \n+ \tq = strchr (encoded_string, '\\'');\n+ \tif (!q)\n+@@ -696,14 +698,7 @@ decode_rfc5987 (char *encoded_string)\n+ \t\tdecoded = utf8;\n+ \t}\n+ \n+-\t/* If encoded_string was UTF-8, then each 3-character %-escape\n+-\t * will be converted to a single byte, and so decoded is\n+-\t * shorter than encoded_string. If encoded_string was\n+-\t * iso-8859-1, then each 3-character %-escape will be\n+-\t * converted into at most 2 bytes in UTF-8, and so it's still\n+-\t * shorter.\n+-\t */\n+-\tstrcpy (encoded_string, decoded);\n++\tg_string_assign (encoded_gstring, decoded);\n+ \tg_free (decoded);\n+ \treturn TRUE;\n+ }\n+@@ -713,15 +708,17 @@ parse_param_list (const char *header, char delim, gboolean strict)\n+ {\n+ \tGHashTable *params;\n+ \tGSList *list, *iter;\n+-\tchar *item, *eq, *name_end, *value;\n+-\tgboolean override, duplicated;\n+ \n+ \tparams = g_hash_table_new_full (soup_str_case_hash, \n+ \t\t\t\t\tsoup_str_case_equal,\n+-\t\t\t\t\tg_free, NULL);\n++\t\t\t\t\tg_free, g_free);\n+ \n+ \tlist = parse_list (header, delim);\n+ \tfor (iter = list; iter; iter = iter->next) {\n++\t\tchar *item, *eq, *name_end;\n++\t\tgboolean override, duplicated;\n++\t\tGString *parsed_value = NULL;\n++\n+ \t\titem = iter->data;\n+ \t\toverride = FALSE;\n+ \n+@@ -736,19 +733,19 @@ parse_param_list (const char *header, char delim, gboolean strict)\n+ \n+ \t\t\t*name_end = '\\0';\n+ \n+-\t\t\tvalue = (char *)skip_lws (eq + 1);\n++\t\t\tparsed_value = g_string_new ((char *)skip_lws (eq + 1));\n+ \n+ \t\t\tif (name_end[-1] == '*' && name_end > item + 1) {\n+ \t\t\t\tname_end[-1] = '\\0';\n+-\t\t\t\tif (!decode_rfc5987 (value)) {\n++\t\t\t\tif (!decode_rfc5987_inplace (parsed_value)) {\n++\t\t\t\t\tg_string_free (parsed_value, TRUE);\n+ \t\t\t\t\tg_free (item);\n+ \t\t\t\t\tcontinue;\n+ \t\t\t\t}\n+ \t\t\t\toverride = TRUE;\n+-\t\t\t} else if (*value == '\"')\n+-\t\t\t\tdecode_quoted_string (value);\n+-\t\t} else\n+-\t\t\tvalue = NULL;\n++\t\t\t} else if (parsed_value->str[0] == '\"')\n++\t\t\t\tdecode_quoted_string_inplace (parsed_value);\n++\t\t}\n+ \n+ \t\tduplicated = g_hash_table_lookup_extended (params, item, NULL, NULL);\n+ \n+@@ -756,11 +753,16 @@ parse_param_list (const char *header, char delim, gboolean strict)\n+ \t\t\tsoup_header_free_param_list (params);\n+ \t\t\tparams = NULL;\n+ \t\t\tg_slist_foreach (iter, (GFunc)g_free, NULL);\n++\t\t\tif (parsed_value)\n++\t\t\t\tg_string_free (parsed_value, TRUE);\n+ \t\t\tbreak;\n+-\t\t} else if (override || !duplicated)\n+-\t\t\tg_hash_table_replace (params, item, value);\n+-\t\telse\n++\t\t} else if (override || !duplicated) {\n++\t\t\tg_hash_table_replace (params, item, parsed_value ? g_string_free (parsed_value, FALSE) : NULL);\n++\t\t} else {\n++\t\t\tif (parsed_value)\n++\t\t\t\tg_string_free (parsed_value, TRUE);\n+ \t\t\tg_free (item);\n++\t\t}\n+ \t}\n+ \n+ \tg_slist_free (list);\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/CVE-2024-52532.patch",
                "status": "added",
                "additions": 114,
                "deletions": 0,
                "changes": 114,
                "patch": "@@ -0,0 +1,114 @@\n+From 6adc0e3eb74c257ed4e2a23eb4b2774fdb0d67be Mon Sep 17 00:00:00 2001\n+From: Ignacio Casal Quinteiro <qignacio@amazon.com>\n+Date: Wed, 11 Sep 2024 11:52:11 +0200\n+Subject: [PATCH 1/2] websocket: process the frame as soon as we read data\n+\n+Otherwise we can enter in a read loop because we were not\n+validating the data until the all the data was read.\n+\n+Fixes #391\n+---\n+ libsoup/websocket/soup-websocket-connection.c | 4 ++--\n+ 1 file changed, 2 insertions(+), 2 deletions(-)\n+\n+diff --git a/libsoup/websocket/soup-websocket-connection.c b/libsoup/websocket/soup-websocket-connection.c\n+index a1a730473..a14481340 100644\n+--- a/libsoup/websocket/soup-websocket-connection.c\n++++ b/libsoup/websocket/soup-websocket-connection.c\n+@@ -1199,9 +1199,9 @@ soup_websocket_connection_read (SoupWebsocketConnection *self)\n+ \t\t}\n+ \n+ \t\tpriv->incoming->len = len + count;\n+-\t} while (count > 0);\n+ \n+-\tprocess_incoming (self);\n++\t\tprocess_incoming (self);\n++\t} while (count > 0 && !priv->close_sent && !priv->io_closing);\n+ \n+ \tif (end) {\n+ \t\tif (!priv->close_sent || !priv->close_received) {\n+-- \n+GitLab\n+\n+\n+From 29b96fab2512666d7241e46c98cc45b60b795c0c Mon Sep 17 00:00:00 2001\n+From: Ignacio Casal Quinteiro <qignacio@amazon.com>\n+Date: Wed, 2 Oct 2024 11:17:19 +0200\n+Subject: [PATCH 2/2] websocket-test: disconnect error copy after the test ends\n+\n+Otherwise the server will have already sent a few more wrong\n+bytes and the client will continue getting errors to copy\n+but the error is already != NULL and it will assert\n+---\n+ tests/websocket-test.c | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/tests/websocket-test.c b/tests/websocket-test.c\n+index 06c443bb5..6a48c1f9b 100644\n+--- a/tests/websocket-test.c\n++++ b/tests/websocket-test.c\n+@@ -1539,8 +1539,9 @@ test_receive_invalid_encode_length_64 (Test *test,\n+ \tGError *error = NULL;\n+ \tInvalidEncodeLengthTest context = { test, NULL };\n+ \tguint i;\n++\tguint error_id;\n+ \n+-\tg_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n++\terror_id = g_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n+ \tg_signal_connect (test->client, \"message\", G_CALLBACK (on_binary_message), &received);\n+ \n+ \t/* We use 127(\\x7f) as payload length with 65535 extended length */\n+@@ -1553,6 +1554,7 @@ test_receive_invalid_encode_length_64 (Test *test,\n+ \tWAIT_UNTIL (error != NULL || received != NULL);\n+ \tg_assert_error (error, SOUP_WEBSOCKET_ERROR, SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR);\n+ \tg_clear_error (&error);\n++        g_signal_handler_disconnect (test->client, error_id);\n+ \tg_assert_null (received);\n+ \n+         g_thread_join (thread);\n+-- \n+GitLab\n+\n+\n+From 4c9e75c6676a37b6485620c332e568e1a3f530ff Mon Sep 17 00:00:00 2001\n+From: Simon McVittie <smcv@debian.org>\n+Date: Wed, 13 Nov 2024 14:14:23 +0000\n+Subject: [PATCH] websocket-test: Disconnect error signal in another place\n+\n+This is the same change as commit 29b96fab \"websocket-test: disconnect\n+error copy after the test ends\", and is done for the same reason, but\n+replicating it into a different function.\n+\n+Fixes: 6adc0e3e \"websocket: process the frame as soon as we read data\"\n+Resolves: https://gitlab.gnome.org/GNOME/libsoup/-/issues/399\n+Signed-off-by: Simon McVittie <smcv@debian.org>\n+---\n+ tests/websocket-test.c | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/tests/websocket-test.c b/tests/websocket-test.c\n+index 6a48c1f9..723f2857 100644\n+--- a/tests/websocket-test.c\n++++ b/tests/websocket-test.c\n+@@ -1508,8 +1508,9 @@ test_receive_invalid_encode_length_16 (Test *test,\n+ \tGError *error = NULL;\n+ \tInvalidEncodeLengthTest context = { test, NULL };\n+ \tguint i;\n++\tguint error_id;\n+ \n+-\tg_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n++\terror_id = g_signal_connect (test->client, \"error\", G_CALLBACK (on_error_copy), &error);\n+ \tg_signal_connect (test->client, \"message\", G_CALLBACK (on_binary_message), &received);\n+ \n+ \t/* We use 126(~) as payload length with 125 extended length */\n+@@ -1522,6 +1523,7 @@ test_receive_invalid_encode_length_16 (Test *test,\n+ \tWAIT_UNTIL (error != NULL || received != NULL);\n+ \tg_assert_error (error, SOUP_WEBSOCKET_ERROR, SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR);\n+ \tg_clear_error (&error);\n++        g_signal_handler_disconnect (test->client, error_id);\n+ \tg_assert_null (received);\n+ \n+ \tg_thread_join (thread);\n+-- \n+GitLab\n+"
            },
            {
                "filename": "SPECS/libsoup/libsoup.spec",
                "status": "modified",
                "additions": 9,
                "deletions": 2,
                "changes": 11,
                "patch": "@@ -4,7 +4,7 @@\n Summary:        libsoup HTTP client/server library\n Name:           libsoup\n Version:        3.4.4\n-Release:        1%{?dist}\n+Release:        2%{?dist}\n License:        GPLv2\n Vendor:         Microsoft Corporation\n Distribution:   Azure Linux\n@@ -41,6 +41,10 @@ Requires:       glib-networking\n Requires:       libpsl\n Requires:       libxml2\n \n+Patch:          CVE-2024-52530.patch\n+Patch:          CVE-2024-52531.patch\n+Patch:          CVE-2024-52532.patch\n+\n %description\n libsoup is HTTP client/server library for GNOME\n \n@@ -62,7 +66,7 @@ Requires:       %{name} = %{version}-%{release}\n These are the additional language files of libsoup.\n \n %prep\n-%autosetup\n+%autosetup -p1\n \n %build\n %meson \\\n@@ -107,6 +111,9 @@ find %{buildroot} -type f -name \"*.la\" -delete -print\n %defattr(-,root,root)\n \n %changelog\n+* Fri Nov 15 2024 Thien Trung Vuong <tvuong@microsoft.com> - 3.4.4-2\n+- Add patches for CVE-2024-52530, CVE-2024-52531, CVE-2024-52532\n+\n * Wed Dec 13 2023 Andrew Phelps <anphel@microsoft.com> - 3.4.4-1\n - Upgrade to version 3.4.4\n - Remove doc subpackage"
            }
        ],
        "cves": [
            "CVE-2024-52530",
            "CVE-2024-52531",
            "CVE-2024-52532"
        ],
        "base_branch": "fasttrack/3.0"
    }
}