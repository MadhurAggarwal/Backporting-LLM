From f182429e5b1fc034050510da20c93256c4fa9652 Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Sat, 16 Nov 2024 12:07:30 -0600
Subject: [PATCH] Fix heap buffer overflow in soup_content_sniffer_sniff

Co-Author: Ar Jun <pkillarjun@protonmail.com>
---
 libsoup/content-sniffer/soup-content-sniffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c
index de0985eac..b62e48889 100644
--- a/libsoup/content-sniffer/soup-content-sniffer.c
+++ b/libsoup/content-sniffer/soup-content-sniffer.c
@@ -532,7 +532,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,
                guint index_pattern = 0;
                gboolean skip_row = FALSE;
 
-			while ((index_stream < resource_length) &&
+			while ((index_stream < resource_length - 1) &&
                    (index_pattern <= type_row->pattern_length)) {
                    /* Skip insignificant white space ("WS" in the spec) */
                    if (type_row->pattern[index_pattern] == ' ') {
-- 
GitLab
Read Hunk:
In the Patch hunk,
Lines in Original File (-) are:
                while ((index_stream < resource_length) &&
                (index_pattern <= type_row->pattern_length)) {

Lines in New File (+) are:
                while ((index_stream < resource_length - 1) &&
                (index_pattern <= type_row->pattern_length)) {

Now, for the original File, hunk is @@ -532,7
Starting Line = 532, Total Lines = 7
So, the lines in the hunk are:
532:                 while ((index_stream < resource_length) &&
533:                        (index_pattern <= type_row->pattern_length)) {
534:                 /* Skip insignificant white space ("WS" in the spec) */
535:                 if (type_row->pattern[index_pattern] == ' ') {
536:                         if (resource[index_stream] == '\x09' ||
537:                             resource[index_stream] == '\x0a' ||
538:                             resource[index_stream] == '\x0c' ||
539:                             resource[index_stream] == '\x0d' ||
540:                             resource[index_stream] == '\x20')
541:                                 index_stream++;
542:                         else
543:                                 index_pattern++;
544:                 } else {
545:                         if ((type_row->mask[index_pattern] & resource[index_stream]) != type_row->pattern[index_pattern]) {
546:                                 skip_row = TRUE;
547:                                 break;
548:                         }
549:                 }

Read File Codes:
In the File Codes, the lines are:
524: \t\tif (!sniff_scriptable && type_row->scriptable)
525: \t\t\tcontinue;
526: 
527: \t\tif (type_row->has_ws) {
528: \t\t\tguint index_stream = 0;
529: \t\t\tguint index_pattern = 0;
530: \t\t\tgboolean skip_row = FALSE;
531: 
532: \t\t\twhile ((index_stream < resource_length) &&
533: \t\t\t       (index_pattern <= type_row->pattern_length)) {
534: \t\t\t\t/* Skip insignificant white space ("WS" in the spec) */
535: \t\t\t\tif (type_row->pattern[index_pattern] == ' ') {
536: \t\t\t\t\tif (resource[index_stream] == '\\x09' ||
537: \t\t\t\t\t    resource[index_stream] == '\\x0a' ||
538: \t\t\t\t\t    resource[index_stream] == '\\x0c' ||
539: \t\t\t\t\t    resource[index_stream] == '\\x0d' ||
540: \t\t\t\t\t    resource[index_stream] == '\\x20')
541: \t\t\t\t\t\tindex_stream++;
542: \t\t\t\t\telse
543: \t\t\t\t\t\tindex_pattern++;
544: \t\t\t\t} else {
545: \t\t\t\t\tif ((type_row->mask[index_pattern] & resource[index_stream]) != type_row->pattern[index_pattern]) {
546: \t\t\t\t\t\tskip_row = TRUE;
547: \t\t\t\t\t\tbreak;
548: \t\t\t\t\t}
549: \t\t\t\t}

Thought Process:
The line numbers in the patch hunk match the line numbers in the file codes.
First Line of Patch = while ((index_stream < resource_length) &&
Line Number in Patch = 532
Hunk = @@ -532,7 +532,7 @@

First Line of File Codes = while ((index_stream < resource_length) &&
Line Number in File Codes = 532
Updated Hunk = No change needed

Output:
From f182429e5b1fc034050510da20c93256c4fa9652 Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Sat, 16 Nov 2024 12:07:30 -0600
Subject: [PATCH] Fix heap buffer overflow in soup_content_sniffer_sniff

Co-Author: Ar Jun <pkillarjun@protonmail.com>
---
 libsoup/content-sniffer/soup-content-sniffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/libsoup/content-sniffer/soup-content-sniffer.c b/libsoup/content-sniffer/soup-content-sniffer.c
index de0985eac..b62e48889 100644
--- a/libsoup/content-sniffer/soup-content-sniffer.c
+++ b/libsoup/content-sniffer/soup-content-sniffer.c
@@ -532,7 +532,7 @@ sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,
                guint index_pattern = 0;
                gboolean skip_row = FALSE;
 
-			while ((index_stream < resource_length) &&
+			while ((index_stream < resource_length - 1) &&
                    (index_pattern <= type_row->pattern_length)) {
                    /* Skip insignificant white space ("WS" in the spec) */
                    if (type_row->pattern[index_pattern] == ' ') {
-- 
GitLab