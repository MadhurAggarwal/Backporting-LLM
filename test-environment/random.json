{
    "libsoup/content-sniffer/soup-content-sniffer.c": [
        "93: \t     GBytes *buffer,",
        "94: \t     SoupContentSnifferMediaPattern table[],",
        "95: \t     int table_length)",
        "96: {",
        "97: ",
        "98:         gsize resource_length;",
        "99:         const guchar *resource = g_bytes_get_data (buffer, &resource_length);",
        "100:         resource_length = MIN (512, resource_length);",
        "101: \tint i;",
        "102: ",
        "103: \tfor (i = 0; i < table_length; i++) {",
        "104: \t\tSoupContentSnifferMediaPattern *type_row = &(table[i]);",
        "236: ",
        "237:         return memcmp (data, prefix, strlen (prefix)) == 0;",
        "238: }",
        "239: ",
        "240: static gboolean",
        "241: sniff_mp4 (SoupContentSniffer *sniffer, GBytes *buffer)",
        "242: {",
        "243: \tgsize resource_length;",
        "244: \tconst char *resource = g_bytes_get_data (buffer, &resource_length);",
        "245: \tresource_length = MIN (512, resource_length);",
        "246: \tguint32 box_size = *((guint32*)resource);",
        "247: \tguint i;",
        "248: ",
        "249: #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__",
        "250: \tbox_size = ((box_size >> 24) |",
        "251: \t\t    ((box_size << 8) & 0x00FF0000) |",
        "252: \t\t    ((box_size >> 8) & 0x0000FF00) |",
        "253: \t\t    (box_size << 24));",
        "254: #endif",
        "255: ",
        "256: \tif (resource_length < 12 || resource_length < box_size || box_size % 4 != 0)",
        "257: \t\treturn FALSE;",
        "258: ",
        "259: \tif (!data_has_prefix (resource + 4, \"ftyp\", resource_length - 4))",
        "260: \t\treturn FALSE;",
        "261: ",
        "262: \tif (!data_has_prefix (resource + 8, \"mp4\", resource_length - 8))",
        "263: \t\treturn FALSE;",
        "264: ",
        "265: \tfor (i = 16; i < box_size && i < resource_length; i = i + 4) {",
        "266: \t\tif (data_has_prefix (resource + i, \"mp4\", resource_length - i))",
        "267: \t\t\treturn TRUE;",
        "268: \t}",
        "269: ",
        "270: \treturn FALSE;",
        "271: }",
        "272: ",
        "273: static char*",
        "274: sniff_audio_video (SoupContentSniffer *sniffer, GBytes *buffer)",
        "275: {",
        "276: \tchar *sniffed_type;",
        "503: static char*",
        "504: sniff_unknown (SoupContentSniffer *sniffer, GBytes *buffer,",
        "505: \t       gboolean sniff_scriptable)",
        "506: {",
        "507: \tchar *sniffed_type = NULL;",
        "508: \tgsize resource_length;",
        "509: \tconst guchar *resource = g_bytes_get_data (buffer, &resource_length);",
        "510: \tresource_length = MIN (512, resource_length);",
        "511: \tguint i;",
        "512: ",
        "513:         if (resource_length == 0)",
        "514:                 return g_strdup (\"text/plain\");",
        "594: ",
        "595: /* MIMESNIFF: 7.2 Sniffing a mislabeled binary resource */",
        "596: static char*",
        "597: sniff_text_or_binary (SoupContentSniffer *sniffer, GBytes *buffer)",
        "598: {",
        "599: \tgsize resource_length;",
        "600: \tconst guchar *resource = g_bytes_get_data (buffer, &resource_length);",
        "601: \tresource_length = MIN (512, resource_length);",
        "602: \tgboolean looks_binary = FALSE;",
        "603: \tint i;",
        "604: ",
        "605: \t/* 2. Detecting UTF-16BE, UTF-16LE BOMs means it's text/plain */",
        "649: }",
        "650: ",
        "651: static char*",
        "652: sniff_feed_or_html (SoupContentSniffer *sniffer, GBytes *buffer)",
        "653: {",
        "654: \tgsize resource_length;",
        "655: \tconst char *resource = g_bytes_get_data (buffer, &resource_length);",
        "656: \tresource_length = MIN (512, resource_length);",
        "657: \tint pos = 0;",
        "658: ",
        "659: \tif (resource_length < 3)",
        "660: \t\tgoto text_html;"
    ]
}